+++++<div class="heading clearfix"><h1><a href="#Browser" name="Browser">Object: Browser </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Some browser properties are attached to the Browser Object for browser and platform detection.</p>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Features" name="Browser:Browser-Features">Browser.Features </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<ul>
<li>Browser.Features.xpath - (<em>boolean</em>) True if the browser supports DOM queries using XPath.</li>
<li>Browser.Features.air - (<em>boolean</em>)  True if the browser supports AIR.</li>
<li>Browser.Features.query - (<em>boolean</em>) True if the browser supports querySelectorAll.</li>
<li>Browser.Features.json - (<em>boolean</em>) True if the browser has a native JSON object.</li>
<li>Browser.Features.xhr - (<em>boolean</em>) True if the browser supports native XMLHTTP object.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Request" name="Browser:Browser-Request">Browser.Request </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<ul>
<li>Browser.Request - (<em>object</em>) The XMLHTTP object or equivalent.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-exec" name="Browser:Browser-exec">Browser.exec </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Executes the passed in string in the browser context.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Browser.exec(<span class="string">'alert("Moo!");'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-parseUA" name="Browser:Browser-parseUA">Browser.parseUA </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A function to parse a user agent string to an object, intended for informational or statistical purposes. If also passed a platform string, it will use that string in addition to the user agent to attempt to determine the platform.</p>

<p>The results of this function for the currently active user agent and platform strings are saved on the Browser object upon load. See below.</p>

<p>For more information regarding User Agent detection, please refer to the <a href="#Deprecated" alt="Deprecated section">Deprecated section</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> parsed = Browser.parseUA(userAgentString[, platformString]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>userAgentString - (<em>string</em>) A user agent string, like the one found in <code>window.navigator.userAgent</code>.</li>
<li>platformString - (<em>string</em>, optional) A platform string, like the one found in <code>window.navigator.platform</code>.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) - An object containing information parsed from the strings passed.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">console.log(Browser.parseUA(<span class="string">"Mozilla/5.0 (X11; Linux x86_64; rv:24.0) Gecko/20140319 Firefox/24.0 Iceweasel/24.4.0"</span>, <span class="string">"Linux x86_64"</span>));

<span class="comment">// This logs: {name: "firefox", version: 24, platform: "linux"}</span></code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-name" name="Browser:Browser-name">Browser.name </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>&#39;Browser.name&#39; reports the name found in the Browser&#39;s userAgent string as string, intended for informational or statistical purposes. See <a href="#Browser:Browser-parseUA" alt="Browser.parseUA">Browser.parseUA</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">alert(Browser.name); <span class="comment">// Alerts "ie" in Internet Explorer, "firefox" in Mozilla Firefox, "chrome" in Google Chrome, "safari" or "opera".</span></code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-version" name="Browser:Browser-version">Browser.version </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>&#39;Browser.version&#39; reports the version found in the Browser&#39;s userAgent string as number, intended for informational and statistical purposes. See <a href="#Browser:Browser-parseUA" alt="Browser.parseUA">Browser.parseUA</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">alert(Browser.version); <span class="comment">// Alerts '33' in Chrome 33.0.1750.152</span></code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-platform" name="Browser:Browser-platform">Browser.platform </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>&#39;Browser.platform&#39; reports the platform found in the Browser&#39;s userAgent or platform string as string, intended for informational and statistical purposes. See <a href="#Browser:Browser-parseUA" alt="Browser.parseUA">Browser.parseUA</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">alert(Browser.platform); <span class="comment">// Alerts 'mac' on OS X 10.9 Mavericks</span></code></pre><div class="heading clearfix"><h1><a href="#Deprecated" name="Deprecated">Deprecated </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>User Agent detection</h3></div>
<p>The features described below use user agent detection (either the userAgent string or platform string) to determine values or properties aimed at activating/deactivating functionality easily. You are encouraged to use other ways of reaching your goal, like feature detection (<code>Browser.Features</code>, your own or <a href="https://github.com/phiggins42/has.js" alt="has.js">has.js</a>), progressive enhancement (the act of having the least compatible features &quot;on top&quot;, so the other features still work) and/or graceful degredation (building with all features, but tweaking to have non-compatible things &quot;fall back&quot;).</p>
<div class="heading clearfix"><h4>See also:</h4></div>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent" alt="MDN about Browser detection using the user agent">MDN about Browser detection using the user agent</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Browser-name" name="Browser:Browser-Browser-name">Browser[Browser.name] </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p><strong>Important note:</strong> These properties are deprecated since MooTools 1.5, and are only available in the 1.4-compatibility version.</p>

<p>The name found in the Browser&#39;s userAgent string is stored as property names of the following Boolean values:</p>

<ul>
<li>Browser.ie - (<em>boolean</em>) True if the current browser is Internet Explorer.</li>
<li>Browser.firefox - (<em>boolean</em>) True if the current browser is Firefox.</li>
<li>Browser.safari - (<em>boolean</em>) True if the current browser is Safari.</li>
<li>Browser.chrome - (<em>boolean</em>) True if the current browser is Chrome.</li>
<li>Browser.opera - (<em>boolean</em>) True if the current browser is Opera.</li>
</ul>

<p>In addition to one of the above properties a second property consisting of the name and the major version is provided (&#39;Browser.ie6&#39;, &#39;Browser.chrome15&#39;, ...).</p>

<p>If &#39;Browser.chrome&#39; is True, all other possible properties, like &#39;Browser.firefox&#39;, &#39;Browser.ie&#39;, ... , will be <code>undefined</code>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">if</span> (Browser.ie){
    <span class="comment">// This code will only run in IE</span>
}

<span class="keyword">if</span> (Browser.firefox24){
    <span class="comment">// This code will only run in Firefox 24</span>
}

<span class="keyword">if</span> (Browser.ie6 || Browser.ie7){
    <span class="comment">// Please upgrade your browser</span>
}</code></pre>
<p>If an IE document is set to backward compatibility mode using the X-UA-Compatible header, then the Browser object is treated as if the earlier version of the browser is running.</p>
<div class="heading clearfix"><h3>Special note about Browser.ie:</h3></div>
<p>In the compatibility build, for IE&gt;=11, <code>Browser.ie</code> will remain <code>undefined</code>. See below:</p>

<p>The primary use of <code>Browser.ie</code> is activating &quot;legacy code&quot;, such &quot;legacy code&quot; is no longer required in more recent versions of Internet Explorer (and may not even work anymore). Changing <code>Browser.ie == true</code> for modern IE (IE &gt;= 11) in the compatibility build would do more harm than good, even though it&#39;s technically correct. Since we did not want to break existing projects that have come to rely on <code>Browser.ie</code> not being true for the newer version(s) of IE, the compatibility build will not set <code>Browser.ie</code> for these versions of IE. However, <code>Browser.ie11</code> will work correctly and <code>Browser.name</code> will equal &quot;ie&quot;.</p>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Platform" name="Browser:Browser-Platform">Browser.Platform </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p><strong>Important note:</strong> The <em>Browser.Platform</em> object is deprecated since MooTools 1.5, and is only available in the 1.4-compatibility version.</p>

<ul>
<li>Browser.Platform.mac - (<em>boolean</em>) True if the platform is Mac.</li>
<li>Browser.Platform.win - (<em>boolean</em>) True if the platform is Windows.</li>
<li>Browser.Platform.linux - (<em>boolean</em>) True if the platform is Linux.</li>
<li>Browser.Platform.ios - (<em>boolean</em>) True if the platform is iOS.</li>
<li>Browser.Platform.android - (<em>boolean</em>) True if the platform is Android</li>
<li>Browser.Platform.webos - (<em>boolean</em>) True if the platform is WebOS</li>
<li>Browser.Platform.other - (<em>boolean</em>) True if the platform is neither Mac, Windows, Linux, Android, WebOS nor iOS.</li>
<li>Browser.Platform.name - (<em>string</em>) The name of the platform.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Plugins" name="Browser:Browser-Plugins">Browser.Plugins </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p><strong>Important note:</strong> The <em>Browser.Plugins</em> object is deprecated since MooTools 1.5, and is only available in the 1.4-compatibility version.</p>

<ul>
<li>Browser.Plugins.Flash - (<em>object</em>) - An object with properties corresponding to the <code>version</code> and <code>build</code> number of the installed Flash plugin. Note: if flash is not installed, both <code>Browser.Plugins.Flash.version</code> and <code>Browser.Plugins.Flash.build</code> will return zero.</li>
<li>Browser.Plugins.Flash.version - (<em>number</em>) The major version of the flash plugin installed.</li>
<li>Browser.Plugins.Flash.build - (<em>number</em>) The build version of the flash plugin installed.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Engine" name="Browser:Browser-Engine">Browser.Engine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p><strong>Important note:</strong> The <em>Browser.Engine</em> object is deprecated since MooTools 1.3, and is only available in the 1.2-compatibility version.</p>
<div class="heading clearfix"><h3>Engine:</h3></div>
<ul>
<li>Browser.Engine.trident - (<em>boolean</em>) True if the current browser uses the trident engine (e.g. Internet Explorer).</li>
<li>Browser.Engine.gecko - (<em>boolean</em>) True if the current browser uses the gecko engine (e.g. Firefox, or any Mozilla Browser).</li>
<li>Browser.Engine.webkit - (<em>boolean</em>) True if the current browser uses the webkit engine (e.g. Safari, Google Chrome, Konqueror).</li>
<li>Browser.Engine.presto - (<em>boolean</em>) True if the current browser uses the presto engine (e.g. Opera 9).</li>
<li>Browser.Engine.name - (<em>string</em>) The name of the engine.</li>
<li>Browser.Engine.version - (<em>number</em>) The version of the engine. (e.g. 950)</li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Browser" name="Browser">Object: Browser </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Some browser properties are attached to the Browser Object for browser and platform detection.</p>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Features" name="Browser:Browser-Features">Browser.Features </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><ul>
<li>Browser.Features.xpath - (<em>boolean</em>) True if the browser supports DOM queries using XPath.</li>
<li>Browser.Features.air - (<em>boolean</em>)  True if the browser supports AIR.</li>
<li>Browser.Features.query - (<em>boolean</em>) True if the browser supports querySelectorAll.</li>
<li>Browser.Features.json - (<em>boolean</em>) True if the browser has a native JSON object.</li>
<li>Browser.Features.xhr - (<em>boolean</em>) True if the browser supports native XMLHTTP object.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Request" name="Browser:Browser-Request">Browser.Request </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><ul>
<li>Browser.Request - (<em>object</em>) The XMLHTTP object or equivalent.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-exec" name="Browser:Browser-exec">Browser.exec </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Executes the passed in string in the browser context.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Browser.exec(<span class="string">'alert("Moo!");'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-parseUA" name="Browser:Browser-parseUA">Browser.parseUA </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>A function to parse a user agent string to an object, intended for informational or statistical purposes. If also passed a platform string, it will use that string in addition to the user agent to attempt to determine the platform.</p>
<p>The results of this function for the currently active user agent and platform strings are saved on the Browser object upon load. See below.</p>
<p>For more information regarding User Agent detection, please refer to the <a href="#Deprecated" alt="Deprecated section">Deprecated section</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> parsed = Browser.parseUA(userAgentString[, platformString]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>userAgentString - (<em>string</em>) A user agent string, like the one found in <code>window.navigator.userAgent</code>.</li>
<li>platformString - (<em>string</em>, optional) A platform string, like the one found in <code>window.navigator.platform</code>.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) - An object containing information parsed from the strings passed.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">console.log(Browser.parseUA(<span class="string">"Mozilla/5.0 (X11; Linux x86_64; rv:24.0) Gecko/20140319 Firefox/24.0 Iceweasel/24.4.0"</span>, <span class="string">"Linux x86_64"</span>));

<span class="comment">// This logs: {name: "firefox", version: 24, platform: "linux"}</span></code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-name" name="Browser:Browser-name">Browser.name </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>&#39;Browser.name&#39; reports the name found in the Browser&#39;s userAgent string as string, intended for informational or statistical purposes. See <a href="#Browser:Browser-parseUA" alt="Browser.parseUA">Browser.parseUA</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">alert(Browser.name); <span class="comment">// Alerts "ie" in Internet Explorer, "firefox" in Mozilla Firefox, "chrome" in Google Chrome, "safari" or "opera".</span></code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-version" name="Browser:Browser-version">Browser.version </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>&#39;Browser.version&#39; reports the version found in the Browser&#39;s userAgent string as number, intended for informational and statistical purposes. See <a href="#Browser:Browser-parseUA" alt="Browser.parseUA">Browser.parseUA</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">alert(Browser.version); <span class="comment">// Alerts '33' in Chrome 33.0.1750.152</span></code></pre><div class="heading clearfix"><h2><a href="#Browser:Browser-platform" name="Browser:Browser-platform">Browser.platform </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>&#39;Browser.platform&#39; reports the platform found in the Browser&#39;s userAgent or platform string as string, intended for informational and statistical purposes. See <a href="#Browser:Browser-parseUA" alt="Browser.parseUA">Browser.parseUA</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">alert(Browser.platform); <span class="comment">// Alerts 'mac' on OS X 10.9 Mavericks</span></code></pre><div class="heading clearfix"><h1><a href="#Deprecated" name="Deprecated">Deprecated </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>User Agent detection</h3></div><p>The features described below use user agent detection (either the userAgent string or platform string) to determine values or properties aimed at activating/deactivating functionality easily. You are encouraged to use other ways of reaching your goal, like feature detection (<code>Browser.Features</code>, your own or <a href="https://github.com/phiggins42/has.js" alt="has.js">has.js</a>), progressive enhancement (the act of having the least compatible features &quot;on top&quot;, so the other features still work) and/or graceful degredation (building with all features, but tweaking to have non-compatible things &quot;fall back&quot;).</p>
<div class="heading clearfix"><h4>See also:</h4></div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent" alt="MDN about Browser detection using the user agent">MDN about Browser detection using the user agent</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Browser-name" name="Browser:Browser-Browser-name">Browser[Browser.name] </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p><strong>Important note:</strong> These properties are deprecated since MooTools 1.5, and are only available in the 1.4-compatibility version.</p>
<p>The name found in the Browser&#39;s userAgent string is stored as property names of the following Boolean values:</p>
<ul>
<li>Browser.ie - (<em>boolean</em>) True if the current browser is Internet Explorer.</li>
<li>Browser.firefox - (<em>boolean</em>) True if the current browser is Firefox.</li>
<li>Browser.safari - (<em>boolean</em>) True if the current browser is Safari.</li>
<li>Browser.chrome - (<em>boolean</em>) True if the current browser is Chrome.</li>
<li>Browser.opera - (<em>boolean</em>) True if the current browser is Opera.</li>
</ul>
<p>In addition to one of the above properties a second property consisting of the name and the major version is provided (&#39;Browser.ie6&#39;, &#39;Browser.chrome15&#39;, ...).</p>
<p>If &#39;Browser.chrome&#39; is True, all other possible properties, like &#39;Browser.firefox&#39;, &#39;Browser.ie&#39;, ... , will be <code>undefined</code>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">if</span> (Browser.ie){
    <span class="comment">// This code will only run in IE</span>
}

<span class="keyword">if</span> (Browser.firefox24){
    <span class="comment">// This code will only run in Firefox 24</span>
}

<span class="keyword">if</span> (Browser.ie6 || Browser.ie7){
    <span class="comment">// Please upgrade your browser</span>
}</code></pre><p>If an IE document is set to backward compatibility mode using the X-UA-Compatible header, then the Browser object is treated as if the earlier version of the browser is running.</p>
<div class="heading clearfix"><h3>Special note about Browser.ie:</h3></div><p>In the compatibility build, for IE&gt;=11, <code>Browser.ie</code> will remain <code>undefined</code>. See below:</p>
<p>The primary use of <code>Browser.ie</code> is activating &quot;legacy code&quot;, such &quot;legacy code&quot; is no longer required in more recent versions of Internet Explorer (and may not even work anymore). Changing <code>Browser.ie == true</code> for modern IE (IE &gt;= 11) in the compatibility build would do more harm than good, even though it&#39;s technically correct. Since we did not want to break existing projects that have come to rely on <code>Browser.ie</code> not being true for the newer version(s) of IE, the compatibility build will not set <code>Browser.ie</code> for these versions of IE. However, <code>Browser.ie11</code> will work correctly and <code>Browser.name</code> will equal &quot;ie&quot;.</p>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Platform" name="Browser:Browser-Platform">Browser.Platform </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p><strong>Important note:</strong> The <em>Browser.Platform</em> object is deprecated since MooTools 1.5, and is only available in the 1.4-compatibility version.</p>
<ul>
<li>Browser.Platform.mac - (<em>boolean</em>) True if the platform is Mac.</li>
<li>Browser.Platform.win - (<em>boolean</em>) True if the platform is Windows.</li>
<li>Browser.Platform.linux - (<em>boolean</em>) True if the platform is Linux.</li>
<li>Browser.Platform.ios - (<em>boolean</em>) True if the platform is iOS.</li>
<li>Browser.Platform.android - (<em>boolean</em>) True if the platform is Android</li>
<li>Browser.Platform.webos - (<em>boolean</em>) True if the platform is WebOS</li>
<li>Browser.Platform.other - (<em>boolean</em>) True if the platform is neither Mac, Windows, Linux, Android, WebOS nor iOS.</li>
<li>Browser.Platform.name - (<em>string</em>) The name of the platform.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Plugins" name="Browser:Browser-Plugins">Browser.Plugins </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p><strong>Important note:</strong> The <em>Browser.Plugins</em> object is deprecated since MooTools 1.5, and is only available in the 1.4-compatibility version.</p>
<ul>
<li>Browser.Plugins.Flash - (<em>object</em>) - An object with properties corresponding to the <code>version</code> and <code>build</code> number of the installed Flash plugin. Note: if flash is not installed, both <code>Browser.Plugins.Flash.version</code> and <code>Browser.Plugins.Flash.build</code> will return zero.</li>
<li>Browser.Plugins.Flash.version - (<em>number</em>) The major version of the flash plugin installed.</li>
<li>Browser.Plugins.Flash.build - (<em>number</em>) The build version of the flash plugin installed.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Browser:Browser-Engine" name="Browser:Browser-Engine">Browser.Engine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p><strong>Important note:</strong> The <em>Browser.Engine</em> object is deprecated since MooTools 1.3, and is only available in the 1.2-compatibility version.</p>
<div class="heading clearfix"><h3>Engine:</h3></div><ul>
<li>Browser.Engine.trident - (<em>boolean</em>) True if the current browser uses the trident engine (e.g. Internet Explorer).</li>
<li>Browser.Engine.gecko - (<em>boolean</em>) True if the current browser uses the gecko engine (e.g. Firefox, or any Mozilla Browser).</li>
<li>Browser.Engine.webkit - (<em>boolean</em>) True if the current browser uses the webkit engine (e.g. Safari, Google Chrome, Konqueror).</li>
<li>Browser.Engine.presto - (<em>boolean</em>) True if the current browser uses the presto engine (e.g. Opera 9).</li>
<li>Browser.Engine.name - (<em>string</em>) The name of the engine.</li>
<li>Browser.Engine.version - (<em>number</em>) The version of the engine. (e.g. 950)</li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Chain" name="Chain">Class: Chain </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A Utility Class which executes functions one after another, with each function firing after completion of the previous.
Its methods can be implemented with <a href="/core/docs/1.5.1/Class/Class#Class:implement" alt="Class:implement">Class:implement</a> into any <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>, and it is currently implemented in <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> and <a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a>.
In <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, for example, it is used to create custom, complex animations.</p>
<div class="heading clearfix"><h2><a href="#Chain:constructor" name="Chain:constructor">Chain Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><div class="heading clearfix"><h4>For new classes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class({ Implements: Chain });</code></pre><div class="heading clearfix"><h4>For existing classes:</h4></div><pre><code class="javascript">MyClass.implement(Chain);</code></pre><div class="heading clearfix"><h4>Stand alone</h4></div><pre><code class="javascript"><span class="keyword">var</span> myChain = <span class="keyword">new</span> Chain;</code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Todo = <span class="keyword">new</span> Class({
        Implements: Chain,
        initialize: <span class="keyword">function</span>(){
            <span class="keyword">this</span>.chain.apply(<span class="keyword">this</span>, arguments);
        }
    });

    <span class="keyword">var</span> myTodoList = <span class="keyword">new</span> Todo(
        <span class="keyword">function</span>(){ alert(<span class="string">'get groceries'</span>); },
        <span class="keyword">function</span>(){ alert(<span class="string">'go workout'</span>); },
        <span class="keyword">function</span>(){ alert(<span class="string">'code mootools documentation until eyes close involuntarily'</span>); },
        <span class="keyword">function</span>(){ alert(<span class="string">'sleep'</span>); }
    );</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Chain:chain" name="Chain:chain">Chain Method: chain </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds functions to the end of the call stack of the Chain instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.chain(fn[, fn2[, fn3[, ...]]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>fn - (<em>function</em> or <em>array</em>) The function (or array of functions) to add to the chain call stack. Will accept and number of functions or arrays of functions.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The current Class instance. Calls to chain can also be chained.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">//Fx.Tween has already implemented the Chain class because of inheritance of the Fx class.</span>
<span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, {property: <span class="string">'opacity'</span>});
myFx.start(<span class="number">1</span>,<span class="number">0</span>).chain(
    <span class="comment">//Notice that "this" refers to the calling object (in this case, the myFx object).</span>
    <span class="keyword">function</span>(){ <span class="keyword">this</span>.start(<span class="number">0</span>,<span class="number">1</span>); },
    <span class="keyword">function</span>(){ <span class="keyword">this</span>.start(<span class="number">1</span>,<span class="number">0</span>); },
    <span class="keyword">function</span>(){ <span class="keyword">this</span>.start(<span class="number">0</span>,<span class="number">1</span>); }
); <span class="comment">//Will fade the Element out and in twice.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, <a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Chain:callChain" name="Chain:callChain">Chain Method: callChain </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes the first function of the Chain instance stack and executes it. The next function will then become first in the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.callChain([any arguments]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>Any arguments passed in will be passed to the &quot;next&quot; function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The return value of the &quot;next&quot; function or false when the chain was empty.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myChain = <span class="keyword">new</span> Chain();
myChain.chain(
    <span class="keyword">function</span>(){ alert(<span class="string">'do dishes'</span>); },
    <span class="keyword">function</span>(){ alert(<span class="string">'put away clean dishes'</span>); }
);
myChain.callChain(); <span class="comment">// alerts 'do dishes'.</span>
myChain.callChain(); <span class="comment">// alerts 'put away clean dishes'.</span></code></pre><div class="heading clearfix"><h2><a href="#Chain:clearChain" name="Chain:clearChain">Chain Method: clearChain </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Clears the stack of a Chain instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.clearChain();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = Fx.Tween(<span class="string">'myElement'</span>, <span class="string">'color'</span>); <span class="comment">// Fx.Tween inherited Fx's implementation of Chain.</span>
myFx.chain(<span class="keyword">function</span>(){ <span class="keyword">while</span>(<span class="literal">true</span>) alert(<span class="string">"D'oh!"</span>); }); <span class="comment">// chains an infinite loop of alerts.</span>
myFx.clearChain(); <span class="comment">// cancels the infinite loop of alerts before allowing it to begin.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, <a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a></li>
</ul>
<div class="heading clearfix"><h1><a href="#Events" name="Events">Class: Events </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A Utility Class. Its methods can be implemented with <a href="/core/docs/1.5.1/Class/Class#Class:implement" alt="Class:implement">Class:implement</a> into any <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>.
In <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, for example, this Class is used to allow any number of functions to be added to the Fx events, like &#39;complete&#39;, &#39;start&#39;, and &#39;cancel&#39;.
Events in a Class that implements <a href="#Events" alt="Events">Events</a> must be either added as an option or with addEvent, not directly through .options.onEventName.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><div class="heading clearfix"><h4>For new classes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class({ Implements: Events });</code></pre><div class="heading clearfix"><h4>For existing classes:</h4></div><pre><code class="javascript">MyClass.implement(Events);</code></pre><div class="heading clearfix"><h3>Implementing:</h3></div>
<ul>
<li>This class can be implemented into other classes to add its functionality to them.</li>
<li>Events has been designed to work well with the <a href="#Options" alt="Options">Options</a> class. When the option property begins with &#39;on&#39; and is followed by a capital letter it will be added as an event (e.g. &#39;onComplete&#39; will add as &#39;complete&#39; event).</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: Events,
    initialize: <span class="keyword">function</span>(element){
        <span class="comment">// ...</span>
    },
    complete: <span class="keyword">function</span>(){
        <span class="keyword">this</span>.fireEvent(<span class="string">'complete'</span>);
    }
});

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget();
myWidget.addEvent(<span class="string">'complete'</span>, myFunction);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Events starting with &#39;on&#39; are still supported in all methods and are converted to their representation without &#39;on&#39; (e.g. &#39;onComplete&#39; becomes &#39;complete&#39;).</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>, <a href="#Options" alt="Options">Options</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Events:addEvent" name="Events:addEvent">Events Method: addEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds an event to the Class instance&#39;s event stack.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.addEvent(type, fn[, internal]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>type     - (<em>string</em>) The type of event (e.g. &#39;complete&#39;).</li>
<li>fn       - (<em>function</em>) The function to execute.</li>
<li>internal - (<em>boolean</em>, optional) Sets the function property: internal to true. Internal property is used to prevent removal.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'element'</span>, <span class="string">'opacity'</span>);
myFx.addEvent(<span class="string">'start'</span>, myStartFunction);</code></pre><div class="heading clearfix"><h2><a href="#Events:addEvents" name="Events:addEvents">Events Method: addEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The same as <a href="#Events:addEvent" alt="addEvent">addEvent</a>, but accepts an object to add multiple events at once.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.addEvents(events);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>events - (<em>object</em>) An object with key/value representing: key the event name (e.g. &#39;start&#39;), and value the function that is called when the Event occurs.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'element'</span>, <span class="string">'opacity'</span>);
myFx.addEvents({
    start: myStartFunction,
    complete: <span class="keyword">function</span>() {
        alert(<span class="string">'Done.'</span>);
    }
});</code></pre><div class="heading clearfix"><h2><a href="#Events:fireEvent" name="Events:fireEvent">Events Method: fireEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Fires all events of the specified type in the Class instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.fireEvent(type[, args[, delay]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>type  - (<em>string</em>) The type of event (e.g. &#39;complete&#39;).</li>
<li>args  - (<em>mixed</em>, optional) The argument(s) to pass to the function. To pass more than one argument, the arguments must be in an array.</li>
<li>delay - (<em>number</em>, optional) Delay in milliseconds to wait before executing the event (defaults to 0).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: Events,
    initialize: <span class="keyword">function</span>(arg1, arg2){
        <span class="comment">//...</span>
        <span class="keyword">this</span>.fireEvent(<span class="string">'initialize'</span>, [arg1, arg2], <span class="number">50</span>);
    }
});</code></pre><div class="heading clearfix"><h2><a href="#Events:removeEvent" name="Events:removeEvent">Events Method: removeEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes an event from the stack of events of the Class instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.removeEvent(type, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>type - (<em>string</em>) The type of event (e.g. &#39;complete&#39;).</li>
<li>fn   - (<em>function</em>) The function to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>If the function has the property internal and is set to true, then the event will not be removed.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Events:removeEvents" name="Events:removeEvents">Events Method: removeEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes all events of the given type from the stack of events of a Class instance. If no type is specified, removes all events of all types.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.removeEvents([events]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>events - (optional) If not passed removes all events of all types.

<ul>
<li>(<em>string</em>) The event name (e.g. &#39;success&#39;). Removes all events of that type.</li>
<li>(<em>object</em>) An object of type function pairs. Like the one passed to <a href="#Events:addEvents" alt="addEvents">addEvents</a>.</li>
</ul></li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, <span class="string">'opacity'</span>);
myFx.removeEvents(<span class="string">'complete'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>removeEvents will not remove internal events. See <a href="/core/docs/1.5.1/Element/Element.Event#Element:removeEvent" alt="Events:removeEvent">Events:removeEvent</a>.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Options" name="Options">Class: Options </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A Utility Class. Its methods can be implemented with <a href="/core/docs/1.5.1/Class/Class#Class:implement" alt="Class:implement">Class:implement</a> into any <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>.
Used to automate the setting of a Class instance&#39;s options.
Will also add Class <a href="#Events" alt="Events">Events</a> when the option property begins with &#39;on&#39; and is followed by a capital letter (e.g. &#39;onComplete&#39; adds a &#39;complete&#39; event). You will need to call this.setOptions() for this to have an effect, however.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><div class="heading clearfix"><h4>For new classes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class({Implements: Options});</code></pre><div class="heading clearfix"><h4>For existing classes:</h4></div><pre><code class="javascript">MyClass.implement(Options);</code></pre><div class="heading clearfix"><h2><a href="#Options:setOptions" name="Options:setOptions">Options Method: setOptions </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Merges the default options of the Class with the options passed in. Every value passed in to this method will be deep copied. Therefore other class instances or objects that are not intended for copying must be passed to a class in other ways.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.setOptions([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>options - (<em>object</em>, optional) The user defined options to merge with the defaults.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: Options,
    options: {
        color: <span class="string">'#fff'</span>,
        size: {
            width: <span class="number">100</span>,
            height: <span class="number">100</span>
        }
    },
    initialize: <span class="keyword">function</span>(options){
        <span class="keyword">this</span>.setOptions(options);
    }
});

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget({
    color: <span class="string">'#f00'</span>,
    size: {
        width: <span class="number">200</span>
    }
});

<span class="comment">//myWidget.options is now: {color: #f00, size: {width: 200, height: 100}}</span>

<span class="comment">// Deep copy example</span>
<span class="keyword">var</span> mySize = {
    width: <span class="number">50</span>,
    height: <span class="number">50</span>
};

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget({
    size: mySize
});

(mySize == myWidget.options.size) <span class="comment">// false! mySize was copied in the setOptions call.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Relies on the default options of a Class defined in its options property.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Options-in-combination-with-Events" name="Options-in-combination-with-Events">Options in combination with Events</a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>If a Class has <a href="#Events" alt="Events">Events</a> as well as <a href="#Options" alt="Options">Options</a> implemented, every option beginning with &#39;on&#39; and followed by a capital letter (e.g. &#39;onComplete&#39;) becomes a Class instance event, assuming the value of the option is a function.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: [Options, Events],
    options: {
        color: <span class="string">'#fff'</span>,
        size: {
            width: <span class="number">100</span>,
            height: <span class="number">100</span>
        }
    },
    initialize: <span class="keyword">function</span>(options){
        <span class="keyword">this</span>.setOptions(options);
    },
    show: <span class="keyword">function</span>(){
        <span class="comment">// Do some cool stuff</span>

        <span class="keyword">this</span>.fireEvent(<span class="string">'show'</span>);
    }

});

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget({
    color: <span class="string">'#f00'</span>,
    size: {
        width: <span class="number">200</span>
    },
    onShow: <span class="keyword">function</span>(){
        alert(<span class="string">'Lets show it!'</span>);
    }
});

myWidget.show(); <span class="comment">// fires the event and alerts 'Lets show it!'</span></code></pre>+R*****<div class="heading clearfix"><h1><a href="#Chain" name="Chain">Class: Chain </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A Utility Class which executes functions one after another, with each function firing after completion of the previous.
Its methods can be implemented with <a href="/core/docs/1.5.1/Class/Class#Class:implement" alt="Class:implement">Class:implement</a> into any <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>, and it is currently implemented in <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> and <a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a>.
In <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, for example, it is used to create custom, complex animations.</p>
<div class="heading clearfix"><h2><a href="#Chain:constructor" name="Chain:constructor">Chain Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><div class="heading clearfix"><h4>For new classes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class({ Implements: Chain });</code></pre><div class="heading clearfix"><h4>For existing classes:</h4></div><pre><code class="javascript">MyClass.implement(Chain);</code></pre><div class="heading clearfix"><h4>Stand alone</h4></div><pre><code class="javascript"><span class="keyword">var</span> myChain = <span class="keyword">new</span> Chain;</code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Todo = <span class="keyword">new</span> Class({
        Implements: Chain,
        initialize: <span class="keyword">function</span>(){
            <span class="keyword">this</span>.chain.apply(<span class="keyword">this</span>, arguments);
        }
    });

    <span class="keyword">var</span> myTodoList = <span class="keyword">new</span> Todo(
        <span class="keyword">function</span>(){ alert(<span class="string">'get groceries'</span>);    },
        <span class="keyword">function</span>(){ alert(<span class="string">'go workout'</span>); },
        <span class="keyword">function</span>(){ alert(<span class="string">'code mootools documentation until eyes close involuntarily'</span>); },
        <span class="keyword">function</span>(){ alert(<span class="string">'sleep'</span>);    }
    );</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Chain:chain" name="Chain:chain">Chain Method: chain </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds functions to the end of the call stack of the Chain instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.chain(fn[, fn2[, fn3[, ...]]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>fn - (<em>function</em> or <em>array</em>) The function (or array of functions) to add to the chain call stack. Will accept and number of functions or arrays of functions.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The current Class instance. Calls to chain can also be chained.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">//Fx.Tween has already implemented the Chain class because of inheritance of the Fx class.</span>
<span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, {property: <span class="string">'opacity'</span>});
myFx.start(<span class="number">1</span>,<span class="number">0</span>).chain(
    <span class="comment">//Notice that "this" refers to the calling object (in this case, the myFx object).</span>
    <span class="keyword">function</span>(){ <span class="keyword">this</span>.start(<span class="number">0</span>,<span class="number">1</span>); },
    <span class="keyword">function</span>(){ <span class="keyword">this</span>.start(<span class="number">1</span>,<span class="number">0</span>); },
    <span class="keyword">function</span>(){ <span class="keyword">this</span>.start(<span class="number">0</span>,<span class="number">1</span>); }
); <span class="comment">//Will fade the Element out and in twice.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, <a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Chain:callChain" name="Chain:callChain">Chain Method: callChain </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes the first function of the Chain instance stack and executes it. The next function will then become first in the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.callChain([any arguments]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>Any arguments passed in will be passed to the &quot;next&quot; function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The return value of the &quot;next&quot; function or false when the chain was empty.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myChain = <span class="keyword">new</span> Chain();
myChain.chain(
    <span class="keyword">function</span>(){ alert(<span class="string">'do dishes'</span>); },
    <span class="keyword">function</span>(){ alert(<span class="string">'put away clean dishes'</span>); }
);
myChain.callChain(); <span class="comment">// alerts 'do dishes'.</span>
myChain.callChain(); <span class="comment">// alerts 'put away clean dishes'.</span></code></pre><div class="heading clearfix"><h2><a href="#Chain:clearChain" name="Chain:clearChain">Chain Method: clearChain </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Clears the stack of a Chain instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.clearChain();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = Fx.Tween(<span class="string">'myElement'</span>, <span class="string">'color'</span>); <span class="comment">// Fx.Tween inherited Fx's implementation of Chain.</span>
myFx.chain(<span class="keyword">function</span>(){ <span class="keyword">while</span>(<span class="literal">true</span>) alert(<span class="string">"D'oh!"</span>); }); <span class="comment">// chains an infinite loop of alerts.</span>
myFx.clearChain(); <span class="comment">// cancels the infinite loop of alerts before allowing it to begin.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, <a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a></li>
</ul>
<div class="heading clearfix"><h1><a href="#Events" name="Events">Class: Events </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A Utility Class. Its methods can be implemented with <a href="/core/docs/1.5.1/Class/Class#Class:implement" alt="Class:implement">Class:implement</a> into any <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>.
In <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>, for example, this Class is used to allow any number of functions to be added to the Fx events, like &#39;complete&#39;, &#39;start&#39;, and &#39;cancel&#39;.
Events in a Class that implements <a href="#Events" alt="Events">Events</a> must be either added as an option or with addEvent, not directly through .options.onEventName.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><div class="heading clearfix"><h4>For new classes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class({ Implements: Events });</code></pre><div class="heading clearfix"><h4>For existing classes:</h4></div><pre><code class="javascript">MyClass.implement(Events);</code></pre><div class="heading clearfix"><h3>Implementing:</h3></div><ul>
<li>This class can be implemented into other classes to add its functionality to them.</li>
<li>Events has been designed to work well with the <a href="#Options" alt="Options">Options</a> class. When the option property begins with &#39;on&#39; and is followed by a capital letter it will be added as an event (e.g. &#39;onComplete&#39; will add as &#39;complete&#39; event).</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: Events,
    initialize: <span class="keyword">function</span>(element){
        <span class="comment">// ...</span>
    },
    complete: <span class="keyword">function</span>(){
        <span class="keyword">this</span>.fireEvent(<span class="string">'complete'</span>);
    }
});

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget();
myWidget.addEvent(<span class="string">'complete'</span>, myFunction);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Events starting with &#39;on&#39; are still supported in all methods and are converted to their representation without &#39;on&#39; (e.g. &#39;onComplete&#39; becomes &#39;complete&#39;).</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>, <a href="#Options" alt="Options">Options</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Events:addEvent" name="Events:addEvent">Events Method: addEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds an event to the Class instance&#39;s event stack.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.addEvent(type, fn[, internal]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>type     - (<em>string</em>) The type of event (e.g. &#39;complete&#39;).</li>
<li>fn       - (<em>function</em>) The function to execute.</li>
<li>internal - (<em>boolean</em>, optional) Sets the function property: internal to true. Internal property is used to prevent removal.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'element'</span>, <span class="string">'opacity'</span>);
myFx.addEvent(<span class="string">'start'</span>, myStartFunction);</code></pre><div class="heading clearfix"><h2><a href="#Events:addEvents" name="Events:addEvents">Events Method: addEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The same as <a href="#Events:addEvent" alt="addEvent">addEvent</a>, but accepts an object to add multiple events at once.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.addEvents(events);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>events - (<em>object</em>) An object with key/value representing: key the event name (e.g. &#39;start&#39;), and value the function that is called when the Event occurs.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'element'</span>, <span class="string">'opacity'</span>);
myFx.addEvents({
    start: myStartFunction,
    complete: <span class="keyword">function</span>() {
        alert(<span class="string">'Done.'</span>);
    }
});</code></pre><div class="heading clearfix"><h2><a href="#Events:fireEvent" name="Events:fireEvent">Events Method: fireEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Fires all events of the specified type in the Class instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.fireEvent(type[, args[, delay]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>type  - (<em>string</em>) The type of event (e.g. &#39;complete&#39;).</li>
<li>args  - (<em>mixed</em>, optional) The argument(s) to pass to the function. To pass more than one argument, the arguments must be in an array.</li>
<li>delay - (<em>number</em>, optional) Delay in milliseconds to wait before executing the event (defaults to 0).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: Events,
    initialize: <span class="keyword">function</span>(arg1, arg2){
        <span class="comment">//...</span>
        <span class="keyword">this</span>.fireEvent(<span class="string">'initialize'</span>, [arg1, arg2], <span class="number">50</span>);
    }
});</code></pre><div class="heading clearfix"><h2><a href="#Events:removeEvent" name="Events:removeEvent">Events Method: removeEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes an event from the stack of events of the Class instance.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.removeEvent(type, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>type - (<em>string</em>) The type of event (e.g. &#39;complete&#39;).</li>
<li>fn   - (<em>function</em>) The function to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>If the function has the property internal and is set to true, then the event will not be removed.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Events:removeEvents" name="Events:removeEvents">Events Method: removeEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes all events of the given type from the stack of events of a Class instance. If no type is specified, removes all events of all types.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.removeEvents([events]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>events - (optional) If not passed removes all events of all types.<ul>
<li>(<em>string</em>) The event name (e.g. &#39;success&#39;). Removes all events of that type.</li>
<li>(<em>object</em>) An object of type function pairs. Like the one passed to <a href="#Events:addEvents" alt="addEvents">addEvents</a>.</li>
</ul>
</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, <span class="string">'opacity'</span>);
myFx.removeEvents(<span class="string">'complete'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>removeEvents will not remove internal events. See <a href="/core/docs/1.5.1/Element/Element.Event#Element:removeEvent" alt="Events:removeEvent">Events:removeEvent</a>.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Options" name="Options">Class: Options </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A Utility Class. Its methods can be implemented with <a href="/core/docs/1.5.1/Class/Class#Class:implement" alt="Class:implement">Class:implement</a> into any <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a>.
Used to automate the setting of a Class instance&#39;s options.
Will also add Class <a href="#Events" alt="Events">Events</a> when the option property begins with &#39;on&#39; and is followed by a capital letter (e.g. &#39;onComplete&#39; adds a &#39;complete&#39; event). You will need to call this.setOptions() for this to have an effect, however.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><div class="heading clearfix"><h4>For new classes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class({Implements: Options});</code></pre><div class="heading clearfix"><h4>For existing classes:</h4></div><pre><code class="javascript">MyClass.implement(Options);</code></pre><div class="heading clearfix"><h2><a href="#Options:setOptions" name="Options:setOptions">Options Method: setOptions </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Merges the default options of the Class with the options passed in. Every value passed in to this method will be deep copied. Therefore other class instances or objects that are not intended for copying must be passed to a class in other ways.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myClass.setOptions([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>options - (<em>object</em>, optional) The user defined options to merge with the defaults.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The current Class instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: Options,
    options: {
        color: <span class="string">'#fff'</span>,
        size: {
            width: <span class="number">100</span>,
            height: <span class="number">100</span>
        }
    },
    initialize: <span class="keyword">function</span>(options){
        <span class="keyword">this</span>.setOptions(options);
    }
});

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget({
    color: <span class="string">'#f00'</span>,
    size: {
        width: <span class="number">200</span>
    }
});

<span class="comment">//myWidget.options is now: {color: #f00, size: {width: 200, height: 100}}</span>

<span class="comment">// Deep copy example</span>
<span class="keyword">var</span> mySize = {
    width: <span class="number">50</span>,
    height: <span class="number">50</span>
};

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget({
    size: mySize
});

(mySize == myWidget.options.size) <span class="comment">// false! mySize was copied in the setOptions call.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Relies on the default options of a Class defined in its options property.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Options-in-combination-with-Events" name="Options-in-combination-with-Events">Options in combination with Events</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>If a Class has <a href="#Events" alt="Events">Events</a> as well as <a href="#Options" alt="Options">Options</a> implemented, every option beginning with &#39;on&#39; and followed by a capital letter (e.g. &#39;onComplete&#39;) becomes a Class instance event, assuming the value of the option is a function.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Widget = <span class="keyword">new</span> Class({
    Implements: [Options, Events],
    options: {
        color: <span class="string">'#fff'</span>,
        size: {
            width: <span class="number">100</span>,
            height: <span class="number">100</span>
        }
    },
    initialize: <span class="keyword">function</span>(options){
        <span class="keyword">this</span>.setOptions(options);
    },
    show: <span class="keyword">function</span>(){
        <span class="comment">// Do some cool stuff</span>

        <span class="keyword">this</span>.fireEvent(<span class="string">'show'</span>);
    }

});

<span class="keyword">var</span> myWidget = <span class="keyword">new</span> Widget({
    color: <span class="string">'#f00'</span>,
    size: {
        width: <span class="number">200</span>
    },
    onShow: <span class="keyword">function</span>(){
        alert(<span class="string">'Lets show it!'</span>);
    }
});

myWidget.show(); <span class="comment">// fires the event and alerts 'Lets show it!'</span></code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Class" name="Class">Class </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The base Class of the <a href="http://mootools.net/" alt="MooTools">MooTools</a> framework.</p>
<div class="heading clearfix"><h2><a href="#Class:constructor" name="Class:constructor">Class Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - Can be one of the following types:

<ul>
<li>(<em>object</em>) The collection of properties that apply to the Class. Also accepts some special properties such as Extends, Implements, and initialize (see below).</li>
<li>(<em>function</em>) The initialize function (see below).</li>
</ul></li>
</ol>
<div class="heading clearfix"><h4>Property: Extends</h4></div>
<ul>
<li>(<em>class</em>) The Class that this class will extend.</li>
</ul>

<p>The methods of this Class that have the same name as the Extends Class, will have a parent property, that allows you to call the other overridden method.
The Extends property should be the first property in a class definition.</p>
<div class="heading clearfix"><h4>Property: Implements</h4></div>
<ul>
<li>(<em>class</em>)  The properties of a passed Class will be copied into the target Class.</li>
<li>(<em>array</em>)  An array of Classes, the properties of which will be copied into this Class.</li>
</ul>

<p>Implements is similar to Extends, except that it adopts properties from one or more other classes without inheritance.
Useful when implementing a default set of properties in multiple Classes. The Implements property should come after Extends but before all other properties.</p>
<div class="heading clearfix"><h4>Property: initialize</h4></div>
<ul>
<li>(<em>function</em>) The initialize function will be the constructor for this class when new instances are created.</li>
</ul>
<div class="heading clearfix"><h4>Property: toElement</h4></div>
<ul>
<li>(<em>function</em>) A method which returns an element. This method will be automatically called when passing an instance of a class in the <a href="/core/docs/1.5.1/Element/Element#Window:document-id" alt="document.id">document.id</a> function.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>class</em>) The created Class.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Class Example:</h4></div><pre><code class="javascript"><span class="keyword">var</span> Cat = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(name){
        <span class="keyword">this</span>.name = name;
    }
});
<span class="keyword">var</span> myCat = <span class="keyword">new</span> Cat(<span class="string">'Micia'</span>);
alert(myCat.name); <span class="comment">// alerts 'Micia'</span>

<span class="keyword">var</span> Cow = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(){
        alert(<span class="string">'moooo'</span>);
    }
});</code></pre><div class="heading clearfix"><h4>Extends Example:</h4></div><pre><code class="javascript"><span class="keyword">var</span> Animal = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(age){
        <span class="keyword">this</span>.age = age;
    }
});
<span class="keyword">var</span> Cat = <span class="keyword">new</span> Class({
    Extends: Animal,
    initialize: <span class="keyword">function</span>(name, age){
        <span class="keyword">this</span>.parent(age); <span class="comment">// calls initalize method of Animal class</span>
        <span class="keyword">this</span>.name = name;
    }
});
<span class="keyword">var</span> myCat = <span class="keyword">new</span> Cat(<span class="string">'Micia'</span>, <span class="number">20</span>);
alert(myCat.name); <span class="comment">// alerts 'Micia'.</span>
alert(myCat.age); <span class="comment">// alerts 20.</span></code></pre><div class="heading clearfix"><h4>Implements Example:</h4></div><pre><code class="javascript"><span class="keyword">var</span> Animal = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(age){
        <span class="keyword">this</span>.age = age;
    }
});
<span class="keyword">var</span> Cat = <span class="keyword">new</span> Class({
    Implements: Animal,
    setName: <span class="keyword">function</span>(name){
        <span class="keyword">this</span>.name = name
    }
});
<span class="keyword">var</span> myAnimal = <span class="keyword">new</span> Cat(<span class="number">20</span>);
myAnimal.setName(<span class="string">'Micia'</span>);
alert(myAnimal.name); <span class="comment">// alerts 'Micia'.</span></code></pre><div class="heading clearfix"><h2><a href="#Class:implement" name="Class:implement">Class Method: implement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Implements the passed in properties into the base Class prototypes, altering the base Class.
The same as creating a <a href="#Class:constructor" alt="new Class">new Class</a> with the Implements property, but handy when you need to modify existing classes.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">MyClass.implement(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - (<em>object</em>) The properties to add to the base Class.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Animal = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(age){
        <span class="keyword">this</span>.age = age;
    }
});
Animal.implement({
    setName: <span class="keyword">function</span>(name){
        <span class="keyword">this</span>.name = name;
    }
});
<span class="keyword">var</span> myAnimal = <span class="keyword">new</span> Animal(<span class="number">20</span>);
myAnimal.setName(<span class="string">'Micia'</span>);
alert(myAnimal.name); <span class="comment">// alerts 'Micia'</span></code></pre>+R*****<div class="heading clearfix"><h1><a href="#Class" name="Class">Class </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>The base Class of the <a href="http://mootools.net/" alt="MooTools">MooTools</a> framework.</p>
<div class="heading clearfix"><h2><a href="#Class:constructor" name="Class:constructor">Class Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> MyClass = <span class="keyword">new</span> Class(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - Can be one of the following types:<ul>
<li>(<em>object</em>) The collection of properties that apply to the Class. Also accepts some special properties such as Extends, Implements, and initialize (see below).</li>
<li>(<em>function</em>) The initialize function (see below).</li>
</ul>
</li>
</ol>
<div class="heading clearfix"><h4>Property: Extends</h4></div><ul>
<li>(<em>class</em>) The Class that this class will extend.</li>
</ul>
<p>The methods of this Class that have the same name as the Extends Class, will have a parent property, that allows you to call the other overridden method.
The Extends property should be the first property in a class definition.</p>
<div class="heading clearfix"><h4>Property: Implements</h4></div><ul>
<li>(<em>class</em>)  The properties of a passed Class will be copied into the target Class.</li>
<li>(<em>array</em>)  An array of Classes, the properties of which will be copied into this Class.</li>
</ul>
<p>Implements is similar to Extends, except that it adopts properties from one or more other classes without inheritance.
Useful when implementing a default set of properties in multiple Classes. The Implements property should come after Extends but before all other properties.</p>
<div class="heading clearfix"><h4>Property: initialize</h4></div><ul>
<li>(<em>function</em>) The initialize function will be the constructor for this class when new instances are created.</li>
</ul>
<div class="heading clearfix"><h4>Property: toElement</h4></div><ul>
<li>(<em>function</em>) A method which returns an element. This method will be automatically called when passing an instance of a class in the <a href="/core/docs/1.5.1/Element/Element#Window:document-id" alt="document.id">document.id</a> function.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>class</em>) The created Class.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Class Example:</h4></div><pre><code class="javascript"><span class="keyword">var</span> Cat = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(name){
        <span class="keyword">this</span>.name = name;
    }
});
<span class="keyword">var</span> myCat = <span class="keyword">new</span> Cat(<span class="string">'Micia'</span>);
alert(myCat.name); <span class="comment">// alerts 'Micia'</span>

<span class="keyword">var</span> Cow = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(){
        alert(<span class="string">'moooo'</span>);
    }
});</code></pre><div class="heading clearfix"><h4>Extends Example:</h4></div><pre><code class="javascript"><span class="keyword">var</span> Animal = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(age){
        <span class="keyword">this</span>.age = age;
    }
});
<span class="keyword">var</span> Cat = <span class="keyword">new</span> Class({
    Extends: Animal,
    initialize: <span class="keyword">function</span>(name, age){
        <span class="keyword">this</span>.parent(age); <span class="comment">// calls initalize method of Animal class</span>
        <span class="keyword">this</span>.name = name;
    }
});
<span class="keyword">var</span> myCat = <span class="keyword">new</span> Cat(<span class="string">'Micia'</span>, <span class="number">20</span>);
alert(myCat.name); <span class="comment">// alerts 'Micia'.</span>
alert(myCat.age); <span class="comment">// alerts 20.</span></code></pre><div class="heading clearfix"><h4>Implements Example:</h4></div><pre><code class="javascript"><span class="keyword">var</span> Animal = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(age){
        <span class="keyword">this</span>.age = age;
    }
});
<span class="keyword">var</span> Cat = <span class="keyword">new</span> Class({
    Implements: Animal,
    setName: <span class="keyword">function</span>(name){
        <span class="keyword">this</span>.name = name
    }
});
<span class="keyword">var</span> myAnimal = <span class="keyword">new</span> Cat(<span class="number">20</span>);
myAnimal.setName(<span class="string">'Micia'</span>);
alert(myAnimal.name); <span class="comment">// alerts 'Micia'.</span></code></pre><div class="heading clearfix"><h2><a href="#Class:implement" name="Class:implement">Class Method: implement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Implements the passed in properties into the base Class prototypes, altering the base Class.
The same as creating a <a href="#Class:constructor" alt="new Class">new Class</a> with the Implements property, but handy when you need to modify existing classes.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">MyClass.implement(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - (<em>object</em>) The properties to add to the base Class.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Animal = <span class="keyword">new</span> Class({
    initialize: <span class="keyword">function</span>(age){
        <span class="keyword">this</span>.age = age;
    }
});
Animal.implement({
    setName: <span class="keyword">function</span>(name){
        <span class="keyword">this</span>.name = name;
    }
});
<span class="keyword">var</span> myAnimal = <span class="keyword">new</span> Animal(<span class="number">20</span>);
myAnimal.setName(<span class="string">'Micia'</span>);
alert(myAnimal.name); <span class="comment">// alerts 'Micia'</span></code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Core" name="Core">Type: Core </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Core contains common functions used in <a href="http://mootools.net" alt="MooTools">MooTools</a>.</p>
<div class="heading clearfix"><h2><a href="#Core:typeOf" name="Core:typeOf">Function: typeOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the type of an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">typeOf(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>obj - (<em>object</em>) The object to inspect.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>&#39;element&#39;    - (<em>string</em>) If object is a DOM element node.</li>
<li>&#39;elements&#39;   - (<em>string</em>) If object is an instance of <a href="/core/docs/1.5.1/Element/Element" alt="Elements">Elements</a>.</li>
<li>&#39;textnode&#39;   - (<em>string</em>) If object is a DOM text node.</li>
<li>&#39;whitespace&#39; - (<em>string</em>) If object is a DOM whitespace node.</li>
<li>&#39;arguments&#39;  - (<em>string</em>) If object is an arguments object.</li>
<li>&#39;array&#39;      - (<em>string</em>) If object is an array.</li>
<li>&#39;object&#39;     - (<em>string</em>) If object is an object.</li>
<li>&#39;string&#39;     - (<em>string</em>) If object is a string.</li>
<li>&#39;number&#39;     - (<em>string</em>) If object is a number.</li>
<li>&#39;date&#39;       - (<em>string</em>) If object is a date.</li>
<li>&#39;boolean&#39;    - (<em>string</em>) If object is a boolean.</li>
<li>&#39;function&#39;   - (<em>string</em>) If object is a function.</li>
<li>&#39;regexp&#39;     - (<em>string</em>) If object is a regular expression.</li>
<li>&#39;class&#39;      - (<em>string</em>) If object is a <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a> (created with new Class or the extend of another class).</li>
<li>&#39;collection&#39; - (<em>string</em>) If object is a native HTML elements collection, such as childNodes or getElementsByTagName.</li>
<li>&#39;window&#39;     - (<em>string</em>) If object is the window object.</li>
<li>&#39;document&#39;   - (<em>string</em>) If object is the document object.</li>
<li>&#39;domevent&#39;   - (<em>string</em>) If object is an event.</li>
<li>&#39;null&#39;       - (<em>string</em>) If object is undefined, null, NaN or none of the above.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myString = <span class="string">'hello'</span>;
typeOf(myString); <span class="comment">// returns "string"</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This method is equivalent to <em>$type</em> from MooTools 1.2, with the exception that undefined and null values now return &#39;null&#39; as a string, instead of false.</p>
<div class="heading clearfix"><h2><a href="#Core:instanceOf" name="Core:instanceOf">Function: instanceOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Checks if an object is an instance of a particular type.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">instanceOf(item, object)</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>item - (<em>mixed</em>) The item to check.</li>
<li>object - (<em>mixed</em>) The type to compare it with.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) Whether or not the item is an instance of the object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> foo = [];
instanceOf(foo, Array) <span class="comment">// returns true</span>
instanceOf(foo, String) <span class="comment">// returns false</span>

<span class="keyword">var</span> myClass = <span class="keyword">new</span> Class();
<span class="keyword">var</span> bar = <span class="keyword">new</span> myClass();
instanceOf(bar, myClass) <span class="comment">// returns true</span></code></pre><div class="heading clearfix"><h3>Type </h3></div>
<p>MooTools extends native types, like string, array or number to make them even more useful.</p>

<p>The types MooTools uses are:</p>

<ul>
<li>String</li>
<li>Array</li>
<li>Number</li>
<li>Function</li>
<li>RegExp</li>
<li>Date</li>
<li>Boolean</li>
</ul>

<p>Custom MooTools types are:</p>

<ul>
<li>Element</li>
<li>Elements</li>
<li>Event</li>
</ul>
<div class="heading clearfix"><h2><a href="#Type:implement" name="Type:implement">Type method: implement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method implements a new method to the type&#39;s prototype.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myType.implement(name, method);</code></pre>
<p><strong>or</strong></p>
<pre><code class="javascript">myType.implement(methods);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>name - (<em>string</em>) The method name.</li>
<li>method - (<em>function</em>) The method function.</li>
</ol>

<p><strong>or</strong></p>

<ol>
<li>methods - (<em>object</em>) An object with key-value pairs. The key is the method name, the value is the method function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The type.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Array.implement(<span class="string">'limitTop'</span>, <span class="keyword">function</span>(top){
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.length; i &lt; l; i++){
        <span class="keyword">if</span> (<span class="keyword">this</span>[i] &gt; top) <span class="keyword">this</span>[i] = top;
    }
    <span class="keyword">return</span> <span class="keyword">this</span>;
});

[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].limitTop(<span class="number">4</span>); <span class="comment">// returns [1, 2, 3, 4, 4, 4]</span></code></pre>
<p>It is also possible to pass an object of methods:</p>
<pre><code class="javascript">String.implement({
    repeat: <span class="keyword">function</span>(times){
        <span class="keyword">var</span> string = <span class="string">''</span>;
        <span class="keyword">while</span> (times--) string += <span class="keyword">this</span>;
        <span class="keyword">return</span> string;
    },
    ftw: <span class="keyword">function</span>(){
        <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' FTW!'</span>;
    }
});

<span class="string">'moo! '</span>.repeat(<span class="number">3</span>); <span class="comment">// returns "moo! moo! moo! "</span>
<span class="string">'MooTools'</span>.ftw(); <span class="comment">// returns "MooTools FTW!"</span>
(<span class="string">'MooTools'</span>.ftw() + <span class="string">' '</span>).repeat(<span class="number">2</span>); <span class="comment">// returns "MooTools FTW! MooTools FTW! "</span></code></pre><div class="heading clearfix"><h2><a href="#Type:extend" name="Type:extend">Type method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds one or more functions to the type. These are static functions that accept for example other types to parse them into the type, or other utility functions that belong to the certain type.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myType.extend(name, method);</code></pre>
<p><strong>or</strong></p>
<pre><code class="javascript">myType.extend(methods);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>name - (<em>string</em>) The method name.</li>
<li>method - (<em>function</em>) The method function.</li>
</ol>

<p><strong>or</strong></p>

<ol>
<li>methods - (<em>object</em>) An object with key-value pairs. The key is the method name, the value is the method function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The type.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">RegExp.extend(<span class="string">'from'</span>, <span class="keyword">function</span>(regexp, flags){
    <span class="keyword">return</span> <span class="keyword">new</span> RegExp(regexp, flags);
});

Number.extend(<span class="string">'parseCurrency'</span>, <span class="keyword">function</span>(currency){
    <span class="comment">// takes a string and transforms it into a number to</span>
    <span class="comment">// do certain calculations</span>
});</code></pre><div class="heading clearfix"><h2><a href="#Type:generics" name="Type:generics">Generics </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Most methods of types can be used as generic functions. These are the already existing JavaScript methods, methods MooTools adds, or methods you <a href="core/Core/Core#Type:implement" alt="implemented">implemented</a> yourself.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> everyArgBiggerThanTwo = <span class="keyword">function</span>(){
    <span class="comment">// Instead of this</span>
    <span class="keyword">return</span> Array.prototype.every.call(arguments, someFunction);
    <span class="comment">// you can use</span>
    <span class="keyword">return</span> Array.every(arguments, someFunction);
};</code></pre>
<p>This is useful if methods of a certain type should be used as function of another type.
 As the example above, it is used for the Arguments type, which is not a real array, so <code>arguments.every(fn)</code> would not work. However, <code>Array.every(arguments, fn)</code> does work in MooTools.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Type.methodName(thisArg[, arg1, arg2, ...]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>thisArg - (<em>mixed</em>) This is the subject, which is usually <code>thisArg.method([arg1, arg2, ...]);</code>.</li>
<li>arg1, arg2, ... - (<em>mixed</em>) Additional arguments which will be passed as method arguments.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) Anything the method usually returns.</li>
</ul>

<hr>
<div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:chk" name="Deprecated-Functions:chk">Function: $chk </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated and will have no equivalent in MooTools 1.3.</p>

<p>If you really need this function you can implement it like so:</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> $chk = <span class="keyword">function</span>(obj){
    <span class="keyword">return</span> !!(obj || obj === <span class="number">0</span>);
};</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:clear" name="Deprecated-Functions:clear">Function: $clear </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <em>clearInterval</em> or <em>clearTimeout</em> instead.</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/DOM/window.clearTimeout" alt="MDN clearTimeout">MDN clearTimeout</a>, <a href="https://developer.mozilla.org/en/DOM/window.clearInterval" alt="MDN clearInterval">MDN clearInterval</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:defined" name="Deprecated-Functions:defined">Function: $defined </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated.</p>

<p>If you really need this function you can implement it like so:</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> $defined = <span class="keyword">function</span>(obj){
    <span class="keyword">return</span> (obj != <span class="literal">undefined</span>);
};

<span class="comment">// or just use it like this:</span>
<span class="keyword">if</span>(obj != <span class="literal">undefined</span>){
    <span class="comment">// do something</span>
}</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:arguments" name="Deprecated-Functions:arguments">Function: $arguments </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated and will have no equivalent in MooTools 1.3.</p>

<p>If you really need this function you can implement it like so:</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> $arguments = <span class="keyword">function</span>(i){
    <span class="keyword">return</span> <span class="keyword">function</span>(){
        <span class="keyword">return</span> arguments[i];
    };
};</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:empty" name="Deprecated-Functions:empty">Function: $empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="/core/docs/1.5.1/Types/Function#Function:Function-from" alt="Function.from">Function.from</a> instead.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunc = Function.from();
<span class="comment">// or better:</span>
<span class="keyword">var</span> myFunc = <span class="keyword">function</span>(){};</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:lambda" name="Deprecated-Functions:lambda">Function: $lambda </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="/core/docs/1.5.1/Types/Function#Function:Function-from" alt="Function.from">Function.from</a> instead.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">myLink.addEvent(<span class="string">'click'</span>, Function.from(<span class="literal">false</span>)); <span class="comment">// prevents a link Element from being clickable</span></code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:extend" name="Deprecated-Functions:extend">Function: $extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Object#Object:Object-append" alt="Object.append">Object.append</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:merge" name="Deprecated-Functions:merge">Function: $merge </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Object#Object:Object-merge" alt="Object.merge">Object.merge</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:each" name="Deprecated-Functions:each">Function: $each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Array#Array:Array-each" alt="Array.each">Array.each</a> or <a href="/core/docs/1.5.1/Types/Object#Object:Object-each" alt="Object.each">Object.each</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:pick" name="Deprecated-Functions:pick">Function: $pick </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Array#Array:pick" alt="Array.pick">Array.pick</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:random" name="Deprecated-Functions:random">Function: $random </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Number#Number:Number-random" alt="Number.random">Number.random</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:splat" name="Deprecated-Functions:splat">Function: $splat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Array#Array:Array-from" alt="Array.from">Array.from</a> instead.
However <code>$splat</code> does <em>not</em> transform Array-like objects such as NodeList or FileList in arrays, <code>Array.from</code> does.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:time" name="Deprecated-Functions:time">Function: $time </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <em>Date.now()</em> instead.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> time = Date.now();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) - The current timestamp.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:try" name="Deprecated-Functions:try">Function: $try </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Function#Function:Function-attempt" alt="Function.attempt">Function.attempt</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:type" name="Deprecated-Functions:type">Function: $type </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Please use <a href="#Core:typeOf" alt="typeOf">typeOf</a> instead.</p>
+R*****<div class="heading clearfix"><h1><a href="#Core" name="Core">Type: Core </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Core contains common functions used in <a href="http://mootools.net" alt="MooTools">MooTools</a>.</p>
<div class="heading clearfix"><h2><a href="#Core:typeOf" name="Core:typeOf">Function: typeOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the type of an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">typeOf(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>obj - (<em>object</em>) The object to inspect.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>&#39;element&#39;    - (<em>string</em>) If object is a DOM element node.</li>
<li>&#39;elements&#39;   - (<em>string</em>) If object is an instance of <a href="/core/docs/1.5.1/Element/Element" alt="Elements">Elements</a>.</li>
<li>&#39;textnode&#39;   - (<em>string</em>) If object is a DOM text node.</li>
<li>&#39;whitespace&#39; - (<em>string</em>) If object is a DOM whitespace node.</li>
<li>&#39;arguments&#39;  - (<em>string</em>) If object is an arguments object.</li>
<li>&#39;array&#39;      - (<em>string</em>) If object is an array.</li>
<li>&#39;object&#39;     - (<em>string</em>) If object is an object.</li>
<li>&#39;string&#39;     - (<em>string</em>) If object is a string.</li>
<li>&#39;number&#39;     - (<em>string</em>) If object is a number.</li>
<li>&#39;date&#39;       - (<em>string</em>) If object is a date.</li>
<li>&#39;boolean&#39;    - (<em>string</em>) If object is a boolean.</li>
<li>&#39;function&#39;   - (<em>string</em>) If object is a function.</li>
<li>&#39;regexp&#39;     - (<em>string</em>) If object is a regular expression.</li>
<li>&#39;class&#39;      - (<em>string</em>) If object is a <a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a> (created with new Class or the extend of another class).</li>
<li>&#39;collection&#39; - (<em>string</em>) If object is a native HTML elements collection, such as childNodes or getElementsByTagName.</li>
<li>&#39;window&#39;     - (<em>string</em>) If object is the window object.</li>
<li>&#39;document&#39;   - (<em>string</em>) If object is the document object.</li>
<li>&#39;domevent&#39;   - (<em>string</em>) If object is an event.</li>
<li>&#39;null&#39;       - (<em>string</em>) If object is undefined, null, NaN or none of the above.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myString = <span class="string">'hello'</span>;
typeOf(myString); <span class="comment">// returns "string"</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This method is equivalent to <em>$type</em> from MooTools 1.2, with the exception that undefined and null values now return &#39;null&#39; as a string, instead of false.</p>
<div class="heading clearfix"><h2><a href="#Core:instanceOf" name="Core:instanceOf">Function: instanceOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Checks if an object is an instance of a particular type.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">instanceOf(item, object)</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>item - (<em>mixed</em>) The item to check.</li>
<li>object - (<em>mixed</em>) The type to compare it with.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) Whether or not the item is an instance of the object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> foo = [];
instanceOf(foo, Array) <span class="comment">// returns true</span>
instanceOf(foo, String) <span class="comment">// returns false</span>

<span class="keyword">var</span> myClass = <span class="keyword">new</span> Class();
<span class="keyword">var</span> bar = <span class="keyword">new</span> myClass();
instanceOf(bar, myClass) <span class="comment">// returns true</span></code></pre><div class="heading clearfix"><h3>Type </h3></div><p>MooTools extends native types, like string, array or number to make them even more useful.</p>
<p>The types MooTools uses are:</p>
<ul>
<li>String</li>
<li>Array</li>
<li>Number</li>
<li>Function</li>
<li>RegExp</li>
<li>Date</li>
<li>Boolean</li>
</ul>
<p>Custom MooTools types are:</p>
<ul>
<li>Element</li>
<li>Elements</li>
<li>Event</li>
</ul>
<div class="heading clearfix"><h2><a href="#Type:implement" name="Type:implement">Type method: implement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method implements a new method to the type&#39;s prototype.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myType.implement(name, method);</code></pre><p><strong>or</strong></p>
<pre><code class="javascript">myType.implement(methods);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>name - (<em>string</em>) The method name.</li>
<li>method - (<em>function</em>) The method function.</li>
</ol>
<p><strong>or</strong></p>
<ol>
<li>methods - (<em>object</em>) An object with key-value pairs. The key is the method name, the value is the method function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The type.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Array.implement(<span class="string">'limitTop'</span>, <span class="keyword">function</span>(top){
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.length; i &lt; l; i++){
        <span class="keyword">if</span> (<span class="keyword">this</span>[i] &gt; top) <span class="keyword">this</span>[i] = top;
    }
    <span class="keyword">return</span> <span class="keyword">this</span>;
});

[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].limitTop(<span class="number">4</span>); <span class="comment">// returns [1, 2, 3, 4, 4, 4]</span></code></pre><p>It is also possible to pass an object of methods:</p>
<pre><code class="javascript">String.implement({
    repeat: <span class="keyword">function</span>(times){
        <span class="keyword">var</span> string = <span class="string">''</span>;
        <span class="keyword">while</span> (times--) string += <span class="keyword">this</span>;
        <span class="keyword">return</span> string;
    },
    ftw: <span class="keyword">function</span>(){
        <span class="keyword">return</span> <span class="keyword">this</span> + <span class="string">' FTW!'</span>;
    }
});

<span class="string">'moo! '</span>.repeat(<span class="number">3</span>); <span class="comment">// returns "moo! moo! moo! "</span>
<span class="string">'MooTools'</span>.ftw(); <span class="comment">// returns "MooTools FTW!"</span>
(<span class="string">'MooTools'</span>.ftw() + <span class="string">' '</span>).repeat(<span class="number">2</span>); <span class="comment">// returns "MooTools FTW! MooTools FTW! "</span></code></pre><div class="heading clearfix"><h2><a href="#Type:extend" name="Type:extend">Type method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds one or more functions to the type. These are static functions that accept for example other types to parse them into the type, or other utility functions that belong to the certain type.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myType.extend(name, method);</code></pre><p><strong>or</strong></p>
<pre><code class="javascript">myType.extend(methods);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>name - (<em>string</em>) The method name.</li>
<li>method - (<em>function</em>) The method function.</li>
</ol>
<p><strong>or</strong></p>
<ol>
<li>methods - (<em>object</em>) An object with key-value pairs. The key is the method name, the value is the method function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The type.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">RegExp.extend(<span class="string">'from'</span>, <span class="keyword">function</span>(regexp, flags){
    <span class="keyword">return</span> <span class="keyword">new</span> RegExp(regexp, flags);
});

Number.extend(<span class="string">'parseCurrency'</span>, <span class="keyword">function</span>(currency){
    <span class="comment">// takes a string and transforms it into a number to</span>
    <span class="comment">// do certain calculations</span>
});</code></pre><div class="heading clearfix"><h2><a href="#Type:generics" name="Type:generics">Generics </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Most methods of types can be used as generic functions. These are the already existing JavaScript methods, methods MooTools adds, or methods you <a href="core/Core/Core#Type:implement" alt="implemented">implemented</a> yourself.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> everyArgBiggerThanTwo = <span class="keyword">function</span>(){
    <span class="comment">// Instead of this</span>
    <span class="keyword">return</span> Array.prototype.every.call(arguments, someFunction);
    <span class="comment">// you can use</span>
    <span class="keyword">return</span> Array.every(arguments, someFunction);
};</code></pre><p>This is useful if methods of a certain type should be used as function of another type.
 As the example above, it is used for the Arguments type, which is not a real array, so <code>arguments.every(fn)</code> would not work. However, <code>Array.every(arguments, fn)</code> does work in MooTools.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Type.methodName(thisArg[, arg1, arg2, ...]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>thisArg - (<em>mixed</em>) This is the subject, which is usually <code>thisArg.method([arg1, arg2, ...]);</code>.</li>
<li>arg1, arg2, ... - (<em>mixed</em>) Additional arguments which will be passed as method arguments.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) Anything the method usually returns.</li>
</ul>
<hr>
<div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:chk" name="Deprecated-Functions:chk">Function: $chk </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated and will have no equivalent in MooTools 1.3.</p>
<p>If you really need this function you can implement it like so:</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> $chk = <span class="keyword">function</span>(obj){
    <span class="keyword">return</span> !!(obj || obj === <span class="number">0</span>);
};</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:clear" name="Deprecated-Functions:clear">Function: $clear </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <em>clearInterval</em> or <em>clearTimeout</em> instead.</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/DOM/window.clearTimeout" alt="MDN clearTimeout">MDN clearTimeout</a>, <a href="https://developer.mozilla.org/en/DOM/window.clearInterval" alt="MDN clearInterval">MDN clearInterval</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:defined" name="Deprecated-Functions:defined">Function: $defined </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated.</p>
<p>If you really need this function you can implement it like so:</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> $defined = <span class="keyword">function</span>(obj){
    <span class="keyword">return</span> (obj != <span class="literal">undefined</span>);
};

<span class="comment">// or just use it like this:</span>
<span class="keyword">if</span>(obj != <span class="literal">undefined</span>){
    <span class="comment">// do something</span>
}</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:arguments" name="Deprecated-Functions:arguments">Function: $arguments </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated and will have no equivalent in MooTools 1.3.</p>
<p>If you really need this function you can implement it like so:</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> $arguments = <span class="keyword">function</span>(i){
    <span class="keyword">return</span> <span class="keyword">function</span>(){
        <span class="keyword">return</span> arguments[i];
    };
};</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:empty" name="Deprecated-Functions:empty">Function: $empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="/core/docs/1.5.1/Types/Function#Function:Function-from" alt="Function.from">Function.from</a> instead.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunc = Function.from();
<span class="comment">// or better:</span>
<span class="keyword">var</span> myFunc = <span class="keyword">function</span>(){};</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:lambda" name="Deprecated-Functions:lambda">Function: $lambda </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="/core/docs/1.5.1/Types/Function#Function:Function-from" alt="Function.from">Function.from</a> instead.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">myLink.addEvent(<span class="string">'click'</span>, Function.from(<span class="literal">false</span>)); <span class="comment">// prevents a link Element from being clickable</span></code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:extend" name="Deprecated-Functions:extend">Function: $extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Object#Object:Object-append" alt="Object.append">Object.append</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:merge" name="Deprecated-Functions:merge">Function: $merge </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Object#Object:Object-merge" alt="Object.merge">Object.merge</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:each" name="Deprecated-Functions:each">Function: $each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Array#Array:Array-each" alt="Array.each">Array.each</a> or <a href="/core/docs/1.5.1/Types/Object#Object:Object-each" alt="Object.each">Object.each</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:pick" name="Deprecated-Functions:pick">Function: $pick </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Array#Array:pick" alt="Array.pick">Array.pick</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:random" name="Deprecated-Functions:random">Function: $random </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Number#Number:Number-random" alt="Number.random">Number.random</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:splat" name="Deprecated-Functions:splat">Function: $splat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Array#Array:Array-from" alt="Array.from">Array.from</a> instead.
However <code>$splat</code> does <em>not</em> transform Array-like objects such as NodeList or FileList in arrays, <code>Array.from</code> does.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:time" name="Deprecated-Functions:time">Function: $time </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <em>Date.now()</em> instead.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> time = Date.now();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) - The current timestamp.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:try" name="Deprecated-Functions:try">Function: $try </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="/core/docs/1.5.1/Types/Function#Function:Function-attempt" alt="Function.attempt">Function.attempt</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:type" name="Deprecated-Functions:type">Function: $type </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Please use <a href="#Core:typeOf" alt="typeOf">typeOf</a> instead.</p>
+M-----+++++<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Extends the <a href="/core/docs/1.5.1/Element/Element" alt="Element">Element</a> type to include event-delegation in its event system.</p>

<p>Event delegation is a common practice where an event listener is attached to a parent element to monitor its children rather than attach events to every single child element. It&#39;s more efficient for dynamic content or highly interactive pages with a lot of DOM elements.</p>
<div class="heading clearfix"><h3>Demo:</h3></div>
<ul>
<li><a href="http://mootools.net/demos/?demo=Element.Delegation" alt="Element.Delegation">Element.Delegation</a></li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div>
<p>An example of how delegation is usually applied. Delegation is extra useful when working with dynamic content like AJAX.</p>
<pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
<span class="keyword">var</span> request = <span class="keyword">new</span> Request({
    <span class="comment">// other options</span>
    onSuccess: <span class="keyword">function</span>(text){
        myElement.set(<span class="string">'html'</span>, text); <span class="comment">// No need to attach more click events.</span>
    }
});
<span class="comment">// Adding the event, notice the :relay syntax with the selector that matches the target element inside of myElement.</span>
<span class="comment">// Every click on an anchor-tag inside of myElement executes this function.</span>
myElement.addEvent(<span class="string">'click:relay(a)'</span>, <span class="keyword">function</span>(event, target){
    event.preventDefault();
    request.send({
        url: target.get(<span class="string">'href'</span>)
    });
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Delegation is especially useful if you are using AJAX to load content into your pages dynamically, as the contents of an element can change with new elements added or others removed and your delegated events need not change.</li>
<li>By delegating events to parent objects you can dramatically increase the efficiency of your pages. Consider the example above. You could attach events to every link on a page - which may be hundreds of DOM elements - or you can delegate the event to the document body, evaluating your code only when the user actually clicks a link (instead of on page load/domready).</li>
<li>You can use any selector in combination with any event</li>
<li>Be wary of the cost of delegation; for example, mouseover/mouseout delegation on an entire document can cause your page to run the selector constantly as the user moves his or her mouse around the page. Delegation is not always the best solution.</li>
<li>In general it is always better to delegate to the closest parent to your elements as possible; delegate to an element in the page rather than the document body for example.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvent" name="Element:addEvent">Element method: addEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Delegates the methods of an element&#39;s children to the parent element for greater efficiency when a selector is provided. Otherwise it will work like <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="addEvent">addEvent</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addEvent(typeSelector, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>typeSelector - (<em>string</em>) An event name (click, mouseover, etc) that should be monitored paired with a selector (see example) to limit functionality to child elements.</li>
<li>fn - (<em>function</em>) The callback to execute when the event occurs (passed the event just like any other <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="addEvent">addEvent</a> usage and a second argument, the element that matches your selector that was clicked).</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">// Alerts when an anchor element with class 'myStyle' is clicked inside of myElement</span>
document.id(myElement).addEvent(<span class="string">'click:relay(a.myStyle)'</span>, <span class="keyword">function</span>(){
    alert(<span class="string">'hello'</span>);
});


document.id(<span class="string">'myElement'</span>).addEvent(<span class="string">'click:relay(a)'</span>, <span class="keyword">function</span>(event, clicked){
    event.preventDefault(); <span class="comment">//don't follow the link</span>
    alert(<span class="string">'you clicked a link!'</span>);
    <span class="comment">// You can reference the element clicked with the second</span>
    <span class="comment">// Argument passed to your callback</span>
    clicked.setStyle(<span class="string">'color'</span>, <span class="string">'#777'</span>);
});</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li><em>element</em> - This element.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvents" name="Element:addEvents">Element method: addEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Delegates the events to the parent just as with addEvent above. Works like <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvents" alt="addEvents">addEvents</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvents({
    <span class="comment">// monitor an element for mouseover</span>
    mouseover: fn,
    <span class="comment">// but only monitor child links for clicks</span>
    <span class="string">'click:relay(a)'</span>: fn2
});</code></pre><div class="heading clearfix"><h2><a href="#Element:removeEvent" name="Element:removeEvent">Element method: removeEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes a method from an element like <a href="/core/docs/1.5.1/Element/Element.Event#Element:removeEvent" alt="removeEvent">removeEvent</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> monitor = <span class="keyword">function</span>(event, element){
    alert(<span class="string">'you clicked a link!'</span>);
};

$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click:relay(a)'</span>, monitor);
<span class="comment">// link clicks are delegated to element</span>

<span class="comment">// remove delegation:</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click:relay(a)'</span>, monitor);</code></pre><div class="heading clearfix"><h2><a href="#Element:removeEvents" name="Element:removeEvents">Element method: removeEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes a series of methods from delegation if the functions were used for delegation or else works like <a href="/core/docs/1.5.1/Element/Element.Event#Element:removeEvents" alt="removeEvents">removeEvents</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> monitor = <span class="keyword">function</span>(){
    alert(<span class="string">'you clicked or moused over a link!'</span>);
};

$(<span class="string">'myElement'</span>).addEvents({
    <span class="string">'mouseover:relay(a)'</span>: monitor,
    <span class="string">'click:relay(a)'</span>: monitor
});

<span class="comment">// link clicks are delegated to element</span>
<span class="comment">// remove the delegation:</span>
$(<span class="string">'myElement'</span>).removeEvents({
    <span class="string">'mouseover:relay(a)'</span>: monitor,
    <span class="string">'click:relay(a)'</span>: monitor
});

<span class="comment">// remove all click:relay(a) events</span>
$(<span class="string">'myElement'</span>).removeEvents(<span class="string">'click:relay(a)'</span>);</code></pre>+R*****<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Extends the <a href="/core/docs/1.5.1/Element/Element" alt="Element">Element</a> type to include event-delegation in its event system.</p>
<p>Event delegation is a common practice where an event listener is attached to a parent element to monitor its children rather than attach events to every single child element. It&#39;s more efficient for dynamic content or highly interactive pages with a lot of DOM elements.</p>
<div class="heading clearfix"><h3>Demo:</h3></div><ul>
<li><a href="http://mootools.net/demos/?demo=Element.Delegation" alt="Element.Delegation">Element.Delegation</a></li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><p>An example of how delegation is usually applied. Delegation is extra useful when working with dynamic content like AJAX.</p>
<pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
<span class="keyword">var</span> request = <span class="keyword">new</span> Request({
    <span class="comment">// other options</span>
    onSuccess: <span class="keyword">function</span>(text){
        myElement.set(<span class="string">'html'</span>, text); <span class="comment">// No need to attach more click events.</span>
    }
});
<span class="comment">// Adding the event, notice the :relay syntax with the selector that matches the target element inside of myElement.</span>
<span class="comment">// Every click on an anchor-tag inside of myElement executes this function.</span>
myElement.addEvent(<span class="string">'click:relay(a)'</span>, <span class="keyword">function</span>(event, target){
    event.preventDefault();
    request.send({
        url: target.get(<span class="string">'href'</span>)
    });
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Delegation is especially useful if you are using AJAX to load content into your pages dynamically, as the contents of an element can change with new elements added or others removed and your delegated events need not change.</li>
<li>By delegating events to parent objects you can dramatically increase the efficiency of your pages. Consider the example above. You could attach events to every link on a page - which may be hundreds of DOM elements - or you can delegate the event to the document body, evaluating your code only when the user actually clicks a link (instead of on page load/domready).</li>
<li>You can use any selector in combination with any event</li>
<li>Be wary of the cost of delegation; for example, mouseover/mouseout delegation on an entire document can cause your page to run the selector constantly as the user moves his or her mouse around the page. Delegation is not always the best solution.</li>
<li>In general it is always better to delegate to the closest parent to your elements as possible; delegate to an element in the page rather than the document body for example.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvent" name="Element:addEvent">Element method: addEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Delegates the methods of an element&#39;s children to the parent element for greater efficiency when a selector is provided. Otherwise it will work like <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="addEvent">addEvent</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addEvent(typeSelector, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>typeSelector - (<em>string</em>) An event name (click, mouseover, etc) that should be monitored paired with a selector (see example) to limit functionality to child elements.</li>
<li>fn - (<em>function</em>) The callback to execute when the event occurs (passed the event just like any other <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="addEvent">addEvent</a> usage and a second argument, the element that matches your selector that was clicked).</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">// Alerts when an anchor element with class 'myStyle' is clicked inside of myElement</span>
document.id(myElement).addEvent(<span class="string">'click:relay(a.myStyle)'</span>, <span class="keyword">function</span>(){
    alert(<span class="string">'hello'</span>);
});


document.id(<span class="string">'myElement'</span>).addEvent(<span class="string">'click:relay(a)'</span>, <span class="keyword">function</span>(event, clicked){
    event.preventDefault(); <span class="comment">//don't follow the link</span>
    alert(<span class="string">'you clicked a link!'</span>);
    <span class="comment">// You can reference the element clicked with the second</span>
    <span class="comment">// Argument passed to your callback</span>
    clicked.setStyle(<span class="string">'color'</span>, <span class="string">'#777'</span>);
});</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li><em>element</em> - This element.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvents" name="Element:addEvents">Element method: addEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Delegates the events to the parent just as with addEvent above. Works like <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvents" alt="addEvents">addEvents</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvents({
    <span class="comment">// monitor an element for mouseover</span>
    mouseover: fn,
    <span class="comment">// but only monitor child links for clicks</span>
    <span class="string">'click:relay(a)'</span>: fn2
});</code></pre><div class="heading clearfix"><h2><a href="#Element:removeEvent" name="Element:removeEvent">Element method: removeEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes a method from an element like <a href="/core/docs/1.5.1/Element/Element.Event#Element:removeEvent" alt="removeEvent">removeEvent</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> monitor = <span class="keyword">function</span>(event, element){
    alert(<span class="string">'you clicked a link!'</span>);
};

$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click:relay(a)'</span>, monitor);
<span class="comment">// link clicks are delegated to element</span>

<span class="comment">// remove delegation:</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click:relay(a)'</span>, monitor);</code></pre><div class="heading clearfix"><h2><a href="#Element:removeEvents" name="Element:removeEvents">Element method: removeEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes a series of methods from delegation if the functions were used for delegation or else works like <a href="/core/docs/1.5.1/Element/Element.Event#Element:removeEvents" alt="removeEvents">removeEvents</a>.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> monitor = <span class="keyword">function</span>(){
    alert(<span class="string">'you clicked or moused over a link!'</span>);
};

$(<span class="string">'myElement'</span>).addEvents({
    <span class="string">'mouseover:relay(a)'</span>: monitor,
    <span class="string">'click:relay(a)'</span>: monitor
});

<span class="comment">// link clicks are delegated to element</span>
<span class="comment">// remove the delegation:</span>
$(<span class="string">'myElement'</span>).removeEvents({
    <span class="string">'mouseover:relay(a)'</span>: monitor,
    <span class="string">'click:relay(a)'</span>: monitor
});

<span class="comment">// remove all click:relay(a) events</span>
$(<span class="string">'myElement'</span>).removeEvents(<span class="string">'click:relay(a)'</span>);</code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>These methods don&#39;t take into consideration the body element margins and borders. If you need margin/borders on the body, consider adding a wrapper div, but always reset the margin and borders of body to 0.</li>
<li>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</li>
</ul>
<div class="heading clearfix"><h3>Credits:</h3></div>
<ul>
<li>Element positioning based on the <a href="http://qooxdoo.org/" alt="qooxdoo">qooxdoo</a> code and smart browser fixes, <a href="http://www.gnu.org/licenses/lgpl.html" alt="LGPL License">LGPL License</a>.</li>
<li>Viewport dimensions based on <a href="http://developer.yahoo.com/yui/" alt="YUI">YUI</a> code, <a href="http://developer.yahoo.com/yui/license.html" alt="BSD License">BSD License</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:scrollTo" name="Element:scrollTo">Element Method: scrollTo </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Scrolls the element to the specified coordinated (if the element has an overflow).
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.scrollTo(x, y);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>x - (<em>number</em>) The x coordinate.</li>
<li>y - (<em>number</em>) The y coordinate.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).scrollTo(<span class="number">0</span>, <span class="number">100</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/DOM/element.scrollLeft" alt="MDN Element:scrollLeft">MDN Element:scrollLeft</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollTop" alt="MDN Element:scrollTop">MDN Element:scrollTop</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getSize" name="Element:getSize">Element Method: getSize </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the height and width of the Element, taking into account borders and padding.
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getSize();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An object containing the width (as x) and the height (as y) of the target Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> size = myElement.getSize();
alert(<span class="string">'The element is '</span> + size.x + <span class="string">' pixels wide and '</span> + size.y + <span class="string">'pixels high.'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getScrollSize" name="Element:getScrollSize">Element Method: getScrollSize </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns an Object representing the size of the target Element, including scrollable area.
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getScrollSize();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An object containing the x and y dimensions of the target Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> scroll = $(<span class="string">'myElement'</span>).getScrollSize();
alert(<span class="string">'My element can scroll to '</span> + scroll.y + <span class="string">'px'</span>); <span class="comment">// alerts 'My element can scroll down to 820px'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/DOM/element.scrollLeft" alt="MDN Element:scrollLeft">MDN Element:scrollLeft</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollTop" alt="MDN Element:scrollTop">MDN Element:scrollTop</a>, <a href="https://developer.mozilla.org/en/DOM/element.offsetWidth" alt="MDN Element:offsetWidth">MDN Element:offsetWidth</a>, <a href="https://developer.mozilla.org/en/DOM/element.offsetHeight" alt="MDN Element:offsetHeight">MDN Element:offsetHeight</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollWidth" alt="MDN Element:scrollWidth">MDN Element:scrollWidth</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollHeight" alt="MDN Element:scrollHeight">MDN Element:scrollHeight</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div>
<p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getScroll" name="Element:getScroll">Element Method: getScroll </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns an Object representing how far the target Element is scrolled in either direction.
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getScroll();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An object containing the x and y dimensions of the target Element&#39;s scroll.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> scroll = $(<span class="string">'myElement'</span>).getScroll();
alert(<span class="string">'My element is scrolled down '</span> + scroll.y + <span class="string">'px'</span>); <span class="comment">// alerts 'My element is scrolled down to 620px'</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getPosition" name="Element:getPosition">Element Method: getPosition </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the real offsets of the element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getPosition(relative);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<p>relative - (Element, defaults to the document) If set, the position will be relative to this Element.</p>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An object with the x and y coordinates of the Element&#39;s position.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).getPosition(); <span class="comment">// returns {x: 100, y: 500};</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="http://www.quirksmode.org/js/findpos.html" alt="QuirksMode: Find position">QuirksMode: Find position</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div>
<p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:setPosition" name="Element:setPosition">Element Method: setPosition </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sets the position of the element&#39;s <em>left</em> and <em>top</em> values to the x/y positions you specify.</p>
<div class="heading clearfix"><h3>Syntax</h3></div><pre><code class="javascript">myElement.setPosition(positions);</code></pre><div class="heading clearfix"><h3>Arguments</h3></div>
<ol>
<li>positions - (<em>object</em>) an object with x/y values (integers or strings, i.e. 10 or &quot;10px&quot;)</li>
</ol>
<div class="heading clearfix"><h3>Returns</h3></div>
<ul>
<li>(<em>element</em>) the element that is positioned.</li>
</ul>
<div class="heading clearfix"><h3>Example</h3></div><pre><code class="javascript">myElement.setPosition({x: <span class="number">10</span>, y: <span class="number">100</span>});</code></pre><div class="heading clearfix"><h2><a href="#Element:getCoordinates" name="Element:getCoordinates">Element Method: getCoordinates </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns an object with width, height, left, right, top, and bottom coordinate values of the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getCoordinates(relative);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<p>relative - (<em>element</em>, optional) if set, the position will be relative to this element, otherwise relative to the document.</p>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An object containing the Element&#39;s current: top, left, width, height, right, and bottom.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myValues = $(<span class="string">'myElement'</span>).getCoordinates();</code></pre><div class="heading clearfix"><h4>Returns:</h4></div><pre><code class="javascript">{
    top: <span class="number">50</span>,
    left: <span class="number">100</span>,
    width: <span class="number">200</span>,
    height: <span class="number">300</span>,
    right: <span class="number">300</span>,
    bottom: <span class="number">350</span>
}</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="#Element:getPosition" alt="Element:getPosition">Element:getPosition</a></p>
<div class="heading clearfix"><h3>Note:</h3></div>
<p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getOffsetParent" name="Element:getOffsetParent">Element Method: getOffsetParent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the parent of the element that is positioned, if there is one.</p>
<div class="heading clearfix"><h3>Syntax</h3></div><pre><code class="javascript">myElement.getOffsetParent();</code></pre><div class="heading clearfix"><h3>Returns</h3></div>
<ul>
<li>(<em>mixed</em>) If the element has a parent that is positioned, it returns that element, otherwise it returns <em>null</em>.</li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>These methods don&#39;t take into consideration the body element margins and borders. If you need margin/borders on the body, consider adding a wrapper div, but always reset the margin and borders of body to 0.</li>
<li>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</li>
</ul>
<div class="heading clearfix"><h3>Credits:</h3></div><ul>
<li>Element positioning based on the <a href="http://qooxdoo.org/" alt="qooxdoo">qooxdoo</a> code and smart browser fixes, <a href="http://www.gnu.org/licenses/lgpl.html" alt="LGPL License">LGPL License</a>.</li>
<li>Viewport dimensions based on <a href="http://developer.yahoo.com/yui/" alt="YUI">YUI</a> code, <a href="http://developer.yahoo.com/yui/license.html" alt="BSD License">BSD License</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:scrollTo" name="Element:scrollTo">Element Method: scrollTo </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Scrolls the element to the specified coordinated (if the element has an overflow).
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.scrollTo(x, y);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>x - (<em>number</em>) The x coordinate.</li>
<li>y - (<em>number</em>) The y coordinate.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).scrollTo(<span class="number">0</span>, <span class="number">100</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/DOM/element.scrollLeft" alt="MDN Element:scrollLeft">MDN Element:scrollLeft</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollTop" alt="MDN Element:scrollTop">MDN Element:scrollTop</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getSize" name="Element:getSize">Element Method: getSize </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the height and width of the Element, taking into account borders and padding.
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getSize();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An object containing the width (as x) and the height (as y) of the target Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> size = myElement.getSize();
alert(<span class="string">'The element is '</span> + size.x + <span class="string">' pixels wide and '</span> + size.y + <span class="string">'pixels high.'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getScrollSize" name="Element:getScrollSize">Element Method: getScrollSize </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns an Object representing the size of the target Element, including scrollable area.
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getScrollSize();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An object containing the x and y dimensions of the target Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> scroll = $(<span class="string">'myElement'</span>).getScrollSize();
alert(<span class="string">'My element can scroll to '</span> + scroll.y + <span class="string">'px'</span>); <span class="comment">// alerts 'My element can scroll down to 820px'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/DOM/element.scrollLeft" alt="MDN Element:scrollLeft">MDN Element:scrollLeft</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollTop" alt="MDN Element:scrollTop">MDN Element:scrollTop</a>, <a href="https://developer.mozilla.org/en/DOM/element.offsetWidth" alt="MDN Element:offsetWidth">MDN Element:offsetWidth</a>, <a href="https://developer.mozilla.org/en/DOM/element.offsetHeight" alt="MDN Element:offsetHeight">MDN Element:offsetHeight</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollWidth" alt="MDN Element:scrollWidth">MDN Element:scrollWidth</a>, <a href="https://developer.mozilla.org/en/DOM/element.scrollHeight" alt="MDN Element:scrollHeight">MDN Element:scrollHeight</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div><p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getScroll" name="Element:getScroll">Element Method: getScroll </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns an Object representing how far the target Element is scrolled in either direction.
The following method is also available on the Window object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getScroll();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An object containing the x and y dimensions of the target Element&#39;s scroll.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> scroll = $(<span class="string">'myElement'</span>).getScroll();
alert(<span class="string">'My element is scrolled down '</span> + scroll.y + <span class="string">'px'</span>); <span class="comment">// alerts 'My element is scrolled down to 620px'</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getPosition" name="Element:getPosition">Element Method: getPosition </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the real offsets of the element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getPosition(relative);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><p>relative - (Element, defaults to the document) If set, the position will be relative to this Element.</p>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An object with the x and y coordinates of the Element&#39;s position.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).getPosition(); <span class="comment">// returns {x: 100, y: 500};</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="http://www.quirksmode.org/js/findpos.html" alt="QuirksMode: Find position">QuirksMode: Find position</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div><p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:setPosition" name="Element:setPosition">Element Method: setPosition </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sets the position of the element&#39;s <em>left</em> and <em>top</em> values to the x/y positions you specify.</p>
<div class="heading clearfix"><h3>Syntax</h3></div><pre><code class="javascript">myElement.setPosition(positions);</code></pre><div class="heading clearfix"><h3>Arguments</h3></div><ol>
<li>positions - (<em>object</em>) an object with x/y values (integers or strings, i.e. 10 or &quot;10px&quot;)</li>
</ol>
<div class="heading clearfix"><h3>Returns</h3></div><ul>
<li>(<em>element</em>) the element that is positioned.</li>
</ul>
<div class="heading clearfix"><h3>Example</h3></div><pre><code class="javascript">myElement.setPosition({x: <span class="number">10</span>, y: <span class="number">100</span>});</code></pre><div class="heading clearfix"><h2><a href="#Element:getCoordinates" name="Element:getCoordinates">Element Method: getCoordinates </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns an object with width, height, left, right, top, and bottom coordinate values of the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.getCoordinates(relative);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><p>relative - (<em>element</em>, optional) if set, the position will be relative to this element, otherwise relative to the document.</p>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An object containing the Element&#39;s current: top, left, width, height, right, and bottom.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myValues = $(<span class="string">'myElement'</span>).getCoordinates();</code></pre><div class="heading clearfix"><h4>Returns:</h4></div><pre><code class="javascript">{
    top: <span class="number">50</span>,
    left: <span class="number">100</span>,
    width: <span class="number">200</span>,
    height: <span class="number">300</span>,
    right: <span class="number">300</span>,
    bottom: <span class="number">350</span>
}</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="#Element:getPosition" alt="Element:getPosition">Element:getPosition</a></p>
<div class="heading clearfix"><h3>Note:</h3></div><p>If you need to measure the properties of elements that are not displayed (either their display style is none or one of their parents display style is none), you will need to use <a href="/more/docs/1.5.1/Element/Element.Measure" alt="Element.measure">Element.measure</a> to expose it.</p>
<div class="heading clearfix"><h2><a href="#Element:getOffsetParent" name="Element:getOffsetParent">Element Method: getOffsetParent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the parent of the element that is positioned, if there is one.</p>
<div class="heading clearfix"><h3>Syntax</h3></div><pre><code class="javascript">myElement.getOffsetParent();</code></pre><div class="heading clearfix"><h3>Returns</h3></div><ul>
<li>(<em>mixed</em>) If the element has a parent that is positioned, it returns that element, otherwise it returns <em>null</em>.</li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<ul>
<li>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</li>
<li>These methods are also available on window and document.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Internet Explorer fires element events in random order if they are not fired by <a href="#Element:fireEvent" alt="Element:fireEvent">Element:fireEvent</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvent" name="Element:addEvent">Element Method: addEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Attaches an event listener to a DOM element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addEvent(type, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>type - (<em>string</em>) The event name to monitor (&#39;click&#39;, &#39;load&#39;, etc) without the prefix &#39;on&#39;.</li>
<li>fn   - (<em>function</em>) The function to execute.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Click me.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){
    alert(<span class="string">'clicked!'</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>You can stop the Event by returning false in the listener or calling <a href="/core/docs/1.5.1/Types/Event#Event:stop" alt="Event:stop">Event:stop</a>.</li>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/DOM/DOM_event_reference" alt="MDN DOM Event Reference">MDN DOM Event Reference</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:removeEvent" name="Element:removeEvent">Element Method: removeEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works as Element.addEvent, but instead removes the specified event listener.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeEvent(type, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>type - (<em>string</em>) The event name.</li>
<li>fn   - (<em>function</em>) The function to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Standard usage:</h4></div><pre><code class="javascript"><span class="keyword">var</span> destroy = <span class="keyword">function</span>(){ alert(<span class="string">'Boom: '</span> + <span class="keyword">this</span>.id); } <span class="comment">// this refers to the Element.</span>
$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, destroy);

<span class="comment">//later...</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, destroy);</code></pre><div class="heading clearfix"><h4>Examples with bind:</h4></div><pre><code class="javascript"><span class="keyword">var</span> destroy = <span class="keyword">function</span>(){ alert(<span class="string">'Boom: '</span> + <span class="keyword">this</span>.id); }
<span class="keyword">var</span> boundDestroy = destroy.bind($(<span class="string">'anotherElement'</span>));
$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, boundDestroy);

<span class="comment">//later...</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, destroy); <span class="comment">// this won't remove the event.</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, destroy.bind($(<span class="string">'anotherElement'</span>)); <span class="comment">// this won't remove the event either.</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, boundDestroy); <span class="comment">// the correct way to remove the event.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>When the function is added using <a href="/core/docs/1.5.1/Types/Function#bind" alt="Function:bind">Function:bind</a> or <a href="/core/docs/1.5.1/Types/Function#pass" alt="Function:pass">Function:pass</a>, etc, a new reference is created.  For removeEvent to work, you must pass a reference to the exact function to be removed.</li>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvents" name="Element:addEvents">Element Method: addEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The same as <a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a>, but accepts an object to add multiple events at once.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addEvents(events);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>events - (<em>object</em>) An object with key/value representing: key the event name, and value the function that is called when the Event occurs.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvents({
    mouseover: <span class="keyword">function</span>(){
        alert(<span class="string">'mouseover'</span>);
    },
    click: <span class="keyword">function</span>(){
        alert(<span class="string">'click'</span>);
    }
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:removeEvents" name="Element:removeEvents">Element Method: removeEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes all events of a certain type from an Element. If no argument is passed, removes all events of all types.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElements.removeEvents([events]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>events - (optional) if not passed removes all events from the element.

<ul>
<li>(<em>string</em>) The event name (e.g. &#39;click&#39;). Removes all events of that type.</li>
<li>(<em>object</em>) An object of type function pairs. Like the one passed to <a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a>.</li>
</ul></li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
myElement.addEvents({
    mouseover: <span class="keyword">function</span>(){
        alert(<span class="string">'mouseover'</span>);
    },
    click: <span class="keyword">function</span>(){
        alert(<span class="string">'click'</span>);
    }
});

myElement.addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){ alert(<span class="string">'clicked again'</span>); });
myElement.addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){ alert(<span class="string">'clicked and again :('</span>); });
<span class="comment">//addEvent will keep appending each function.</span>
<span class="comment">//Unfortunately for the visitor, there will be three alerts they'll have to click on.</span>
myElement.removeEvents(<span class="string">'click'</span>); <span class="comment">// saves the visitor's finger by removing every click event.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element:removeEvent" alt="Element:removeEvent">Element:removeEvent</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:fireEvent" name="Element:fireEvent">Element Method: fireEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Executes all events of the specified type present in the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.fireEvent(type[, args[, delay]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>type  - (<em>string</em>) The event name (e.g. &#39;click&#39;)</li>
<li>args  - (<em>mixed</em>, optional) Array or single object, arguments to pass to the function. If more than one argument, must be an array.</li>
<li>delay - (<em>number</em>, optional) Delay (in ms) to wait to execute the event.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// fires all the added 'click' events and passes the Element 'anElement' after one second</span>
$(<span class="string">'myElement'</span>).fireEvent(<span class="string">'click'</span>, $(<span class="string">'anElement'</span>), <span class="number">1000</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This will not fire the DOM Event (this concerns all inline events ie. onmousedown=&quot;..&quot;).</li>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:cloneEvents" name="Element:cloneEvents">Element Method: cloneEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Clones all events from an Element to this Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.cloneEvents(from[, type]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>from - (<em>element</em>) Copy all events from this Element.</li>
<li>type - (<em>string</em>, optional) Copies only events of this type. If null, copies all events.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
<span class="keyword">var</span> myClone = myElement.clone().cloneEvents(myElement); <span class="comment">// clones the element and its events</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-Events" name="Element-Events">Object: Element.Events </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>You can add additional custom events by adding properties (objects) to the Element.Events Object</p>
<div class="heading clearfix"><h3>Arguments:</h3></div>
<p>The Element.Events.yourProperty (object) can have:</p>

<ol>
<li>base - (<em>string</em>, optional) the base event the custom event will listen to. Its not optional if condition is set.</li>
<li>condition - (<em>function</em>, optional) the condition from which we determine if the custom event can be fired. Is bound to the element you add the event to. The Event is passed in.</li>
<li>onAdd - (<em>function</em>, optional) the function that will get fired when the custom event is added. Is bound to the element you add the event to.</li>
<li>onRemove - (<em>function</em>, optional) the function that will get fired when the custom event is removed. Is bound to the element you add the event to.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Element.Events.shiftclick = {
    base: <span class="string">'click'</span>, <span class="comment">// the base event type</span>
    condition: <span class="keyword">function</span>(event){ <span class="comment">//a function to perform additional checks</span>
        <span class="keyword">return</span> (event.shift == <span class="literal">true</span>); <span class="comment">// this means the event is free to fire</span>
    }
};

$(<span class="string">'myInput'</span>).addEvent(<span class="string">'shiftclick'</span>, <span class="keyword">function</span>(event){
    log(<span class="string">'the user clicked the left mouse button while holding the shift key'</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>There are different types of custom Events you can create:

<ol>
<li>Custom Events with only base: they will just be a redirect to the base event.</li>
<li>Custom Events with base and condition: they will be redirect to the base event, but only fired if the condition is met.</li>
<li>Custom Events with onAdd and/or onRemove and any other of the above: they will also perform additional functions when the event is added/removed.</li>
</ol></li>
<li>Since MooTools 1.3 this is a native JavaScript Object and not an instance of the deprecated Hash</li>
</ul>
<div class="heading clearfix"><h3>Warning:</h3></div>
<p>If you use the condition option you NEED to specify a base type, unless you plan to overwrite a native event.
(highly unrecommended: use only when you know exactly what you&#39;re doing).</p>
<div class="heading clearfix"><h2><a href="#Built-in-Custom-Events" name="Built-in-Custom-Events">Built-in Custom Events</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Event: mouseenter </h3></div>
<p>This event fires when the mouse enters the area of the DOM Element and will not be fired again if the mouse crosses over children of the Element (unlike mouseover).</p>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'mouseenter'</span>, myFunction);</code></pre><div class="heading clearfix"><h4>See Also:</h4></div>
<ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h3>Event: mouseleave </h3></div>
<p>This event fires when the mouse leaves the area of the DOM Element and will not be fired if the mouse crosses over children of the Element (unlike mouseout).</p>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'mouseleave'</span>, myFunction);</code></pre><div class="heading clearfix"><h4>See Also:</h4></div>
<ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h3>Event: mousewheel </h3></div>
<p>This event fires when the mouse wheel is rotated;</p>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'mousewheel'</span>, myFunction);</code></pre><div class="heading clearfix"><h4>Notes:</h4></div>
<ul>
<li><p><code>mouseenter</code> and <code>mouseleave</code> events are supported natively by Internet Explorer, Opera 11, and Firefox 10. MooTools will only add the custom events if necessary.</p></li>
<li><p>This custom event just redirects DOMMouseScroll (Mozilla) to mousewheel (Opera, Internet Explorer), making it work across browsers.</p></li>
</ul>
<div class="heading clearfix"><h4>See Also:</h4></div>
<ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-NativeEvents" name="Element-NativeEvents">Object: Element.NativeEvents </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This is an object with all known DOM event types, like click, mouseover, load, etc.
Each event type has a value, possible values are <code>0</code> (<code>undefined</code>, <code>null</code>), <code>1</code>, and <code>2</code>.</p>
<div class="heading clearfix"><h3>Type 0 Events</h3></div>
<p>By default it is undefined. In this case you can add events, but you should manually fire them.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">element.addEvent(<span class="string">'pizza'</span>, fn);
element.fireEvent(<span class="string">'pizza'</span>, <span class="string">'yum!'</span>);</code></pre>
<p>The event is not actually added to the DOM, but is only registered in a JS object.</p>
<div class="heading clearfix"><h3>Type 1 Events</h3></div>
<p>The second case is if the value is 1. This time the object is attached to the DOM. Usually by element.addEventListener, or element.attachEvent in older versions of IE. You can still use <code>element.fireEvent(&#39;load&#39;)</code> to manually fire events.</p>
<div class="heading clearfix"><h3>Type 2 Events</h3></div>
<p>The final case is if the value is 2. This is the same as case 1. The only difference is that the event object, containing interesting data, is wrapped and normalized by event wrapper (<a href="/core/docs/1.5.1/Types/DOMEvent" alt="DOMEvent">DOMEvent</a>). This is the most used variant, for mouse events (like <em>click</em>) and keyboard events.</p>

<p>The reason to differentiate between 1 and 2 is that 1 is usually used for events that don&#39;t have interesting data like: <code>onload</code>, <code>onscroll</code>, and <code>onresize</code>, or it&#39;s more performant. The latter two, for example, are fired frequently.</p>
<div class="heading clearfix"><h3>Adding unsupported events</h3></div>
<p>Not all events are supported by MooTools&#39; Element Events API because of edge use cases or new events supported by the browser. To add support for a native event, just augment the <code>Element.NativeEvents</code> object with the key and <strong>appropriate</strong> key value (use the above). For example to add <code>popstate</code> support in your application:</p>
<pre><code class="javascript">Element.NativeEvents.popstate = <span class="number">2</span>;
<span class="comment">// Now element.addEvent('popstate', fn); will work everywhere</span></code></pre>+R*****<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><ul>
<li>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</li>
<li>These methods are also available on window and document.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Internet Explorer fires element events in random order if they are not fired by <a href="#Element:fireEvent" alt="Element:fireEvent">Element:fireEvent</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvent" name="Element:addEvent">Element Method: addEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Attaches an event listener to a DOM element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addEvent(type, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>type - (<em>string</em>) The event name to monitor (&#39;click&#39;, &#39;load&#39;, etc) without the prefix &#39;on&#39;.</li>
<li>fn   - (<em>function</em>) The function to execute.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Click me.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){
    alert(<span class="string">'clicked!'</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>You can stop the Event by returning false in the listener or calling <a href="/core/docs/1.5.1/Types/Event#Event:stop" alt="Event:stop">Event:stop</a>.</li>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/DOM/DOM_event_reference" alt="MDN DOM Event Reference">MDN DOM Event Reference</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:removeEvent" name="Element:removeEvent">Element Method: removeEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works as Element.addEvent, but instead removes the specified event listener.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeEvent(type, fn);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>type - (<em>string</em>) The event name.</li>
<li>fn   - (<em>function</em>) The function to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Standard usage:</h4></div><pre><code class="javascript"><span class="keyword">var</span> destroy = <span class="keyword">function</span>(){ alert(<span class="string">'Boom: '</span> + <span class="keyword">this</span>.id); } <span class="comment">// this refers to the Element.</span>
$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, destroy);

<span class="comment">//later...</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, destroy);</code></pre><div class="heading clearfix"><h4>Examples with bind:</h4></div><pre><code class="javascript"><span class="keyword">var</span> destroy = <span class="keyword">function</span>(){ alert(<span class="string">'Boom: '</span> + <span class="keyword">this</span>.id); }
<span class="keyword">var</span> boundDestroy = destroy.bind($(<span class="string">'anotherElement'</span>));
$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, boundDestroy);

<span class="comment">//later...</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, destroy); <span class="comment">// this won't remove the event.</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, destroy.bind($(<span class="string">'anotherElement'</span>)); <span class="comment">// this won't remove the event either.</span>
$(<span class="string">'myElement'</span>).removeEvent(<span class="string">'click'</span>, boundDestroy); <span class="comment">// the correct way to remove the event.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>When the function is added using <a href="/core/docs/1.5.1/Types/Function#bind" alt="Function:bind">Function:bind</a> or <a href="/core/docs/1.5.1/Types/Function#pass" alt="Function:pass">Function:pass</a>, etc, a new reference is created.  For removeEvent to work, you must pass a reference to the exact function to be removed.</li>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:addEvents" name="Element:addEvents">Element Method: addEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The same as <a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a>, but accepts an object to add multiple events at once.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addEvents(events);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>events - (<em>object</em>) An object with key/value representing: key the event name, and value the function that is called when the Event occurs.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvents({
    mouseover: <span class="keyword">function</span>(){
        alert(<span class="string">'mouseover'</span>);
    },
    click: <span class="keyword">function</span>(){
        alert(<span class="string">'click'</span>);
    }
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:removeEvents" name="Element:removeEvents">Element Method: removeEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes all events of a certain type from an Element. If no argument is passed, removes all events of all types.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElements.removeEvents([events]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>events - (optional) if not passed removes all events from the element.<ul>
<li>(<em>string</em>) The event name (e.g. &#39;click&#39;). Removes all events of that type.</li>
<li>(<em>object</em>) An object of type function pairs. Like the one passed to <a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a>.</li>
</ul>
</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
myElement.addEvents({
    mouseover: <span class="keyword">function</span>(){
        alert(<span class="string">'mouseover'</span>);
    },
    click: <span class="keyword">function</span>(){
        alert(<span class="string">'click'</span>);
    }
});

myElement.addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){ alert(<span class="string">'clicked again'</span>); });
myElement.addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){ alert(<span class="string">'clicked and again :('</span>); });
<span class="comment">//addEvent will keep appending each function.</span>
<span class="comment">//Unfortunately for the visitor, there will be three alerts they'll have to click on.</span>
myElement.removeEvents(<span class="string">'click'</span>); <span class="comment">// saves the visitor's finger by removing every click event.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element:removeEvent" alt="Element:removeEvent">Element:removeEvent</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:fireEvent" name="Element:fireEvent">Element Method: fireEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Executes all events of the specified type present in the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.fireEvent(type[, args[, delay]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>type  - (<em>string</em>) The event name (e.g. &#39;click&#39;)</li>
<li>args  - (<em>mixed</em>, optional) Array or single object, arguments to pass to the function. If more than one argument, must be an array.</li>
<li>delay - (<em>number</em>, optional) Delay (in ms) to wait to execute the event.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// fires all the added 'click' events and passes the Element 'anElement' after one second</span>
$(<span class="string">'myElement'</span>).fireEvent(<span class="string">'click'</span>, $(<span class="string">'anElement'</span>), <span class="number">1000</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This will not fire the DOM Event (this concerns all inline events ie. onmousedown=&quot;..&quot;).</li>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:cloneEvents" name="Element:cloneEvents">Element Method: cloneEvents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Clones all events from an Element to this Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.cloneEvents(from[, type]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>from - (<em>element</em>) Copy all events from this Element.</li>
<li>type - (<em>string</em>, optional) Copies only events of this type. If null, copies all events.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
<span class="keyword">var</span> myClone = myElement.clone().cloneEvents(myElement); <span class="comment">// clones the element and its events</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is also attached to Document and Window.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-Events" name="Element-Events">Object: Element.Events </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>You can add additional custom events by adding properties (objects) to the Element.Events Object</p>
<div class="heading clearfix"><h3>Arguments:</h3></div><p>The Element.Events.yourProperty (object) can have:</p>
<ol>
<li>base - (<em>string</em>, optional) the base event the custom event will listen to. Its not optional if condition is set.</li>
<li>condition - (<em>function</em>, optional) the condition from which we determine if the custom event can be fired. Is bound to the element you add the event to. The Event is passed in.</li>
<li>onAdd - (<em>function</em>, optional) the function that will get fired when the custom event is added. Is bound to the element you add the event to.</li>
<li>onRemove - (<em>function</em>, optional) the function that will get fired when the custom event is removed. Is bound to the element you add the event to.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Element.Events.shiftclick = {
    base: <span class="string">'click'</span>, <span class="comment">// the base event type</span>
    condition: <span class="keyword">function</span>(event){ <span class="comment">//a function to perform additional checks</span>
        <span class="keyword">return</span> (event.shift == <span class="literal">true</span>); <span class="comment">// this means the event is free to fire</span>
    }
};

$(<span class="string">'myInput'</span>).addEvent(<span class="string">'shiftclick'</span>, <span class="keyword">function</span>(event){
    log(<span class="string">'the user clicked the left mouse button while holding the shift key'</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>There are different types of custom Events you can create:<ol>
<li>Custom Events with only base: they will just be a redirect to the base event.</li>
<li>Custom Events with base and condition: they will be redirect to the base event, but only fired if the condition is met.</li>
<li>Custom Events with onAdd and/or onRemove and any other of the above: they will also perform additional functions when the event is added/removed.</li>
</ol>
</li>
<li>Since MooTools 1.3 this is a native JavaScript Object and not an instance of the deprecated Hash</li>
</ul>
<div class="heading clearfix"><h3>Warning:</h3></div><p>If you use the condition option you NEED to specify a base type, unless you plan to overwrite a native event.
(highly unrecommended: use only when you know exactly what you&#39;re doing).</p>
<div class="heading clearfix"><h2><a href="#Built-in-Custom-Events" name="Built-in-Custom-Events">Built-in Custom Events</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Event: mouseenter </h3></div><p>This event fires when the mouse enters the area of the DOM Element and will not be fired again if the mouse crosses over children of the Element (unlike mouseover).</p>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'mouseenter'</span>, myFunction);</code></pre><div class="heading clearfix"><h4>See Also:</h4></div><ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h3>Event: mouseleave </h3></div><p>This event fires when the mouse leaves the area of the DOM Element and will not be fired if the mouse crosses over children of the Element (unlike mouseout).</p>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'mouseleave'</span>, myFunction);</code></pre><div class="heading clearfix"><h4>See Also:</h4></div><ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h3>Event: mousewheel </h3></div><p>This event fires when the mouse wheel is rotated;</p>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'mousewheel'</span>, myFunction);</code></pre><div class="heading clearfix"><h4>Notes:</h4></div><ul>
<li><p><code>mouseenter</code> and <code>mouseleave</code> events are supported natively by Internet Explorer, Opera 11, and Firefox 10. MooTools will only add the custom events if necessary.</p>
</li>
<li><p>This custom event just redirects DOMMouseScroll (Mozilla) to mousewheel (Opera, Internet Explorer), making it work across browsers.</p>
</li>
</ul>
<div class="heading clearfix"><h4>See Also:</h4></div><ul>
<li><a href="#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-NativeEvents" name="Element-NativeEvents">Object: Element.NativeEvents </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>This is an object with all known DOM event types, like click, mouseover, load, etc.
Each event type has a value, possible values are <code>0</code> (<code>undefined</code>, <code>null</code>), <code>1</code>, and <code>2</code>.</p>
<div class="heading clearfix"><h3>Type 0 Events</h3></div><p>By default it is undefined. In this case you can add events, but you should manually fire them.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">element.addEvent(<span class="string">'pizza'</span>, fn);
element.fireEvent(<span class="string">'pizza'</span>, <span class="string">'yum!'</span>);</code></pre><p>The event is not actually added to the DOM, but is only registered in a JS object.</p>
<div class="heading clearfix"><h3>Type 1 Events</h3></div><p>The second case is if the value is 1. This time the object is attached to the DOM. Usually by element.addEventListener, or element.attachEvent in older versions of IE. You can still use <code>element.fireEvent(&#39;load&#39;)</code> to manually fire events.</p>
<div class="heading clearfix"><h3>Type 2 Events</h3></div><p>The final case is if the value is 2. This is the same as case 1. The only difference is that the event object, containing interesting data, is wrapped and normalized by event wrapper (<a href="/core/docs/1.5.1/Types/DOMEvent" alt="DOMEvent">DOMEvent</a>). This is the most used variant, for mouse events (like <em>click</em>) and keyboard events.</p>
<p>The reason to differentiate between 1 and 2 is that 1 is usually used for events that don&#39;t have interesting data like: <code>onload</code>, <code>onscroll</code>, and <code>onresize</code>, or it&#39;s more performant. The latter two, for example, are fired frequently.</p>
<div class="heading clearfix"><h3>Adding unsupported events</h3></div><p>Not all events are supported by MooTools&#39; Element Events API because of edge use cases or new events supported by the browser. To add support for a native event, just augment the <code>Element.NativeEvents</code> object with the key and <strong>appropriate</strong> key value (use the above). For example to add <code>popstate</code> support in your application:</p>
<pre><code class="javascript">Element.NativeEvents.popstate = <span class="number">2</span>;
<span class="comment">// Now element.addEvent('popstate', fn); will work everywhere</span></code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:setStyle" name="Element:setStyle">Element Method: setStyle </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sets a CSS property to the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.setStyle(property, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>) The property to set.</li>
<li>value    - (<em>mixed</em>) The value to which to set it. Numeric values of properties requiring a unit will automatically be appended with &#39;px&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">//Both lines have the same effect.</span>
$(<span class="string">'myElement'</span>).setStyle(<span class="string">'width'</span>, <span class="string">'300px'</span>); <span class="comment">// the width is now 300px.</span>
$(<span class="string">'myElement'</span>).setStyle(<span class="string">'width'</span>, <span class="number">300</span>); <span class="comment">// the width is now 300px.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>All number values will automatically be rounded to the nearest whole number.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getStyle" name="Element:getStyle">Element Method: getStyle </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the style of the Element given the property passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> style = myElement.getStyle(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>) The css style property you want to retrieve.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The style value.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).getStyle(<span class="string">'width'</span>); <span class="comment">// returns "300px".</span>
$(<span class="string">'myElement'</span>).getStyle(<span class="string">'width'</span>).toInt(); <span class="comment">// returns 300.</span></code></pre><div class="heading clearfix"><h2><a href="#Element:setStyles" name="Element:setStyles">Element Method: setStyles </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Applies a collection of styles to the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.setStyles(styles);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>styles - (<em>object</em>) An object of property/value pairs for all the styles to apply.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).setStyles({
    border: <span class="string">'1px solid #000'</span>,
    width: <span class="number">300</span>,
    height: <span class="number">400</span>
});</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element:getStyle" alt="Element:getStyle">Element:getStyle</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getStyles" name="Element:getStyles">Element Method: getStyles </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns an object of styles of the Element for each argument passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> styles = myElement.getStyles(property[, property2[, property3[, ...]]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - (<em>strings</em>) Any number of style properties.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An key/value object with the CSS styles as computed by the browser.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).getStyles(<span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'padding'</span>);
<span class="comment">// returns {width: '10px', height: '10px', padding: '10px 0px 10px 0px'}</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element:getStyle" alt="Element:getStyle">Element:getStyle</a></li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:setStyle" name="Element:setStyle">Element Method: setStyle </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sets a CSS property to the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.setStyle(property, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>) The property to set.</li>
<li>value    - (<em>mixed</em>) The value to which to set it. Numeric values of properties requiring a unit will automatically be appended with &#39;px&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">//Both lines have the same effect.</span>
$(<span class="string">'myElement'</span>).setStyle(<span class="string">'width'</span>, <span class="string">'300px'</span>); <span class="comment">// the width is now 300px.</span>
$(<span class="string">'myElement'</span>).setStyle(<span class="string">'width'</span>, <span class="number">300</span>); <span class="comment">// the width is now 300px.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>All number values will automatically be rounded to the nearest whole number.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getStyle" name="Element:getStyle">Element Method: getStyle </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the style of the Element given the property passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> style = myElement.getStyle(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>) The css style property you want to retrieve.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The style value.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).getStyle(<span class="string">'width'</span>); <span class="comment">// returns "300px".</span>
$(<span class="string">'myElement'</span>).getStyle(<span class="string">'width'</span>).toInt(); <span class="comment">// returns 300.</span></code></pre><div class="heading clearfix"><h2><a href="#Element:setStyles" name="Element:setStyles">Element Method: setStyles </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Applies a collection of styles to the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.setStyles(styles);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>styles - (<em>object</em>) An object of property/value pairs for all the styles to apply.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).setStyles({
    border: <span class="string">'1px solid #000'</span>,
    width: <span class="number">300</span>,
    height: <span class="number">400</span>
});</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element:getStyle" alt="Element:getStyle">Element:getStyle</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getStyles" name="Element:getStyles">Element Method: getStyles </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns an object of styles of the Element for each argument passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> styles = myElement.getStyles(property[, property2[, property3[, ...]]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - (<em>strings</em>) Any number of style properties.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An key/value object with the CSS styles as computed by the browser.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).getStyles(<span class="string">'width'</span>, <span class="string">'height'</span>, <span class="string">'padding'</span>);
<span class="comment">// returns {width: '10px', height: '10px', padding: '10px 0px 10px 0px'}</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element:getStyle" alt="Element:getStyle">Element:getStyle</a></li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Window" name="Window">Type: Window </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The following functions are treated as Window methods.</p>
<div class="heading clearfix"><h2><a href="#Window:document-id" name="Window:document-id">Function: document.id </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The document.id function has a dual purpose: Getting the element by its id, and making an element in Internet Explorer &quot;grab&quot; all the <a href="#Element" alt="Element">Element</a> methods.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(el);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el - The Element to be extended. Can be one of the following types:

<ul>
<li>(<em>element</em>) The element will be extended if it is not already.</li>
<li>(<em>string</em>) A string containing the id of the DOM element desired.</li>
<li>(<em>object</em>) If the object has a toElement method, toElement will be called to get the Element.</li>
</ul></li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) A DOM element.</li>
<li>(<em>null</em>) Null if no matching id was found or if toElement did not return an element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Get a DOM Element by ID:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'myElement'</span>);</code></pre><div class="heading clearfix"><h4>Get a DOM Element by reference:</h4></div><pre><code class="javascript"><span class="keyword">var</span> div = document.getElementById(<span class="string">'myElement'</span>);
div = document.id(div); <span class="comment">// the element with all the Element methods applied.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is useful when it&#39;s unclear if working with an actual element or an id.  It also serves as a shorthand for document.getElementById().</li>
<li>In Internet Explorer, the <a href="#Element" alt="Element">Element</a> is extended the first time document.id is called on it, and all the <a href="#Element" alt="Element">Element</a> Methods become available.</li>
<li>Browsers with native HTMLElement support, such as Safari, Firefox, and Opera, apply all the <a href="#Element" alt="Element">Element</a> Methods to every DOM element automatically.</li>
<li>Because MooTools detects if an element needs to be extended or not, this function may be called on the same Element many times with no ill effects.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Window:dollar" name="Window:dollar">Function: $ </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The dollar function is an alias for <a href="#Window:document-id" alt="document:id">document:id</a> if the $ variable is not set already.
However it is not recommended to use more frameworks, the $ variable can be set by another framework or script. MooTools will detect this and determine if it will set the $ function so it will not be overwritten.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
<span class="keyword">var</span> myElement2 = document.id(<span class="string">'myElement'</span>);

myElement == myElement2; <span class="comment">// returns true</span>


(<span class="keyword">function</span>($){

    <span class="comment">// Now you can use $ safely in this closure</span>

})(document.id)</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li>MooTools Blogpost: <a href="http://mootools.net/blog/2009/06/22/the-dollar-safe-mode/" alt="The Dollar Safe Mode">The Dollar Safe Mode</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Window:dollars" name="Window:dollars">Function: $$ </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Selects and extends DOM elements. Return an Elements instance.
The Element instance returned is an array-like object, supporting every <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> method and every <a href="#Element" alt="Element">Element</a> method.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElements = $$(argument);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ul>
<li>selector - (<em>string</em>) A CSS selector</li>
<li>elements - (<em>elements</em>), (<em>collection</em>) or (<em>array</em>) An enumerable list of elements</li>
<li>element, element - (<em>element</em>) any number of elements as arguments</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>elements</em>) - An array-like Elements collection of all the DOM elements matched, extended with <a href="#Window:document-id" alt="document:id">document:id</a>.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Get Elements by Their Tag Names:</h4></div><pre><code class="javascript">$$(<span class="string">'a'</span>); <span class="comment">// returns all anchor elements in the page.</span></code></pre><div class="heading clearfix"><h4>Get an Elements instance by passing multiple elements:</h4></div><pre><code class="javascript">$$(element1, element2, element3); <span class="comment">// returns an Elements instance containing these 3 elements.</span></code></pre><div class="heading clearfix"><h4>Convert any array or collection of elements to an Elements instance:</h4></div><pre><code class="javascript">$$([element1, element2, element3]); <span class="comment">// returns an Elements instance containing these 3 elements.</span>
$$(document.getElementsByTagName(<span class="string">'a'</span>)); <span class="comment">// returns an Elements instance containing the result of the getElementsByTagName call.</span></code></pre><div class="heading clearfix"><h4>Using CSS Selectors:</h4></div><pre><code class="javascript">$$(<span class="string">'#myElement'</span>); <span class="comment">// returns an Elements instance containing only the element with the id 'myElement'.</span>
$$(<span class="string">'#myElement a.myClass'</span>); <span class="comment">// returns an Elements instance of all anchor tags with the class 'myClass' within the DOM element with id 'myElement'.</span>
$$(<span class="string">'a, b'</span>); <span class="comment">// returns an array of all anchor and bold elements in the page.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Since MooTools 1.3 this function does not accept multiple collections or multiple strings as arguments.</li>
<li>If an expression doesn&#39;t find any elements, an empty Elements instance will be returned.</li>
<li>The return type of element methods run through <a href="#Window:dollars" alt="$$">$$</a> is always an Elements instance, regardless of the amount of results.</li>
<li>Default Selectors supported are the same as you can find on <a href="http://www.w3.org/TR/css3-selectors/#selectors" alt="W3C CSS3 selectors">W3C CSS3 selectors</a>.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Custom Type to allow all of its methods to be used with any extended DOM Element.</p>
<div class="heading clearfix"><h2><a href="#Element:constructor" name="Element:constructor">Element Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates a new Element of the type passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myEl = <span class="keyword">new</span> Element(element[, properties]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>element - (<em>mixed</em>) The tag name for the Element to be created or an actual DOM element or a CSS selector.</li>
<li>properties - (<em>object</em>, optional) Calls the Single Argument version of <a href="#Element:set" alt="Element:set">Element:set</a> with the properties object passed in.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) A new MooTools extended HTML Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// Creating an new anchor with an Object</span>
<span class="keyword">var</span> myAnchor = <span class="keyword">new</span> Element(<span class="string">'a'</span>, {
    href: <span class="string">'http://mootools.net'</span>,
    <span class="string">'class'</span>: <span class="string">'myClass'</span>,
    html: <span class="string">'Click me!'</span>,
    styles: {
        display: <span class="string">'block'</span>,
        border: <span class="string">'1px solid black'</span>
    },
    events: {
        click: <span class="keyword">function</span>(){
            alert(<span class="string">'clicked'</span>);
        },
        mouseover: <span class="keyword">function</span>(){
            alert(<span class="string">'mouseovered'</span>);
        }
    }
});

<span class="comment">// Using Selectors</span>
<span class="keyword">var</span> myNewElement = <span class="keyword">new</span> Element(<span class="string">'a.myClass'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>Because the element name is parsed as a CSS selector, colons in namespaced tags have to be escaped. So <code>new Element(&#39;fb\:name&#39;)</code> becomes <code>&lt;fb:name&gt;</code>.</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Window:dollar" alt="$">$</a>, <a href="#Element:set" alt="Element:set">Element:set</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getElement" name="Element:getElement">Element Method: getElement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the first descendant element whose tag name matches the tag provided. CSS selectors may also be passed.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = myElement.getElement(tag);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>tag - (<em>string</em>) Tag name of the element to find or a CSS Selector.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) If a match is found, the Element will be returned. Otherwise, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> firstDiv = $(document.body).getElement(<span class="string">'div'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is also available for Document instances.</li>
<li>Default Selectors supported are the same as you can find on <a href="http://www.w3.org/TR/css3-selectors/#selectors" alt="W3C CSS3 selectors">W3C CSS3 selectors</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getElements" name="Element:getElements">Element Method: getElements </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Collects all descendant elements whose tag name matches the tag provided. CSS selectors may also be passed.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElements = myElement.getElements(tag);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>tag - (<em>string</em>) String of the tag to match  or a CSS Selector.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) An <a href="#Elements" alt="Elements">Elements</a> array of all matched Elements.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> allAnchors = $(document.body).getElements(<span class="string">'a'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is also available for Document instances.</li>
<li>Default Selectors supported are the same as you can find on <a href="http://www.w3.org/TR/css3-selectors/#selectors" alt="W3C CSS3 selectors">W3C CSS3 selectors</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getElementById" name="Element:getElementById">Element Method: getElementById </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the element with the specified id found inside the current Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = anElement.getElementById(id);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>id - (<em>string</em>) The ID of the Element to find.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) If a match is found, returns that Element. Otherwise, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myChild = $(<span class="string">'myParent'</span>).getElementById(<span class="string">'myChild'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is not provided for Document instances as document.getElementById is provided natively.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:set" name="Element:set">Element Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This is a &quot;dynamic arguments&quot; method. Properties passed in can be any of the &#39;set&#39; properties in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.set(arguments);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ul>
<li>Two Arguments (property, value)

<ol>
<li>property - (<em>string</em>) The string key from the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object representing the property to set.</li>
<li>value - (<em>mixed</em>) The value to set for the specified property.</li>
</ol></li>
<li>One Argument (properties)

<ol>
<li>properties - (<em>object</em>) Object with its keys/value pairs representing the properties and values to set for the Element (as described below).</li>
</ol></li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>With Property and Value:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'text'</span>, <span class="string">'text goes here'</span>);
$(<span class="string">'myElement'</span>).set(<span class="string">'class'</span>, <span class="string">'active'</span>);
<span class="comment">// the 'styles' property passes the object to Element:setStyles.</span>
<span class="keyword">var</span> body = $(document.body).set(<span class="string">'styles'</span>, {
    font: <span class="string">'12px Arial'</span>,
    color: <span class="string">'blue'</span>
});</code></pre><div class="heading clearfix"><h4>With an Object:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>).set({
    <span class="comment">// the 'styles' property passes the object to Element:setStyles.</span>
    styles: {
        font: <span class="string">'12px Arial'</span>,
        color: <span class="string">'blue'</span>,
        border: <span class="string">'1px solid #f00'</span>
    },
    <span class="comment">// the 'events' property passes the object to Element:addEvents.</span>
    events: {
        click: <span class="keyword">function</span>(){ alert(<span class="string">'click'</span>); },
        mouseover: <span class="keyword">function</span>(){ <span class="keyword">this</span>.addClass(<span class="string">'over'</span>); }
    },
    <span class="comment">//Any other property uses Element:setProperty.</span>
    id: <span class="string">'documentBody'</span>
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>All the property arguments are passed to the corresponding method of the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</li>
<li>If no matching property is found in <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, it falls back to <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a>.</li>
<li>Whenever using <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a> to set an attribute, pass in the lowercase, simplified form of the property. For example:

<ul>
<li>use &#39;for&#39;, not &#39;htmlFor&#39;,</li>
<li>use &#39;class&#39;, not &#39;className&#39;</li>
<li>use &#39;frameborder&#39;, not &#39;frameBorder&#39;</li>
<li>etc.</li>
</ul></li>
<li>In IE8 or lower, it is not possible to set <code>type</code> multiple times. It will throw an error.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element" alt="Element">Element</a>, <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a>, <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvents" alt="Element:addEvents">Element:addEvents</a>, <a href="/core/docs/1.5.1/Element/Element.Style#Element:setStyles" alt="Element:setStyles">Element:setStyles</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:get" name="Element:get">Element Method: get </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This is a &quot;dynamic arguments&quot; method. Properties passed in can be any of the &#39;get&#39; properties in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.get(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>) The string key from the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object representing the property to get.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The result of calling the corresponding &#39;get&#39; function in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Using Custom Getters:</h4></div><pre><code class="javascript"><span class="keyword">var</span> tag = $(<span class="string">'myDiv'</span>).get(<span class="string">'tag'</span>); <span class="comment">// returns "div".</span></code></pre><div class="heading clearfix"><h4>Fallback to Element Attributes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> id = $(<span class="string">'myDiv'</span>).get(<span class="string">'id'</span>); <span class="comment">// returns "myDiv".</span>
<span class="keyword">var</span> value = $(<span class="string">'myInput'</span>).get(<span class="string">'value'</span>); <span class="comment">// returns the myInput element's value.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li> If the corresponding accessor doesn&#39;t exist in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object, the result of <a href="#Element:getProperty" alt="Element:getProperty">Element:getProperty</a> on the property passed in is returned.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element" alt="Element">Element</a>, <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, <a href="#Element:getProperty" alt="Element:getProperty">Element:getProperty</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:erase" name="Element:erase">Element Method: erase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This is a &quot;dynamic arguments&quot; method. Properties passed in can be any of the &#39;erase&#39; properties in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.erase(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>) The string key from the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object representing the property to erase.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The result of calling the corresponding &#39;erase&#39; function in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myDiv'</span>).erase(<span class="string">'id'</span>); <span class="comment">//Removes the id from myDiv.</span>
$(<span class="string">'myDiv'</span>).erase(<span class="string">'class'</span>); <span class="comment">//myDiv element no longer has any class names set.</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<ul>
<li> If the corresponding eraser doesn&#39;t exist in the  <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object, <a href="#Element:removeProperty" alt="Element:removeProperty">Element:removeProperty</a> is called with the property passed in.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element" alt="Element">Element</a>, <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, <a href="#Element:removeProperty" alt="Element:removeProperty">Element:removeProperty</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:match" name="Element:match">Element Method: match </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Tests this Element to see if it matches the argument passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.match(match);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - can be a string or element

<ul>
<li>(<em>string</em>) The tag name to test against this element. Any single CSS selectors may also be passed.</li>
<li>(<em>element</em>) An element to match; returns true if this is the actual element passed in.</li>
</ul></li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) If the element matched, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Using a Tag Name:</h4></div><pre><code class="javascript"><span class="comment">// returns true if #myDiv is a div.</span>
$(<span class="string">'myDiv'</span>).match(<span class="string">'div'</span>);</code></pre><div class="heading clearfix"><h4>Using a CSS Selector:</h4></div><pre><code class="javascript"><span class="comment">// returns true if #myDiv has the class foo and is named "bar"</span>
$(<span class="string">'myDiv'</span>).match(<span class="string">'.foo[name=bar]'</span>);</code></pre><div class="heading clearfix"><h4>Using an Element:</h4></div><pre><code class="javascript"><span class="keyword">var</span> el = $(<span class="string">'myDiv'</span>);
$(<span class="string">'myDiv'</span>).match(el); <span class="comment">// returns true</span>
$(<span class="string">'otherElement'</span>).match(el); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h2><a href="#Element:contains" name="Element:contains">Element Method: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Checks all descendants of this Element for a match.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = myElement.contains(el);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el - (<em>element</em>) The element to search for.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) Returns true if the element contains passed in Element is a child, otherwise false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"Darth_Vader"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"Luke"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">if</span> ($(<span class="string">'Darth_Vader'</span>).contains($(<span class="string">'Luke'</span>))) alert(<span class="string">'Luke, I am your father.'</span>); <span class="comment">//tan tan tannn...</span></code></pre><div class="heading clearfix"><h2><a href="#Element:inject" name="Element:inject">Element Method: inject </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Injects, or inserts, the Element at a particular place relative to the Element&#39;s children (specified by the second the argument).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.inject(el[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el   - (<em>mixed</em>) el can be the id of an element or an element.</li>
<li>where - (<em>string</em>, optional: defaults to &#39;bottom&#39;) The place to inject this Element.  Can be &#39;top&#39;, &#39;bottom&#39;, &#39;after&#39;, or &#39;before&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myFirstElement  = <span class="keyword">new</span> Element(<span class="string">'div'</span>, {id: <span class="string">'myFirstElement'</span>});
<span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div'</span>, {id: <span class="string">'mySecondElement'</span>});
<span class="keyword">var</span> myThirdElement  = <span class="keyword">new</span> Element(<span class="string">'div'</span>, {id: <span class="string">'myThirdElement'</span>});</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myThirdElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject to the bottom:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myFirstElement.inject(mySecondElement);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject to the top:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myThirdElement.inject(mySecondElement, <span class="string">'top'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myThirdElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject before:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myFirstElement.inject(mySecondElement, <span class="string">'before'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject After:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myFirstElement.inject(mySecondElement, <span class="string">'after'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="#Element:adopt" alt="Element:adopt">Element:adopt</a>, <a href="#Element:grab" alt="Element:grab">Element:grab</a>, <a href="#Element:wraps" alt="Element:wraps">Element:wraps</a></p>
<div class="heading clearfix"><h2><a href="#Element:grab" name="Element:grab">Element Method: grab </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works as <a href="#Element:inject" alt="Element:inject">Element:inject</a>, but in reverse.</p>

<p>Appends the Element at a particular place relative to the Element&#39;s children (specified by the where parameter).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.grab(el[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el - (<em>mixed</em>) el can be the id of an element or an Element.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The place to append this Element. Can be &#39;top&#39;, &#39;bottom&#39;, &#39;before&#39; or &#39;after&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div#second'</span>);
$(<span class="string">'first'</span>).grab(mySecondElement);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div#second'</span>);
myFirstElement.grab(mySecondElement, <span class="string">'top'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="#Element:adopt" alt="Element:adopt">Element:adopt</a>, <a href="#Element:inject" alt="Element:inject">Element:inject</a>, <a href="#Element:wraps" alt="Element:wraps">Element:wraps</a></p>
<div class="heading clearfix"><h2><a href="#Element:adopt" name="Element:adopt">Element Method: adopt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but allows multiple elements to be adopted and only appended at the bottom.</p>

<p>Inserts the passed element(s) inside the Element (which will then become the parent element).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myParent.adopt(el[, others]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el - (<em>mixed</em>) The id of an element, an Element, or an array of elements.</li>
<li>others - (<em>mixed</em>, optional) One or more additional Elements separated by a comma or as an array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myFirstElement  = <span class="keyword">new</span> Element(<span class="string">'div#first'</span>);
<span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'p#second'</span>);
<span class="keyword">var</span> myThirdElement  = <span class="keyword">new</span> Element(<span class="string">'ul#third'</span>);
<span class="keyword">var</span> myFourthElement = <span class="keyword">new</span> Element(<span class="string">'a#fourth'</span>);

<span class="keyword">var</span> myParentElement = <span class="keyword">new</span> Element(<span class="string">'div#parent'</span>);

myFirstElement.adopt(mySecondElement);
mySecondElement.adopt(myThirdElement, myFourthElement);
myParentElement.adopt([myFirstElement, <span class="keyword">new</span> Element(<span class="string">'span#another'</span>)]);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"parent"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"third"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"fourth"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"another"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="#Element:grab" alt="Element:grab">Element:grab</a>, <a href="#Element:inject" alt="Element:inject">Element:inject</a>, <a href="#Element:wraps" alt="Element:wraps">Element:wraps</a></p>
<div class="heading clearfix"><h2><a href="#Element:wraps" name="Element:wraps">Element Method: wraps </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but replaces the element in its place, and then appends the replaced element in the location specified inside the this element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myParent.wraps(el[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el - (<em>mixed</em>) The id of an element or an Element.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The place to insert the passed in element. Can be &#39;top&#39; or &#39;bottom&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div#second'</span>).wraps(<span class="string">'first'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'second'</span>).wraps(<span class="string">'first'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'second'</span>).wraps(<span class="string">'first'</span>, <span class="string">'top'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:appendHTML" name="Element:appendHTML">Element Method: appendHTML </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but instead of accepting an id or an element, it only accepts an HTML string.
The HTML string will be parsed to create new DOM elements, and then injected relative to the element from where the method
was called.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.appendHTML(html[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>html - (<em>string</em>) The HTML string to append.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The position to inject the text to. Values accepted are &#39;top&#39;, &#39;bottom&#39;, &#39;before&#39; and &#39;after&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) The current Element instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).appendHTML(<span class="string">' &lt;strong&gt;Howdy.&lt;/strong&gt;'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey. <span class="tag">&lt;<span class="title">strong</span>&gt;</span>Howdy.<span class="tag">&lt;/<span class="title">strong</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method does <em>not</em> use the <code>innerHTML</code> property of an element but instead creates elements
directly before injecting them. Thus, it is safe to use in cases where you don&#39;t want to destroy
any descendant elements already present in the parent.</li>
<li>This method uses <code>insertAdjacentHTML</code> when available.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/DOM/Element.insertAdjacentHTML" alt="MDN Element:insertAdjacentHTML">MDN Element:insertAdjacentHTML</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:appendText" name="Element:appendText">Element Method: appendText </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but instead of accepting an id or an element, it only accepts text.
A text node will be created inside this Element, in either the top or bottom position.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.appendText(text[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>text  - (<em>string</em>) The text to append.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The position to inject the text to. Values accepted are &#39;top&#39;, &#39;bottom&#39;, &#39;before&#39; and &#39;after&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) The current Element instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).appendText(<span class="string">' Howdy.'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey. Howdy.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:dispose" name="Element:dispose">Element Method: dispose </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes the Element from the DOM.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> removedElement = myElement.dispose();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element. Useful to always grab the return from this function, as the element could be <a href="#Element:inject" alt="injected">injected</a> back.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).dispose();</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/En/DOM/Node.removeChild" alt="MDN Element:removeChild">MDN Element:removeChild</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:clone" name="Element:clone">Element Method: clone </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Clones the Element and returns the cloned one.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> copy = myElement.clone([contents, keepid]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>contents - (<em>boolean</em>, optional: defaults to true) When set to false the Element&#39;s contents are not cloned.</li>
<li>keepid - (<em>boolean</em>, optional: defaults to false) When true the cloned Element keeps the id attribute, if present. Same goes for any of the cloned childNodes.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) The cloned Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>ciao<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="comment">// clones the Element and appends the clone after the Element.</span>
<span class="keyword">var</span> clone = $(<span class="string">'myElement'</span>).clone().inject(<span class="string">'myElement'</span>,<span class="string">'after'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>ciao<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>ciao<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<ul>
<li>The returned Element does not have attached events. To clone the events use <a href="/Element/docs/1.5.1/Element/Element.Event#Element:cloneEvents" alt="Element:cloneEvents">Element:cloneEvents</a>.</li>
<li>Values stored in Element.Storage are not cloned.</li>
<li>The clone element and its children are stripped of ids, unless otherwise specified by the keepid parameter.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/Element/docs/1.5.1/Element/Element.Event#Element:cloneEvents" alt="Element:cloneEvents">Element:cloneEvents</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:replaces" name="Element:replaces">Element Method: replaces </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Replaces the passed Element with Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> element = myElement.replaces(el);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el - (<em>mixed</em>) A string id representing the Element to be replaced, or an Element reference.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myNewElement'</span>).replaces($(<span class="string">'myOldElement'</span>));
<span class="comment">//$('myOldElement') is gone, and $('myNewElement') is in its place.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/En/DOM/Node.replaceChild" alt="MDN Element:replaceChild">MDN Element:replaceChild</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:hasClass" name="Element:hasClass">Element Method: hasClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Tests the Element to see if it has the passed in className.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = myElement.hasClass(className);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>className - (<em>string</em>) The class name to test.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) Returns true if the Element has the class, otherwise false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).hasClass(<span class="string">'testClass'</span>); <span class="comment">// returns true</span></code></pre><div class="heading clearfix"><h2><a href="#Element:addClass" name="Element:addClass">Element Method: addClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds the passed in class to the Element, if the Element doesnt already have it.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addClass(className);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>className - (<em>string</em>) The class name to add.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addClass(<span class="string">'newClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass newClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:removeClass" name="Element:removeClass">Element Method: removeClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works like <a href="#Element:addClass" alt="Element:addClass">Element:addClass</a>, but removes the class from the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeClass(className);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>className - (<em>string</em>) The class name to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass newClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).removeClass(<span class="string">'newClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:toggleClass" name="Element:toggleClass">Element Method: toggleClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds or removes the passed in class name to the Element, depending on whether or not it&#39;s already present.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.toggleClass(className, force);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>className - (<em>string</em>) The class to add or remove.</li>
<li>force - (<em>boolean</em>, optional) Force the class to be either added or removed</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"myClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).toggleClass(<span class="string">'myClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).toggleClass(<span class="string">'myClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"myClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:getPrevious" name="Element:getPrevious">Element Method: getPrevious </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the previousSibling of the Element (excluding text nodes).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> previousSibling = myElement.getPrevious([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - (<em>string</em>, optional): A tag name to match the the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The previous sibling Element or null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getAllPrevious" name="Element:getAllPrevious">Element Method: getAllPrevious </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Like <a href="#Element:getPrevious" alt="Element:getPrevious">Element:getPrevious</a>, but returns a collection of all the matched previousSiblings.</p>
<div class="heading clearfix"><h2><a href="#Element:getNext" name="Element:getNext">Element Method: getNext </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>As <a href="#Element:getPrevious" alt="Element:getPrevious">Element:getPrevious</a>, but tries to find the nextSibling (excluding text nodes).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> nextSibling = myElement.getNext([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - (<em>string</em>, optional): A comma seperated list of tag names to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The next sibling Element or null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getAllNext" name="Element:getAllNext">Element Method: getAllNext </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Like Element.getNext, but returns a collection of all the matched nextSiblings.</p>
<div class="heading clearfix"><h2><a href="#Element:getFirst" name="Element:getFirst">Element Method: getFirst </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the first element that matches the passed in expression.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> firstElement = myElement.getFirst([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - (<em>string</em>, optional): A full CSS selector to match the found element(s) with.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The first found element or null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getLast" name="Element:getLast">Element Method: getLast </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the last element that matches the passed in expression.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> lastElement = myElement.getLast([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - (<em>string</em>, optional): A full CSS selector to match the found element(s) with.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The last found element, or returns null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getParent" name="Element:getParent">Element Method: getParent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Works as <a href="#Element:getPrevious" alt="Element:getPrevious">Element:getPrevious</a>, but tries to find the parentNode.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> parent = myElement.getParent([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - (<em>string</em>, optional): A tag name to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The target Element&#39;s parent or null if no matching parent is found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getParents" name="Element:getParents">Element Method: getParents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Like <a href="#Element:getParent" alt="Element:getParent">Element:getParent</a>, but returns a collection of all the matched parentNodes up the tree.</p>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) If no matching parents are found, an empty array is returned.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getSiblings" name="Element:getSiblings">Element Method: getSiblings </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Like <a href="#Element:getAllPrevious" alt="Element:getAllPrevious">Element:getAllPrevious</a> but returns all Element&#39;s previous and next siblings (excluding text nodes). Returns as <a href="#Elements" alt="Elements">Elements</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> siblings = myElement.getSiblings([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - (<em>string</em>, optional): A tag name to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) A <a href="#Elements" alt="Elements">Elements</a> array with all of the Element&#39;s siblings, except the text nodes.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getChildren" name="Element:getChildren">Element Method: getChildren </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns all the Element&#39;s children (excluding text nodes). Returns as <a href="#Elements" alt="Elements">Elements</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> children = myElement.getChildren([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>match - (<em>string</em>, optional): A tag name to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) A <a href="#Elements" alt="Elements">Elements</a> array with all of the Element&#39;s children, except the text nodes.</li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div>
<p>The difference between the methods <em>getChildren</em> and <em>getElements</em> is that getChildren will only return its direct children while getElements searches for all the Elements in any depth.</p>
<div class="heading clearfix"><h2><a href="#Element:empty" name="Element:empty">Element Method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Empties an Element of all its children.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.empty();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).empty();</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This method does not garbage college the children. Use <a href="#Element:destroy" alt="Element:destroy">Element:destroy</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Element:destroy" name="Element:destroy">Element Method: destroy </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes the Element and its children from the DOM and prepares them for garbage collection.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.destroy();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>null</em>)</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:toQueryString" name="Element:toQueryString">Element Method: toQueryString </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Reads the child inputs of the Element and generates a query string based on their values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> query = myElement.toQueryString();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A string representation of a all the input Elements&#39; names and values.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"myForm"</span> <span class="attribute">action</span>=<span class="value">"submit.php"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"bob@bob.com"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"zipCode"</span> <span class="attribute">value</span>=<span class="value">"90210"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myForm'</span>).toQueryString(); <span class="comment">// returns "email=bob@bob.com&amp;zipCode=90210".</span></code></pre><div class="heading clearfix"><h2><a href="#Element:getSelected" name="Element:getSelected">Element Method: getSelected </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the selected options of a select element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> selected = mySelect.getSelected();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) An array of the selected elements.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"country-select"</span> <span class="attribute">name</span>=<span class="value">"country"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"US"</span>&gt;</span>United States<span class="tag">&lt;/<span class="title">option
</span>    &lt;<span class="attribute">option</span> <span class="attribute">value</span> =<span class="value">"IT"</span>&gt;</span>Italy<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'country-select'</span>).getSelected(); <span class="comment">// returns whatever the user selected.</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This method returns an array, regardless of the multiple attribute of the select element.
If the select is single, it will return an array with only one item.</p>
<div class="heading clearfix"><h2><a href="#Element:getProperty" name="Element:getProperty">Element Method: getProperty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns a single element attribute.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myProp = myElement.getProperty(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ul>
<li>property - (<em>string</em>) The property to be retrieved.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A string containing the Element&#39;s requested property.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"mootools.png"</span> <span class="attribute">title</span>=<span class="value">"MooTools, the compact JavaScript framework"</span> <span class="attribute">alt</span>=<span class="value">""</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> imgProps = $(<span class="string">'myImage'</span>).getProperty(<span class="string">'src'</span>); <span class="comment">// returns: 'mootools.png'.</span></code></pre><div class="heading clearfix"><h2><a href="#Element:getProperties" name="Element:getProperties">Element Method: getProperties </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets multiple element attributes.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myProps = myElement.getProperties(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ul>
<li>properties - (<em>strings</em>) Any number of properties to be retrieved.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An object containing all of the Element&#39;s requested properties.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"mootools.png"</span> <span class="attribute">title</span>=<span class="value">"MooTools, the compact JavaScript framework"</span> <span class="attribute">alt</span>=<span class="value">""</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> imgProps = $(<span class="string">'myImage'</span>).getProperties(<span class="string">'id'</span>, <span class="string">'src'</span>, <span class="string">'title'</span>, <span class="string">'alt'</span>);
<span class="comment">// returns: { id: 'myImage', src: 'mootools.png', title: 'MooTools, the compact JavaScript framework', alt: '' }</span></code></pre><div class="heading clearfix"><h2><a href="#Element:setProperty" name="Element:setProperty">Element Method: setProperty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sets an attribute or special property for this Element.</p>
<div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>) The property to assign the value passed in.</li>
<li>value - (<em>mixed</em>) The value to assign to the property passed in.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) - This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myImage'</span>).setProperty(<span class="string">'src'</span>, <span class="string">'mootools.png'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"mootools.png"</span> /&gt;</span></code></pre><div class="heading clearfix"><h3>Note</h3></div>
<ul>
<li>Whenever using <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a> to set an attribute, pass in the lowercase, simplified form of the property. For example:

<ul>
<li>use &#39;for&#39;, not &#39;htmlFor&#39;,</li>
<li>use &#39;class&#39;, not &#39;className&#39;</li>
<li>use &#39;frameborder&#39;, not &#39;frameBorder&#39;</li>
<li>etc.</li>
</ul></li>
<li>When setting the <code>src</code> property for an image file, be sure to remove the <code>width</code> and <code>height</code> attribute (use <code>Element.removeAttribute</code>). IE7, and less, set and freeze the <code>width</code> and <code>height</code> of an image if previously specified.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:setProperties" name="Element:setProperties">Element Method: setProperties </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sets numerous attributes for the Element.</p>
<div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - (<em>object</em>) An object with key/value pairs.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myImage'</span>).setProperties({
    src: <span class="string">'whatever.gif'</span>,
    alt: <span class="string">'whatever dude'</span>
});</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"whatever.gif"</span> <span class="attribute">alt</span>=<span class="value">"whatever dude"</span> /&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:removeProperty" name="Element:removeProperty">Element Method: removeProperty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes an attribute from the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeProperty(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>) The attribute to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">onmousedown</span>=<span class="value">"alert('click');"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="comment">//Eww... inline JavaScript is bad! Let's get rid of it.</span>
$(<span class="string">'myAnchor'</span>).removeProperty(<span class="string">'onmousedown'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:removeProperties" name="Element:removeProperties">Element Method: removeProperties </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes numerous attributes from the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeProperties(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - (<em>strings</em>) The attributes to remove, separated by comma.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"hello world"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myAnchor'</span>).removeProperties(<span class="string">'id'</span>, <span class="string">'href'</span>, <span class="string">'title'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:store" name="Element:store">Element Method: store </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Stores an item in the Elements Storage, linked to this Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.store(key, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>key - (<em>string</em>) The key you want to assign to the stored value.</li>
<li>value - (<em>mixed</em>) Any value you want to store.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).store(<span class="string">'someProperty'</span>, someValue);</code></pre><div class="heading clearfix"><h2><a href="#Element:retrieve" name="Element:retrieve">Element Method: retrieve </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Retrieves a value from the Elements storage.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.retrieve(key[, <span class="keyword">default</span>]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>key - (<em>string</em>) The key you want to retrieve from the storage.</li>
<li>default - (<em>mixed</em>, optional) Default value to store and return if no value is stored.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The value linked to the key.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).retrieve(<span class="string">'someProperty'</span>); <span class="comment">// returns someValue (see example above)</span></code></pre><div class="heading clearfix"><h2><a href="#Element:eliminate" name="Element:eliminate">Element Method: eliminate </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Eliminates a key from the Elements storage.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.eliminate(key);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>key - (<em>string</em>) The key you want to eliminate from the storage.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The element/window/document.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).eliminate(<span class="string">'someProperty'</span>);</code></pre><div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This Object contains the functions that respond to the first argument passed in <a href="#Element:get" alt="Element:get">Element:get</a>, <a href="#Element:set" alt="Element:set">Element:set</a> and <a href="#Element:erase" alt="Element:erase">Element:erase</a>.</p>
<div class="heading clearfix"><h3>Adding a Custom Element Property</h3></div><pre><code class="javascript">Element.Properties.disabled = {

    get: <span class="keyword">function</span>(){
        <span class="keyword">return</span> <span class="keyword">this</span>.disabled;
    },

    set: <span class="keyword">function</span>(value){
        <span class="keyword">this</span>.disabled = !!value;
        <span class="keyword">this</span>.setAttribute(<span class="string">'disabled'</span>, !!value);
    }

};</code></pre><div class="heading clearfix"><h3>Using a Custom Element Property</h3></div><pre><code class="javascript"><span class="comment">// gets the "disabled" property</span>
$(element).get(<span class="string">'disabled'</span>);
<span class="comment">// sets the "disabled" property to true, along with the attribute</span>
$(element).set(<span class="string">'disabled'</span>, <span class="literal">true</span>);</code></pre><div class="heading clearfix"><h3>Using an Object:</h3></div>
<p>Additionally, you can access these custom getters and setters using an object as the parameter for the <a href="#Element:set" alt="set">set</a> method.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript"><span class="comment">// using set:</span>
$(divElement).set({html: <span class="string">'&lt;p&gt;Hello &lt;em&gt;People&lt;/em&gt;!&lt;/p&gt;'</span>, style: <span class="string">'background:red'</span>});

<span class="comment">// for new Elements (works the same as set):</span>
<span class="keyword">new</span> Element(<span class="string">'input'</span>, {type: <span class="string">'checkbox'</span>, checked: <span class="literal">true</span>, disabled: <span class="literal">true</span>});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Automatically returns the element for setters.</li>
<li>Since MooTools 1.3 this is a native JavaScript Object and not an instance of the deprecated Hash</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element-Properties:html" name="Element-Properties:html">Element Property: html </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter:</h3></div>
<p>Sets the innerHTML of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">myElement.set(<span class="string">'html'</span>, html);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>html - (<em>string</em>) The new content as HTML string.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'html'</span>, <span class="string">'&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Getter:</h3></div>
<p>Returns the inner HTML of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">myElement.get(<span class="string">'html'</span>);</code></pre><div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>text</em>) This Element&#39;s innerHTML.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element-Properties:text" name="Element-Properties:text">Element Property: text </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter:</h3></div>
<p>Sets the inner text of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">myElement.set(<span class="string">'text'</span>, text);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>text - (<em>string</em>) The new text content for the Element.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'text'</span>, <span class="string">'some text'</span>);
<span class="comment">// the text of myElement is now 'some text'.</span></code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>some text<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Getter:</h3></div>
<p>Gets the inner text of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myText = myElement.get(<span class="string">'text'</span>);</code></pre><div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>string</em>) The text of the Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>my text<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myText = $(<span class="string">'myElement'</span>).get(<span class="string">'text'</span>); <span class="comment">// myText = 'my text'.</span></code></pre><div class="heading clearfix"><h2><a href="#Element-Properties:tag" name="Element-Properties:tag">Element Property: tag </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Getter:</h3></div>
<p>Returns the tag name of the Element in lower case.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myTag = myElement.get(<span class="string">'tag'</span>);</code></pre><div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>string</em>) The tag name in lower case.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myTag = $(<span class="string">'myImage'</span>).get(<span class="string">'tag'</span>); <span class="comment">// myTag = 'img'</span></code></pre><div class="heading clearfix"><h1><a href="#IFrame" name="IFrame">Type: IFrame </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Custom Type to create and easily work with IFrames.</p>
<div class="heading clearfix"><h2><a href="#IFrame:constructor" name="IFrame:constructor">IFrame Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates an IFrame HTML Element and extends its window and document with MooTools.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myIFrame = <span class="keyword">new</span> IFrame([el][, props]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>el - (<em>mixed</em>, optional) The id of the IFrame to be converted, or the actual IFrame element. If its not passed, a new IFrame will be created (default).</li>
<li>props - (<em>object</em>, optional) The properties to be applied to the new IFrame. Same as <a href="#Element:constructor" alt="Element:constructor">Element:constructor</a> props argument.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) A new IFrame HTML Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myIFrame = <span class="keyword">new</span> IFrame({

    src: <span class="string">'http://mootools.net/'</span>,

    styles: {
        width: <span class="number">800</span>,
        height: <span class="number">600</span>,
        border: <span class="string">'1px solid #ccc'</span>
    },

    events: {

        mouseenter: <span class="keyword">function</span>(){
            alert(<span class="string">'Welcome aboard.'</span>);
        },

        mouseleave: <span class="keyword">function</span>(){
            alert(<span class="string">'Goodbye!'</span>);
        },

        load: <span class="keyword">function</span>(){
            alert(<span class="string">'The iframe has finished loading.'</span>);
        }

    }

});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>If the IFrame already exists and has a different name than id, the name will be made the same as the id.</li>
<li>An IFrame&#39;s window and document will not be extended with MooTools methods.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Elements" name="Elements">Type: Elements </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The Elements class allows <a href="#Element" alt="Element">Element</a> methods to work on an <a href="#Elements" alt="Elements">Elements</a> array, as well as <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> Methods.</p>
<div class="heading clearfix"><h2><a href="#Elements:constructor" name="Elements:constructor">Elements Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElements = <span class="keyword">new</span> Elements(elements[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>elements - (<em>mixed</em>) An array of elements or an HTMLCollection Object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) An array-like Elements collection with the <a href="#Element" alt="Element">Element</a>, <a href="#Elements" alt="Elements">Elements</a> and <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> methods.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Set Every Paragraph&#39;s Color to Red:</h4></div><pre><code class="javascript">$$(<span class="string">'p'</span>).each(<span class="keyword">function</span>(el){
    el.setStyle(<span class="string">'color'</span>, <span class="string">'red'</span>);
});

<span class="comment">// Because $$('myselector') also accepts Element methods, the below</span>
<span class="comment">// example has the same effect as the one above.</span>
$$(<span class="string">'p'</span>).setStyle(<span class="string">'color'</span>, <span class="string">'red'</span>);</code></pre><div class="heading clearfix"><h4>Create Elements From an Array:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myElements = <span class="keyword">new</span> Elements([<span class="string">'myElementID'</span>, $(<span class="string">'myElement'</span>), <span class="string">'myElementID2'</span>, document.getElementById(<span class="string">'myElementID3'</span>)]);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>In MooTools, every DOM function which returns a collection of nodes (such as <a href="#Window:dollars" alt="$$">$$</a>) returns the nodes as instances of Elements.</li>
<li>Because Elements is an array-like-object, it accepts all the <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> methods, while giving precedence to <a href="#Element" alt="Element">Element</a> and <a href="#Elements" alt="Elements">Elements</a> methods.</li>
<li>Every node of the Elements instance has all the <a href="#Element" alt="Element">Element</a> methods.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Window:dollars" alt="$$">$$</a>, <a href="#Window:dollar" alt="$">$</a>, <a href="#Element" alt="Element">Element</a>, <a href="#Elements" alt="Elements">Elements</a>, <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:append" name="Elements:append">Elements Method: append </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds the items of the collection to this <a href="#Elements" alt="Elements">Elements</a> array, and return the this array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">elements.append(collection);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>collection - (<em>array</em>) <a href="#Elements" alt="Elements">Elements</a> array or an array of HTML Elements.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) This <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method doesn&#39;t process (<a href="#Window:document-id" alt="document:id">document:id</a> or filters) the items of the array.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:concat" name="Elements:concat">Elements Method: concat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds the element, or array of Elements, to this <a href="#Elements" alt="Elements">Elements</a> array, and returns a new <a href="#Elements" alt="Elements">Elements</a> array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> newElements = elements.concat(element[, list, id, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>element - (<em>mixed</em>) An HTML Element, or a string id.</li>
<li>list, id, ... - (<em>mixed</em>) Additional <a href="#Elements" alt="Elements">Elements</a>, array of ids, or string ids.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) A new <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:empty" name="Elements:empty">Elements Method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes every item from the <a href="#Elements" alt="Elements">Elements</a> array, and the empty array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">elements.empty();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) This empty <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div>
<p><code>Elements.empty</code> does not destroy the elements inside. As best practice, always destroy your elements if they&#39;re no longer in use. For example:</p>
<pre><code class="javascript">$$(<span class="string">'div'</span>).destroy().empty();</code></pre><div class="heading clearfix"><h3>See Also</h3></div>
<ul>
<li><a href="#Element:destroy" alt="Element:destroy">Element:destroy</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:filter" name="Elements:filter">Elements Method: filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Filters a collection of elements by a given css selector, or filtering function like <a href="/core/docs/1.5.1/Types/Array#Array:filter" alt="Array:filter">Array:filter</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> filteredElements = elements.filter(selector);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>selector - (<em>mixed</em>) A single CSS selector, or filtering function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) A subset of this <a href="#Elements" alt="Elements">Elements</a> instance.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:push" name="Elements:push">Elements Method: push </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds the element, or elements, to the end of this <a href="#Elements" alt="Elements">Elements</a> array and returns the length of the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> length = elements.push(element[, id, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>element - (<em>mixed</em>) An HTML Element, or a string id.</li>
<li>id, ... - (<em>mixed</em>) Additional HTML Element, or string ids.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The new length of the <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:unshift" name="Elements:unshift">Elements Method: unshift </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Adds the element, or elements, to the front of this <a href="#Elements" alt="Elements">Elements</a> array and returns the length of the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> length = elements.unshift(element[, id, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>element - (<em>mixed</em>) An HTML Element, or a string id.</li>
<li>id, ... - (<em>mixed</em>) Additional HTML Element, or string ids.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The new length of the <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:hasChild" name="Deprecated-Functions:hasChild">Element Method: hasChild </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:contains" alt="Element:contains">Element:contains</a> instead.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'element1'</span>);
<span class="keyword">var</span> myElement2 = document.id(<span class="string">'element2'</span>);
myElement !== myElement2 &amp;&amp; myElement.contains(element2);

<span class="comment">// could be implemented as:</span>
Element.implement(<span class="string">'hasChild'</span>, <span class="keyword">function</span>(element){
    <span class="keyword">return</span> <span class="keyword">this</span> !== element &amp;&amp; <span class="keyword">this</span>.contains(element);
});</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectBefore" name="Deprecated-Functions:injectBefore">Element Method: injectBefore </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectAfter" name="Deprecated-Functions:injectAfter">Element Method: injectAfter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectBottom" name="Deprecated-Functions:injectBottom">Element Method: injectBottom </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectTop" name="Deprecated-Functions:injectTop">Element Method: injectTop </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectInside" name="Deprecated-Functions:injectInside">Element Method: injectInside </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabBefore" name="Deprecated-Functions:grabBefore">Element Method: grabBefore </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabAfter" name="Deprecated-Functions:grabAfter">Element Method: grabAfter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabBottom" name="Deprecated-Functions:grabBottom">Element Method: grabBottom </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabTop" name="Deprecated-Functions:grabTop">Element Method: grabTop </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabInside" name="Deprecated-Functions:grabInside">Element Method: grabInside </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:extend" name="Deprecated-Functions:extend">Elements Method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This method has been deprecated. Use <a href="#Elements:append" alt="Elements:append">Elements:append</a> instead.</p>
+R*****<div class="heading clearfix"><h1><a href="#Window" name="Window">Type: Window </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>The following functions are treated as Window methods.</p>
<div class="heading clearfix"><h2><a href="#Window:document-id" name="Window:document-id">Function: document.id </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The document.id function has a dual purpose: Getting the element by its id, and making an element in Internet Explorer &quot;grab&quot; all the <a href="#Element" alt="Element">Element</a> methods.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(el);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el - The Element to be extended. Can be one of the following types:<ul>
<li>(<em>element</em>) The element will be extended if it is not already.</li>
<li>(<em>string</em>) A string containing the id of the DOM element desired.</li>
<li>(<em>object</em>) If the object has a toElement method, toElement will be called to get the Element.</li>
</ul>
</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) A DOM element.</li>
<li>(<em>null</em>) Null if no matching id was found or if toElement did not return an element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Get a DOM Element by ID:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'myElement'</span>);</code></pre><div class="heading clearfix"><h4>Get a DOM Element by reference:</h4></div><pre><code class="javascript"><span class="keyword">var</span> div = document.getElementById(<span class="string">'myElement'</span>);
div = document.id(div); <span class="comment">// the element with all the Element methods applied.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is useful when it&#39;s unclear if working with an actual element or an id.  It also serves as a shorthand for document.getElementById().</li>
<li>In Internet Explorer, the <a href="#Element" alt="Element">Element</a> is extended the first time document.id is called on it, and all the <a href="#Element" alt="Element">Element</a> Methods become available.</li>
<li>Browsers with native HTMLElement support, such as Safari, Firefox, and Opera, apply all the <a href="#Element" alt="Element">Element</a> Methods to every DOM element automatically.</li>
<li>Because MooTools detects if an element needs to be extended or not, this function may be called on the same Element many times with no ill effects.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Window:dollar" name="Window:dollar">Function: $ </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The dollar function is an alias for <a href="#Window:document-id" alt="document:id">document:id</a> if the $ variable is not set already.
However it is not recommended to use more frameworks, the $ variable can be set by another framework or script. MooTools will detect this and determine if it will set the $ function so it will not be overwritten.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>);
<span class="keyword">var</span> myElement2 = document.id(<span class="string">'myElement'</span>);

myElement == myElement2; <span class="comment">// returns true</span>


(<span class="keyword">function</span>($){

    <span class="comment">// Now you can use $ safely in this closure</span>

})(document.id)</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li>MooTools Blogpost: <a href="http://mootools.net/blog/2009/06/22/the-dollar-safe-mode/" alt="The Dollar Safe Mode">The Dollar Safe Mode</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Window:dollars" name="Window:dollars">Function: $$ </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Selects and extends DOM elements. Return an Elements instance.
The Element instance returned is an array-like object, supporting every <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> method and every <a href="#Element" alt="Element">Element</a> method.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElements = $$(argument);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ul>
<li>selector - (<em>string</em>) A CSS selector</li>
<li>elements - (<em>elements</em>), (<em>collection</em>) or (<em>array</em>) An enumerable list of elements</li>
<li>element, element - (<em>element</em>) any number of elements as arguments</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>elements</em>) - An array-like Elements collection of all the DOM elements matched, extended with <a href="#Window:document-id" alt="document:id">document:id</a>.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Get Elements by Their Tag Names:</h4></div><pre><code class="javascript">$$(<span class="string">'a'</span>); <span class="comment">// returns all anchor elements in the page.</span></code></pre><div class="heading clearfix"><h4>Get an Elements instance by passing multiple elements:</h4></div><pre><code class="javascript">$$(element1, element2, element3); <span class="comment">// returns an Elements instance containing these 3 elements.</span></code></pre><div class="heading clearfix"><h4>Convert any array or collection of elements to an Elements instance:</h4></div><pre><code class="javascript">$$([element1, element2, element3]); <span class="comment">// returns an Elements instance containing these 3 elements.</span>
$$(document.getElementsByTagName(<span class="string">'a'</span>)); <span class="comment">// returns an Elements instance containing the result of the getElementsByTagName call.</span></code></pre><div class="heading clearfix"><h4>Using CSS Selectors:</h4></div><pre><code class="javascript">$$(<span class="string">'#myElement'</span>); <span class="comment">// returns an Elements instance containing only the element with the id 'myElement'.</span>
$$(<span class="string">'#myElement a.myClass'</span>); <span class="comment">// returns an Elements instance of all anchor tags with the class 'myClass' within the DOM element with id 'myElement'.</span>
$$(<span class="string">'a, b'</span>); <span class="comment">// returns an array of all anchor and bold elements in the page.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Since MooTools 1.3 this function does not accept multiple collections or multiple strings as arguments.</li>
<li>If an expression doesn&#39;t find any elements, an empty Elements instance will be returned.</li>
<li>The return type of element methods run through <a href="#Window:dollars" alt="$$">$$</a> is always an Elements instance, regardless of the amount of results.</li>
<li>Default Selectors supported are the same as you can find on <a href="http://www.w3.org/TR/css3-selectors/#selectors" alt="W3C CSS3 selectors">W3C CSS3 selectors</a>.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Custom Type to allow all of its methods to be used with any extended DOM Element.</p>
<div class="heading clearfix"><h2><a href="#Element:constructor" name="Element:constructor">Element Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates a new Element of the type passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myEl = <span class="keyword">new</span> Element(element[, properties]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>element - (<em>mixed</em>) The tag name for the Element to be created or an actual DOM element or a CSS selector.</li>
<li>properties - (<em>object</em>, optional) Calls the Single Argument version of <a href="#Element:set" alt="Element:set">Element:set</a> with the properties object passed in.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) A new MooTools extended HTML Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// Creating an new anchor with an Object</span>
<span class="keyword">var</span> myAnchor = <span class="keyword">new</span> Element(<span class="string">'a'</span>, {
    href: <span class="string">'http://mootools.net'</span>,
    <span class="string">'class'</span>: <span class="string">'myClass'</span>,
    html: <span class="string">'Click me!'</span>,
    styles: {
        display: <span class="string">'block'</span>,
        border: <span class="string">'1px solid black'</span>
    },
    events: {
        click: <span class="keyword">function</span>(){
            alert(<span class="string">'clicked'</span>);
        },
        mouseover: <span class="keyword">function</span>(){
            alert(<span class="string">'mouseovered'</span>);
        }
    }
});

<span class="comment">// Using Selectors</span>
<span class="keyword">var</span> myNewElement = <span class="keyword">new</span> Element(<span class="string">'a.myClass'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>Because the element name is parsed as a CSS selector, colons in namespaced tags have to be escaped. So <code>new Element(&#39;fb\:name&#39;)</code> becomes <code>&lt;fb:name&gt;</code>.</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Window:dollar" alt="$">$</a>, <a href="#Element:set" alt="Element:set">Element:set</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getElement" name="Element:getElement">Element Method: getElement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the first descendant element whose tag name matches the tag provided. CSS selectors may also be passed.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = myElement.getElement(tag);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>tag - (<em>string</em>) Tag name of the element to find or a CSS Selector.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) If a match is found, the Element will be returned. Otherwise, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> firstDiv = $(document.body).getElement(<span class="string">'div'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is also available for Document instances.</li>
<li>Default Selectors supported are the same as you can find on <a href="http://www.w3.org/TR/css3-selectors/#selectors" alt="W3C CSS3 selectors">W3C CSS3 selectors</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getElements" name="Element:getElements">Element Method: getElements </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Collects all descendant elements whose tag name matches the tag provided. CSS selectors may also be passed.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElements = myElement.getElements(tag);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>tag - (<em>string</em>) String of the tag to match  or a CSS Selector.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) An <a href="#Elements" alt="Elements">Elements</a> array of all matched Elements.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> allAnchors = $(document.body).getElements(<span class="string">'a'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is also available for Document instances.</li>
<li>Default Selectors supported are the same as you can find on <a href="http://www.w3.org/TR/css3-selectors/#selectors" alt="W3C CSS3 selectors">W3C CSS3 selectors</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getElementById" name="Element:getElementById">Element Method: getElementById </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the element with the specified id found inside the current Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = anElement.getElementById(id);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>id - (<em>string</em>) The ID of the Element to find.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) If a match is found, returns that Element. Otherwise, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myChild = $(<span class="string">'myParent'</span>).getElementById(<span class="string">'myChild'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is not provided for Document instances as document.getElementById is provided natively.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:set" name="Element:set">Element Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This is a &quot;dynamic arguments&quot; method. Properties passed in can be any of the &#39;set&#39; properties in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.set(arguments);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ul>
<li>Two Arguments (property, value)<ol>
<li>property - (<em>string</em>) The string key from the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object representing the property to set.</li>
<li>value - (<em>mixed</em>) The value to set for the specified property.</li>
</ol>
</li>
<li>One Argument (properties)<ol>
<li>properties - (<em>object</em>) Object with its keys/value pairs representing the properties and values to set for the Element (as described below).</li>
</ol>
</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>With Property and Value:</h4></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'text'</span>, <span class="string">'text goes here'</span>);
$(<span class="string">'myElement'</span>).set(<span class="string">'class'</span>, <span class="string">'active'</span>);
<span class="comment">// the 'styles' property passes the object to Element:setStyles.</span>
<span class="keyword">var</span> body = $(document.body).set(<span class="string">'styles'</span>, {
    font: <span class="string">'12px Arial'</span>,
    color: <span class="string">'blue'</span>
});</code></pre><div class="heading clearfix"><h4>With an Object:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myElement = $(<span class="string">'myElement'</span>).set({
    <span class="comment">// the 'styles' property passes the object to Element:setStyles.</span>
    styles: {
        font: <span class="string">'12px Arial'</span>,
        color: <span class="string">'blue'</span>,
        border: <span class="string">'1px solid #f00'</span>
    },
    <span class="comment">// the 'events' property passes the object to Element:addEvents.</span>
    events: {
        click: <span class="keyword">function</span>(){ alert(<span class="string">'click'</span>); },
        mouseover: <span class="keyword">function</span>(){ <span class="keyword">this</span>.addClass(<span class="string">'over'</span>); }
    },
    <span class="comment">//Any other property uses Element:setProperty.</span>
    id: <span class="string">'documentBody'</span>
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>All the property arguments are passed to the corresponding method of the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</li>
<li>If no matching property is found in <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, it falls back to <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a>.</li>
<li>Whenever using <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a> to set an attribute, pass in the lowercase, simplified form of the property. For example:<ul>
<li>use &#39;for&#39;, not &#39;htmlFor&#39;,</li>
<li>use &#39;class&#39;, not &#39;className&#39;</li>
<li>use &#39;frameborder&#39;, not &#39;frameBorder&#39;</li>
<li>etc.</li>
</ul>
</li>
<li>In IE8 or lower, it is not possible to set <code>type</code> multiple times. It will throw an error.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element" alt="Element">Element</a>, <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a>, <a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvents" alt="Element:addEvents">Element:addEvents</a>, <a href="/core/docs/1.5.1/Element/Element.Style#Element:setStyles" alt="Element:setStyles">Element:setStyles</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:get" name="Element:get">Element Method: get </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This is a &quot;dynamic arguments&quot; method. Properties passed in can be any of the &#39;get&#39; properties in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.get(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>) The string key from the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object representing the property to get.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The result of calling the corresponding &#39;get&#39; function in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Using Custom Getters:</h4></div><pre><code class="javascript"><span class="keyword">var</span> tag = $(<span class="string">'myDiv'</span>).get(<span class="string">'tag'</span>); <span class="comment">// returns "div".</span></code></pre><div class="heading clearfix"><h4>Fallback to Element Attributes:</h4></div><pre><code class="javascript"><span class="keyword">var</span> id = $(<span class="string">'myDiv'</span>).get(<span class="string">'id'</span>); <span class="comment">// returns "myDiv".</span>
<span class="keyword">var</span> value = $(<span class="string">'myInput'</span>).get(<span class="string">'value'</span>); <span class="comment">// returns the myInput element's value.</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>If the corresponding accessor doesn&#39;t exist in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object, the result of <a href="#Element:getProperty" alt="Element:getProperty">Element:getProperty</a> on the property passed in is returned.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element" alt="Element">Element</a>, <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, <a href="#Element:getProperty" alt="Element:getProperty">Element:getProperty</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:erase" name="Element:erase">Element Method: erase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This is a &quot;dynamic arguments&quot; method. Properties passed in can be any of the &#39;erase&#39; properties in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.erase(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>) The string key from the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object representing the property to erase.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The result of calling the corresponding &#39;erase&#39; function in the <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myDiv'</span>).erase(<span class="string">'id'</span>); <span class="comment">//Removes the id from myDiv.</span>
$(<span class="string">'myDiv'</span>).erase(<span class="string">'class'</span>); <span class="comment">//myDiv element no longer has any class names set.</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><ul>
<li>If the corresponding eraser doesn&#39;t exist in the  <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a> Object, <a href="#Element:removeProperty" alt="Element:removeProperty">Element:removeProperty</a> is called with the property passed in.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element" alt="Element">Element</a>, <a href="#Element-Properties" alt="Element.Properties">Element.Properties</a>, <a href="#Element:removeProperty" alt="Element:removeProperty">Element:removeProperty</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:match" name="Element:match">Element Method: match </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Tests this Element to see if it matches the argument passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.match(match);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - can be a string or element<ul>
<li>(<em>string</em>) The tag name to test against this element. Any single CSS selectors may also be passed.</li>
<li>(<em>element</em>) An element to match; returns true if this is the actual element passed in.</li>
</ul>
</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) If the element matched, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Using a Tag Name:</h4></div><pre><code class="javascript"><span class="comment">// returns true if #myDiv is a div.</span>
$(<span class="string">'myDiv'</span>).match(<span class="string">'div'</span>);</code></pre><div class="heading clearfix"><h4>Using a CSS Selector:</h4></div><pre><code class="javascript"><span class="comment">// returns true if #myDiv has the class foo and is named "bar"</span>
$(<span class="string">'myDiv'</span>).match(<span class="string">'.foo[name=bar]'</span>);</code></pre><div class="heading clearfix"><h4>Using an Element:</h4></div><pre><code class="javascript"><span class="keyword">var</span> el = $(<span class="string">'myDiv'</span>);
$(<span class="string">'myDiv'</span>).match(el); <span class="comment">// returns true</span>
$(<span class="string">'otherElement'</span>).match(el); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h2><a href="#Element:contains" name="Element:contains">Element Method: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Checks all descendants of this Element for a match.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = myElement.contains(el);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el - (<em>element</em>) The element to search for.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) Returns true if the element contains passed in Element is a child, otherwise false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"Darth_Vader"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"Luke"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">if</span> ($(<span class="string">'Darth_Vader'</span>).contains($(<span class="string">'Luke'</span>))) alert(<span class="string">'Luke, I am your father.'</span>); <span class="comment">//tan tan tannn...</span></code></pre><div class="heading clearfix"><h2><a href="#Element:inject" name="Element:inject">Element Method: inject </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Injects, or inserts, the Element at a particular place relative to the Element&#39;s children (specified by the second the argument).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.inject(el[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el    - (<em>mixed</em>) el can be the id of an element or an element.</li>
<li>where - (<em>string</em>, optional: defaults to &#39;bottom&#39;) The place to inject this Element.  Can be &#39;top&#39;, &#39;bottom&#39;, &#39;after&#39;, or &#39;before&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myFirstElement  = <span class="keyword">new</span> Element(<span class="string">'div'</span>, {id: <span class="string">'myFirstElement'</span>});
<span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div'</span>, {id: <span class="string">'mySecondElement'</span>});
<span class="keyword">var</span> myThirdElement  = <span class="keyword">new</span> Element(<span class="string">'div'</span>, {id: <span class="string">'myThirdElement'</span>});</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myThirdElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject to the bottom:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myFirstElement.inject(mySecondElement);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject to the top:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myThirdElement.inject(mySecondElement, <span class="string">'top'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myThirdElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject before:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myFirstElement.inject(mySecondElement, <span class="string">'before'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h4>Inject After:</h4></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">myFirstElement.inject(mySecondElement, <span class="string">'after'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myFirstElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="#Element:adopt" alt="Element:adopt">Element:adopt</a>, <a href="#Element:grab" alt="Element:grab">Element:grab</a>, <a href="#Element:wraps" alt="Element:wraps">Element:wraps</a></p>
<div class="heading clearfix"><h2><a href="#Element:grab" name="Element:grab">Element Method: grab </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works as <a href="#Element:inject" alt="Element:inject">Element:inject</a>, but in reverse.</p>
<p>Appends the Element at a particular place relative to the Element&#39;s children (specified by the where parameter).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.grab(el[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el - (<em>mixed</em>) el can be the id of an element or an Element.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The place to append this Element. Can be &#39;top&#39;, &#39;bottom&#39;, &#39;before&#39; or &#39;after&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div#second'</span>);
$(<span class="string">'first'</span>).grab(mySecondElement);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div#second'</span>);
myFirstElement.grab(mySecondElement, <span class="string">'top'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="#Element:adopt" alt="Element:adopt">Element:adopt</a>, <a href="#Element:inject" alt="Element:inject">Element:inject</a>, <a href="#Element:wraps" alt="Element:wraps">Element:wraps</a></p>
<div class="heading clearfix"><h2><a href="#Element:adopt" name="Element:adopt">Element Method: adopt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but allows multiple elements to be adopted and only appended at the bottom.</p>
<p>Inserts the passed element(s) inside the Element (which will then become the parent element).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myParent.adopt(el[, others]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el - (<em>mixed</em>) The id of an element, an Element, or an array of elements.</li>
<li>others - (<em>mixed</em>, optional) One or more additional Elements separated by a comma or as an array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myFirstElement  = <span class="keyword">new</span> Element(<span class="string">'div#first'</span>);
<span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'p#second'</span>);
<span class="keyword">var</span> myThirdElement  = <span class="keyword">new</span> Element(<span class="string">'ul#third'</span>);
<span class="keyword">var</span> myFourthElement = <span class="keyword">new</span> Element(<span class="string">'a#fourth'</span>);

<span class="keyword">var</span> myParentElement = <span class="keyword">new</span> Element(<span class="string">'div#parent'</span>);

myFirstElement.adopt(mySecondElement);
mySecondElement.adopt(myThirdElement, myFourthElement);
myParentElement.adopt([myFirstElement, <span class="keyword">new</span> Element(<span class="string">'span#another'</span>)]);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"parent"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"third"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"fourth"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"another"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="#Element:grab" alt="Element:grab">Element:grab</a>, <a href="#Element:inject" alt="Element:inject">Element:inject</a>, <a href="#Element:wraps" alt="Element:wraps">Element:wraps</a></p>
<div class="heading clearfix"><h2><a href="#Element:wraps" name="Element:wraps">Element Method: wraps </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but replaces the element in its place, and then appends the replaced element in the location specified inside the this element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myParent.wraps(el[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el - (<em>mixed</em>) The id of an element or an Element.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The place to insert the passed in element. Can be &#39;top&#39; or &#39;bottom&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> mySecondElement = <span class="keyword">new</span> Element(<span class="string">'div#second'</span>).wraps(<span class="string">'first'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'second'</span>).wraps(<span class="string">'first'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'second'</span>).wraps(<span class="string">'first'</span>, <span class="string">'top'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"second"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"first"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"child"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:appendHTML" name="Element:appendHTML">Element Method: appendHTML </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but instead of accepting an id or an element, it only accepts an HTML string.
The HTML string will be parsed to create new DOM elements, and then injected relative to the element from where the method
was called.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.appendHTML(html[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>html - (<em>string</em>) The HTML string to append.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The position to inject the text to. Values accepted are &#39;top&#39;, &#39;bottom&#39;, &#39;before&#39; and &#39;after&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) The current Element instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).appendHTML(<span class="string">' &lt;strong&gt;Howdy.&lt;/strong&gt;'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey. <span class="tag">&lt;<span class="title">strong</span>&gt;</span>Howdy.<span class="tag">&lt;/<span class="title">strong</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method does <em>not</em> use the <code>innerHTML</code> property of an element but instead creates elements
directly before injecting them. Thus, it is safe to use in cases where you don&#39;t want to destroy
any descendant elements already present in the parent.</li>
<li>This method uses <code>insertAdjacentHTML</code> when available.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/DOM/Element.insertAdjacentHTML" alt="MDN Element:insertAdjacentHTML">MDN Element:insertAdjacentHTML</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:appendText" name="Element:appendText">Element Method: appendText </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works like <a href="#Element:grab" alt="Element:grab">Element:grab</a>, but instead of accepting an id or an element, it only accepts text.
A text node will be created inside this Element, in either the top or bottom position.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.appendText(text[, where]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>text  - (<em>string</em>) The text to append.</li>
<li>where - (<em>string</em>, optional: default &#39;bottom&#39;) The position to inject the text to. Values accepted are &#39;top&#39;, &#39;bottom&#39;, &#39;before&#39; and &#39;after&#39;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) The current Element instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).appendText(<span class="string">' Howdy.'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>Hey. Howdy.<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:dispose" name="Element:dispose">Element Method: dispose </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes the Element from the DOM.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> removedElement = myElement.dispose();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element. Useful to always grab the return from this function, as the element could be <a href="#Element:inject" alt="injected">injected</a> back.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).dispose();</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"mySecondElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/En/DOM/Node.removeChild" alt="MDN Element:removeChild">MDN Element:removeChild</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:clone" name="Element:clone">Element Method: clone </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Clones the Element and returns the cloned one.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> copy = myElement.clone([contents, keepid]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>contents - (<em>boolean</em>, optional: defaults to true) When set to false the Element&#39;s contents are not cloned.</li>
<li>keepid - (<em>boolean</em>, optional: defaults to false) When true the cloned Element keeps the id attribute, if present. Same goes for any of the cloned childNodes.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) The cloned Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>ciao<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="comment">// clones the Element and appends the clone after the Element.</span>
<span class="keyword">var</span> clone = $(<span class="string">'myElement'</span>).clone().inject(<span class="string">'myElement'</span>,<span class="string">'after'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>ciao<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>ciao<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><ul>
<li>The returned Element does not have attached events. To clone the events use <a href="/Element/docs/1.5.1/Element/Element.Event#Element:cloneEvents" alt="Element:cloneEvents">Element:cloneEvents</a>.</li>
<li>Values stored in Element.Storage are not cloned.</li>
<li>The clone element and its children are stripped of ids, unless otherwise specified by the keepid parameter.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/Element/docs/1.5.1/Element/Element.Event#Element:cloneEvents" alt="Element:cloneEvents">Element:cloneEvents</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:replaces" name="Element:replaces">Element Method: replaces </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Replaces the passed Element with Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> element = myElement.replaces(el);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el - (<em>mixed</em>) A string id representing the Element to be replaced, or an Element reference.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myNewElement'</span>).replaces($(<span class="string">'myOldElement'</span>));
<span class="comment">//$('myOldElement') is gone, and $('myNewElement') is in its place.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/En/DOM/Node.replaceChild" alt="MDN Element:replaceChild">MDN Element:replaceChild</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:hasClass" name="Element:hasClass">Element Method: hasClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Tests the Element to see if it has the passed in className.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = myElement.hasClass(className);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>className - (<em>string</em>) The class name to test.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) Returns true if the Element has the class, otherwise false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).hasClass(<span class="string">'testClass'</span>); <span class="comment">// returns true</span></code></pre><div class="heading clearfix"><h2><a href="#Element:addClass" name="Element:addClass">Element Method: addClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds the passed in class to the Element, if the Element doesnt already have it.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.addClass(className);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>className - (<em>string</em>) The class name to add.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addClass(<span class="string">'newClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass newClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:removeClass" name="Element:removeClass">Element Method: removeClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works like <a href="#Element:addClass" alt="Element:addClass">Element:addClass</a>, but removes the class from the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeClass(className);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>className - (<em>string</em>) The class name to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass newClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).removeClass(<span class="string">'newClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"testClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:toggleClass" name="Element:toggleClass">Element Method: toggleClass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds or removes the passed in class name to the Element, depending on whether or not it&#39;s already present.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.toggleClass(className, force);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>className - (<em>string</em>) The class to add or remove.</li>
<li>force - (<em>boolean</em>, optional) Force the class to be either added or removed</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"myClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).toggleClass(<span class="string">'myClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).toggleClass(<span class="string">'myClass'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span> <span class="attribute">class</span>=<span class="value">"myClass"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:getPrevious" name="Element:getPrevious">Element Method: getPrevious </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the previousSibling of the Element (excluding text nodes).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> previousSibling = myElement.getPrevious([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - (<em>string</em>, optional): A tag name to match the the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The previous sibling Element or null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getAllPrevious" name="Element:getAllPrevious">Element Method: getAllPrevious </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Like <a href="#Element:getPrevious" alt="Element:getPrevious">Element:getPrevious</a>, but returns a collection of all the matched previousSiblings.</p>
<div class="heading clearfix"><h2><a href="#Element:getNext" name="Element:getNext">Element Method: getNext </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>As <a href="#Element:getPrevious" alt="Element:getPrevious">Element:getPrevious</a>, but tries to find the nextSibling (excluding text nodes).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> nextSibling = myElement.getNext([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - (<em>string</em>, optional): A comma seperated list of tag names to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The next sibling Element or null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getAllNext" name="Element:getAllNext">Element Method: getAllNext </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Like Element.getNext, but returns a collection of all the matched nextSiblings.</p>
<div class="heading clearfix"><h2><a href="#Element:getFirst" name="Element:getFirst">Element Method: getFirst </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the first element that matches the passed in expression.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> firstElement = myElement.getFirst([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - (<em>string</em>, optional): A full CSS selector to match the found element(s) with.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The first found element or null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getLast" name="Element:getLast">Element Method: getLast </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the last element that matches the passed in expression.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> lastElement = myElement.getLast([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - (<em>string</em>, optional): A full CSS selector to match the found element(s) with.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The last found element, or returns null if none found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getParent" name="Element:getParent">Element Method: getParent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Works as <a href="#Element:getPrevious" alt="Element:getPrevious">Element:getPrevious</a>, but tries to find the parentNode.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> parent = myElement.getParent([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - (<em>string</em>, optional): A tag name to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The target Element&#39;s parent or null if no matching parent is found.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getParents" name="Element:getParents">Element Method: getParents </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Like <a href="#Element:getParent" alt="Element:getParent">Element:getParent</a>, but returns a collection of all the matched parentNodes up the tree.</p>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) If no matching parents are found, an empty array is returned.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getSiblings" name="Element:getSiblings">Element Method: getSiblings </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Like <a href="#Element:getAllPrevious" alt="Element:getAllPrevious">Element:getAllPrevious</a> but returns all Element&#39;s previous and next siblings (excluding text nodes). Returns as <a href="#Elements" alt="Elements">Elements</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> siblings = myElement.getSiblings([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - (<em>string</em>, optional): A tag name to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) A <a href="#Elements" alt="Elements">Elements</a> array with all of the Element&#39;s siblings, except the text nodes.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:getChildren" name="Element:getChildren">Element Method: getChildren </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns all the Element&#39;s children (excluding text nodes). Returns as <a href="#Elements" alt="Elements">Elements</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> children = myElement.getChildren([match]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>match - (<em>string</em>, optional): A tag name to match the found element(s) with. A full CSS selector can be passed.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) A <a href="#Elements" alt="Elements">Elements</a> array with all of the Element&#39;s children, except the text nodes.</li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div><p>The difference between the methods <em>getChildren</em> and <em>getElements</em> is that getChildren will only return its direct children while getElements searches for all the Elements in any depth.</p>
<div class="heading clearfix"><h2><a href="#Element:empty" name="Element:empty">Element Method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Empties an Element of all its children.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.empty();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).empty();</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This method does not garbage college the children. Use <a href="#Element:destroy" alt="Element:destroy">Element:destroy</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Element:destroy" name="Element:destroy">Element Method: destroy </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes the Element and its children from the DOM and prepares them for garbage collection.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.destroy();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>null</em>)</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:toQueryString" name="Element:toQueryString">Element Method: toQueryString </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Reads the child inputs of the Element and generates a query string based on their values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> query = myElement.toQueryString();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A string representation of a all the input Elements&#39; names and values.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"myForm"</span> <span class="attribute">action</span>=<span class="value">"submit.php"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"bob@bob.com"</span> /&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"zipCode"</span> <span class="attribute">value</span>=<span class="value">"90210"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myForm'</span>).toQueryString(); <span class="comment">// returns "email=bob@bob.com&amp;zipCode=90210".</span></code></pre><div class="heading clearfix"><h2><a href="#Element:getSelected" name="Element:getSelected">Element Method: getSelected </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the selected options of a select element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> selected = mySelect.getSelected();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) An array of the selected elements.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"country-select"</span> <span class="attribute">name</span>=<span class="value">"country"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"US"</span>&gt;</span>United States<span class="tag">&lt;/<span class="title">option
</span>    &lt;<span class="attribute">option</span> <span class="attribute">value</span> =<span class="value">"IT"</span>&gt;</span>Italy<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
<span class="tag">&lt;/<span class="title">select</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'country-select'</span>).getSelected(); <span class="comment">// returns whatever the user selected.</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This method returns an array, regardless of the multiple attribute of the select element.
If the select is single, it will return an array with only one item.</p>
<div class="heading clearfix"><h2><a href="#Element:getProperty" name="Element:getProperty">Element Method: getProperty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns a single element attribute.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myProp = myElement.getProperty(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ul>
<li>property - (<em>string</em>) The property to be retrieved.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A string containing the Element&#39;s requested property.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"mootools.png"</span> <span class="attribute">title</span>=<span class="value">"MooTools, the compact JavaScript framework"</span> <span class="attribute">alt</span>=<span class="value">""</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> imgProps = $(<span class="string">'myImage'</span>).getProperty(<span class="string">'src'</span>); <span class="comment">// returns: 'mootools.png'.</span></code></pre><div class="heading clearfix"><h2><a href="#Element:getProperties" name="Element:getProperties">Element Method: getProperties </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets multiple element attributes.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myProps = myElement.getProperties(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ul>
<li>properties - (<em>strings</em>) Any number of properties to be retrieved.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An object containing all of the Element&#39;s requested properties.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"mootools.png"</span> <span class="attribute">title</span>=<span class="value">"MooTools, the compact JavaScript framework"</span> <span class="attribute">alt</span>=<span class="value">""</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> imgProps = $(<span class="string">'myImage'</span>).getProperties(<span class="string">'id'</span>, <span class="string">'src'</span>, <span class="string">'title'</span>, <span class="string">'alt'</span>);
<span class="comment">// returns: { id: 'myImage', src: 'mootools.png', title: 'MooTools, the compact JavaScript framework', alt: '' }</span></code></pre><div class="heading clearfix"><h2><a href="#Element:setProperty" name="Element:setProperty">Element Method: setProperty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sets an attribute or special property for this Element.</p>
<div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>) The property to assign the value passed in.</li>
<li>value - (<em>mixed</em>) The value to assign to the property passed in.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) - This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myImage'</span>).setProperty(<span class="string">'src'</span>, <span class="string">'mootools.png'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"mootools.png"</span> /&gt;</span></code></pre><div class="heading clearfix"><h3>Note</h3></div><ul>
<li>Whenever using <a href="#Element:setProperty" alt="Element:setProperty">Element:setProperty</a> to set an attribute, pass in the lowercase, simplified form of the property. For example:<ul>
<li>use &#39;for&#39;, not &#39;htmlFor&#39;,</li>
<li>use &#39;class&#39;, not &#39;className&#39;</li>
<li>use &#39;frameborder&#39;, not &#39;frameBorder&#39;</li>
<li>etc.</li>
</ul>
</li>
<li>When setting the <code>src</code> property for an image file, be sure to remove the <code>width</code> and <code>height</code> attribute (use <code>Element.removeAttribute</code>). IE7, and less, set and freeze the <code>width</code> and <code>height</code> of an image if previously specified.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:setProperties" name="Element:setProperties">Element Method: setProperties </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sets numerous attributes for the Element.</p>
<div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - (<em>object</em>) An object with key/value pairs.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myImage'</span>).setProperties({
    src: <span class="string">'whatever.gif'</span>,
    alt: <span class="string">'whatever dude'</span>
});</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> <span class="attribute">src</span>=<span class="value">"whatever.gif"</span> <span class="attribute">alt</span>=<span class="value">"whatever dude"</span> /&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:removeProperty" name="Element:removeProperty">Element Method: removeProperty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes an attribute from the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeProperty(property);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>) The attribute to remove.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">onmousedown</span>=<span class="value">"alert('click');"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="comment">//Eww... inline JavaScript is bad! Let's get rid of it.</span>
$(<span class="string">'myAnchor'</span>).removeProperty(<span class="string">'onmousedown'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:removeProperties" name="Element:removeProperties">Element Method: removeProperties </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes numerous attributes from the Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.removeProperties(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - (<em>strings</em>) The attributes to remove, separated by comma.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">title</span>=<span class="value">"hello world"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myAnchor'</span>).removeProperties(<span class="string">'id'</span>, <span class="string">'href'</span>, <span class="string">'title'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Element:store" name="Element:store">Element Method: store </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Stores an item in the Elements Storage, linked to this Element.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.store(key, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>key - (<em>string</em>) The key you want to assign to the stored value.</li>
<li>value - (<em>mixed</em>) Any value you want to store.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).store(<span class="string">'someProperty'</span>, someValue);</code></pre><div class="heading clearfix"><h2><a href="#Element:retrieve" name="Element:retrieve">Element Method: retrieve </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Retrieves a value from the Elements storage.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.retrieve(key[, <span class="keyword">default</span>]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>key - (<em>string</em>) The key you want to retrieve from the storage.</li>
<li>default - (<em>mixed</em>, optional) Default value to store and return if no value is stored.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The value linked to the key.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).retrieve(<span class="string">'someProperty'</span>); <span class="comment">// returns someValue (see example above)</span></code></pre><div class="heading clearfix"><h2><a href="#Element:eliminate" name="Element:eliminate">Element Method: eliminate </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Eliminates a key from the Elements storage.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.eliminate(key);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>key - (<em>string</em>) The key you want to eliminate from the storage.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The element/window/document.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$(<span class="string">'element'</span>).eliminate(<span class="string">'someProperty'</span>);</code></pre><div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>This Object contains the functions that respond to the first argument passed in <a href="#Element:get" alt="Element:get">Element:get</a>, <a href="#Element:set" alt="Element:set">Element:set</a> and <a href="#Element:erase" alt="Element:erase">Element:erase</a>.</p>
<div class="heading clearfix"><h3>Adding a Custom Element Property</h3></div><pre><code class="javascript">Element.Properties.disabled = {

    get: <span class="keyword">function</span>(){
        <span class="keyword">return</span> <span class="keyword">this</span>.disabled;
    },

    set: <span class="keyword">function</span>(value){
        <span class="keyword">this</span>.disabled = !!value;
        <span class="keyword">this</span>.setAttribute(<span class="string">'disabled'</span>, !!value);
    }

};</code></pre><div class="heading clearfix"><h3>Using a Custom Element Property</h3></div><pre><code class="javascript"><span class="comment">// gets the "disabled" property</span>
$(element).get(<span class="string">'disabled'</span>);
<span class="comment">// sets the "disabled" property to true, along with the attribute</span>
$(element).set(<span class="string">'disabled'</span>, <span class="literal">true</span>);</code></pre><div class="heading clearfix"><h3>Using an Object:</h3></div><p>Additionally, you can access these custom getters and setters using an object as the parameter for the <a href="#Element:set" alt="set">set</a> method.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript"><span class="comment">// using set:</span>
$(divElement).set({html: <span class="string">'&lt;p&gt;Hello &lt;em&gt;People&lt;/em&gt;!&lt;/p&gt;'</span>, style: <span class="string">'background:red'</span>});

<span class="comment">// for new Elements (works the same as set):</span>
<span class="keyword">new</span> Element(<span class="string">'input'</span>, {type: <span class="string">'checkbox'</span>, checked: <span class="literal">true</span>, disabled: <span class="literal">true</span>});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Automatically returns the element for setters.</li>
<li>Since MooTools 1.3 this is a native JavaScript Object and not an instance of the deprecated Hash</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element-Properties:html" name="Element-Properties:html">Element Property: html </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter:</h3></div><p>Sets the innerHTML of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">myElement.set(<span class="string">'html'</span>, html);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>html - (<em>string</em>) The new content as HTML string.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'html'</span>, <span class="string">'&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;'</span>);</code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Getter:</h3></div><p>Returns the inner HTML of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">myElement.get(<span class="string">'html'</span>);</code></pre><div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>text</em>) This Element&#39;s innerHTML.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Element-Properties:text" name="Element-Properties:text">Element Property: text </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter:</h3></div><p>Sets the inner text of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">myElement.set(<span class="string">'text'</span>, text);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>text - (<em>string</em>) The new text content for the Element.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'text'</span>, <span class="string">'some text'</span>);
<span class="comment">// the text of myElement is now 'some text'.</span></code></pre><div class="heading clearfix"><h5>Resulting HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>some text<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h3>Getter:</h3></div><p>Gets the inner text of the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myText = myElement.get(<span class="string">'text'</span>);</code></pre><div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>string</em>) The text of the Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>my text<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myText = $(<span class="string">'myElement'</span>).get(<span class="string">'text'</span>); <span class="comment">// myText = 'my text'.</span></code></pre><div class="heading clearfix"><h2><a href="#Element-Properties:tag" name="Element-Properties:tag">Element Property: tag </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Getter:</h3></div><p>Returns the tag name of the Element in lower case.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myTag = myElement.get(<span class="string">'tag'</span>);</code></pre><div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>string</em>) The tag name in lower case.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">id</span>=<span class="value">"myImage"</span> /&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="keyword">var</span> myTag = $(<span class="string">'myImage'</span>).get(<span class="string">'tag'</span>); <span class="comment">// myTag = 'img'</span></code></pre><div class="heading clearfix"><h1><a href="#IFrame" name="IFrame">Type: IFrame </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Custom Type to create and easily work with IFrames.</p>
<div class="heading clearfix"><h2><a href="#IFrame:constructor" name="IFrame:constructor">IFrame Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates an IFrame HTML Element and extends its window and document with MooTools.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myIFrame = <span class="keyword">new</span> IFrame([el][, props]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>el - (<em>mixed</em>, optional) The id of the IFrame to be converted, or the actual IFrame element. If its not passed, a new IFrame will be created (default).</li>
<li>props - (<em>object</em>, optional) The properties to be applied to the new IFrame. Same as <a href="#Element:constructor" alt="Element:constructor">Element:constructor</a> props argument.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) A new IFrame HTML Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myIFrame = <span class="keyword">new</span> IFrame({

    src: <span class="string">'http://mootools.net/'</span>,

    styles: {
        width: <span class="number">800</span>,
        height: <span class="number">600</span>,
        border: <span class="string">'1px solid #ccc'</span>
    },

    events: {

        mouseenter: <span class="keyword">function</span>(){
            alert(<span class="string">'Welcome aboard.'</span>);
        },

        mouseleave: <span class="keyword">function</span>(){
            alert(<span class="string">'Goodbye!'</span>);
        },

        load: <span class="keyword">function</span>(){
            alert(<span class="string">'The iframe has finished loading.'</span>);
        }

    }

});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>If the IFrame already exists and has a different name than id, the name will be made the same as the id.</li>
<li>An IFrame&#39;s window and document will not be extended with MooTools methods.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Elements" name="Elements">Type: Elements </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>The Elements class allows <a href="#Element" alt="Element">Element</a> methods to work on an <a href="#Elements" alt="Elements">Elements</a> array, as well as <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> Methods.</p>
<div class="heading clearfix"><h2><a href="#Elements:constructor" name="Elements:constructor">Elements Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElements = <span class="keyword">new</span> Elements(elements[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>elements - (<em>mixed</em>) An array of elements or an HTMLCollection Object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) An array-like Elements collection with the <a href="#Element" alt="Element">Element</a>, <a href="#Elements" alt="Elements">Elements</a> and <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> methods.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Set Every Paragraph&#39;s Color to Red:</h4></div><pre><code class="javascript">$$(<span class="string">'p'</span>).each(<span class="keyword">function</span>(el){
    el.setStyle(<span class="string">'color'</span>, <span class="string">'red'</span>);
});

<span class="comment">// Because $$('myselector') also accepts Element methods, the below</span>
<span class="comment">// example has the same effect as the one above.</span>
$$(<span class="string">'p'</span>).setStyle(<span class="string">'color'</span>, <span class="string">'red'</span>);</code></pre><div class="heading clearfix"><h4>Create Elements From an Array:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myElements = <span class="keyword">new</span> Elements([<span class="string">'myElementID'</span>, $(<span class="string">'myElement'</span>), <span class="string">'myElementID2'</span>, document.getElementById(<span class="string">'myElementID3'</span>)]);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>In MooTools, every DOM function which returns a collection of nodes (such as <a href="#Window:dollars" alt="$$">$$</a>) returns the nodes as instances of Elements.</li>
<li>Because Elements is an array-like-object, it accepts all the <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a> methods, while giving precedence to <a href="#Element" alt="Element">Element</a> and <a href="#Elements" alt="Elements">Elements</a> methods.</li>
<li>Every node of the Elements instance has all the <a href="#Element" alt="Element">Element</a> methods.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Window:dollars" alt="$$">$$</a>, <a href="#Window:dollar" alt="$">$</a>, <a href="#Element" alt="Element">Element</a>, <a href="#Elements" alt="Elements">Elements</a>, <a href="/core/docs/1.5.1/Types/Array" alt="Array">Array</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:append" name="Elements:append">Elements Method: append </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds the items of the collection to this <a href="#Elements" alt="Elements">Elements</a> array, and return the this array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">elements.append(collection);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>collection - (<em>array</em>) <a href="#Elements" alt="Elements">Elements</a> array or an array of HTML Elements.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) This <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method doesn&#39;t process (<a href="#Window:document-id" alt="document:id">document:id</a> or filters) the items of the array.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:concat" name="Elements:concat">Elements Method: concat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds the element, or array of Elements, to this <a href="#Elements" alt="Elements">Elements</a> array, and returns a new <a href="#Elements" alt="Elements">Elements</a> array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> newElements = elements.concat(element[, list, id, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>element - (<em>mixed</em>) An HTML Element, or a string id.</li>
<li>list, id, ... - (<em>mixed</em>) Additional <a href="#Elements" alt="Elements">Elements</a>, array of ids, or string ids.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) A new <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:empty" name="Elements:empty">Elements Method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes every item from the <a href="#Elements" alt="Elements">Elements</a> array, and the empty array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">elements.empty();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) This empty <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div><p><code>Elements.empty</code> does not destroy the elements inside. As best practice, always destroy your elements if they&#39;re no longer in use. For example:</p>
<pre><code class="javascript">$$(<span class="string">'div'</span>).destroy().empty();</code></pre><div class="heading clearfix"><h3>See Also</h3></div><ul>
<li><a href="#Element:destroy" alt="Element:destroy">Element:destroy</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:filter" name="Elements:filter">Elements Method: filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Filters a collection of elements by a given css selector, or filtering function like <a href="/core/docs/1.5.1/Types/Array#Array:filter" alt="Array:filter">Array:filter</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> filteredElements = elements.filter(selector);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>selector - (<em>mixed</em>) A single CSS selector, or filtering function.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) A subset of this <a href="#Elements" alt="Elements">Elements</a> instance.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:push" name="Elements:push">Elements Method: push </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds the element, or elements, to the end of this <a href="#Elements" alt="Elements">Elements</a> array and returns the length of the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> length = elements.push(element[, id, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>element - (<em>mixed</em>) An HTML Element, or a string id.</li>
<li>id, ... - (<em>mixed</em>) Additional HTML Element, or string ids.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The new length of the <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Elements:unshift" name="Elements:unshift">Elements Method: unshift </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Adds the element, or elements, to the front of this <a href="#Elements" alt="Elements">Elements</a> array and returns the length of the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> length = elements.unshift(element[, id, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>element - (<em>mixed</em>) An HTML Element, or a string id.</li>
<li>id, ... - (<em>mixed</em>) Additional HTML Element, or string ids.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The new length of the <a href="#Elements" alt="Elements">Elements</a> array.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:hasChild" name="Deprecated-Functions:hasChild">Element Method: hasChild </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:contains" alt="Element:contains">Element:contains</a> instead.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'element1'</span>);
<span class="keyword">var</span> myElement2 = document.id(<span class="string">'element2'</span>);
myElement !== myElement2 &amp;&amp; myElement.contains(element2);

<span class="comment">// could be implemented as:</span>
Element.implement(<span class="string">'hasChild'</span>, <span class="keyword">function</span>(element){
    <span class="keyword">return</span> <span class="keyword">this</span> !== element &amp;&amp; <span class="keyword">this</span>.contains(element);
});</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectBefore" name="Deprecated-Functions:injectBefore">Element Method: injectBefore </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectAfter" name="Deprecated-Functions:injectAfter">Element Method: injectAfter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectBottom" name="Deprecated-Functions:injectBottom">Element Method: injectBottom </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectTop" name="Deprecated-Functions:injectTop">Element Method: injectTop </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:injectInside" name="Deprecated-Functions:injectInside">Element Method: injectInside </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:inject" alt="Element:inject">Element:inject</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabBefore" name="Deprecated-Functions:grabBefore">Element Method: grabBefore </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabAfter" name="Deprecated-Functions:grabAfter">Element Method: grabAfter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabBottom" name="Deprecated-Functions:grabBottom">Element Method: grabBottom </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabTop" name="Deprecated-Functions:grabTop">Element Method: grabTop </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:grabInside" name="Deprecated-Functions:grabInside">Element Method: grabInside </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Element:grab" alt="Element:grab">Element:grab</a> instead.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:extend" name="Deprecated-Functions:extend">Elements Method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This method has been deprecated. Use <a href="#Elements:append" alt="Elements:append">Elements:append</a> instead.</p>
+M-----+++++<div class="heading clearfix"><h1><a href="#Fx-CSS" name="Fx-CSS">Class: Fx.CSS </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>CSS parsing class for effects. Required by <a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a>, <a href="/core/docs/1.5.1/Fx/Fx.Morph" alt="Fx.Morph">Fx.Morph</a>, <a href="/more/docs/1.5.1/Fx/Fx.Elements" alt="Fx.Elements">Fx.Elements</a>.</p>

<p>Has no public methods.</p>
+R*****<div class="heading clearfix"><h1><a href="#Fx-CSS" name="Fx-CSS">Class: Fx.CSS </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>CSS parsing class for effects. Required by <a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a>, <a href="/core/docs/1.5.1/Fx/Fx.Morph" alt="Fx.Morph">Fx.Morph</a>, <a href="/more/docs/1.5.1/Fx/Fx.Elements" alt="Fx.Elements">Fx.Elements</a>.</p>
<p>Has no public methods.</p>
+M-----+++++<div class="heading clearfix"><h1><a href="#Fx-Morph" name="Fx-Morph">Class: Fx.Morph </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Allows for the animation of multiple CSS properties at once, even by a simple CSS selector. Inherits methods, properties, options and events from <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>.</p>
<div class="heading clearfix"><h3>Extends:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></li>
</ul>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Morph(element[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>element - (<em>mixed</em>) A string ID of the Element or an Element to apply the style transitions to.</li>
<li>options - (<em>object</em>, optional) The <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> options object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) A new Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div>
<p>Multiple styles with start and end values using an object:</p>
<pre><code class="javascript"><span class="keyword">var</span> myEffect = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {
    duration: <span class="string">'long'</span>,
    transition: Fx.Transitions.Sine.easeOut
});

myEffect.start({
    <span class="string">'height'</span>: [<span class="number">10</span>, <span class="number">100</span>], <span class="comment">// Morphs the 'height' style from 10px to 100px.</span>
    <span class="string">'width'</span>: [<span class="number">900</span>, <span class="number">300</span>]  <span class="comment">// Morphs the 'width' style from 900px to 300px.</span>
});</code></pre>
<p>Multiple styles with the start value omitted will default to the current Element&#39;s value:</p>
<pre><code class="javascript"><span class="keyword">var</span> myEffect = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {
    duration: <span class="string">'short'</span>,
    transition: Fx.Transitions.Sine.easeOut
});

myEffect.start({
    <span class="string">'height'</span>: <span class="number">100</span>, <span class="comment">// Morphs the height from the current to 100px.</span>
    <span class="string">'width'</span>: <span class="number">300</span>   <span class="comment">// Morphs the width from the current to 300px.</span>
});</code></pre>
<p>Morphing one Element to match the CSS values within a CSS class. This is useful when
separating the logic and styles:</p>
<pre><code class="javascript"><span class="keyword">var</span> myEffect = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {
    duration: <span class="number">1000</span>,
    transition: Fx.Transitions.Sine.easeOut
});

<span class="comment">// the styles of myClassName will be applied to the target Element.</span>
myEffect.start(<span class="string">'.myClassName'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This feature only works for simple selectors like a single class or id due to limited browser support for complex selectors.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx-Morph:set" name="Fx-Morph:set">Fx.Morph Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sets the Element&#39;s CSS properties to the specified values immediately.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.set(to);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - (<em>mixed</em>) Either an <em>object</em> of key/value pairs of CSS attributes to change or a <em>string</em> representing a CSS selector which can be found within the CSS of the page.  If only one value is given for any CSS property, the transition will be from the current value of that property to the value given.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>).set({
    <span class="string">'height'</span>: <span class="number">200</span>,
    <span class="string">'width'</span>: <span class="number">200</span>,
    <span class="string">'background-color'</span>: <span class="string">'#f00'</span>,
    <span class="string">'opacity'</span>: <span class="number">0</span>
});
<span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>).set(<span class="string">'.myClass'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Fx-Morph:start" name="Fx-Morph:start">Fx.Morph Method: start </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Executes a transition for any number of CSS properties in tandem.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.start(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - (<em>mixed</em>) An <em>object</em> of key/value pairs of CSS attributes to change or a <em>string</em> representing a CSS selector which can be found within the CSS of the page.
If only one value is given for any CSS property, the transition will be from the current value of that property to the value given.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myEffects = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {duration: <span class="number">1000</span>, transition: Fx.Transitions.Sine.easeOut});

myEffects.start({
    <span class="string">'height'</span>: [<span class="number">10</span>, <span class="number">100</span>],
    <span class="string">'width'</span>: [<span class="number">900</span>, <span class="number">300</span>],
    <span class="string">'opacity'</span>: <span class="number">0</span>,
    <span class="string">'background-color'</span>: <span class="string">'#00f'</span>
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>If a string is passed as the CSS selector, the selector must be identical to the one within the CSS.</li>
<li>Multiple selectors (with commas) are not supported.</li>
<li>@import&#39;ed CSS rules will not be available for Morph calls. All CSS selectors must be present in CSS directly loaded into the page.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:morph" name="Element-Properties:morph">Element Property: morph </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter</h3></div>
<p>Sets a default Fx.Morph instance for an Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'morph'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>options - (<em>object</em>, optional) The Fx.Morph options.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.set(<span class="string">'morph'</span>, {duration: <span class="string">'long'</span>, transition: <span class="string">'bounce:out'</span>});
el.morph({height: <span class="number">100</span>, width: <span class="number">100</span>});</code></pre><div class="heading clearfix"><h3>Getter</h3></div>
<p>Gets the default Fx.Morph instance for the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'morph'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>property - (<em>string</em>) the Fx.Morph property argument.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>object</em>) The Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.set(<span class="string">'morph'</span>, {duration: <span class="string">'long'</span>, transition: <span class="string">'bounce:out'</span>});
el.morph({height: <span class="number">100</span>, width: <span class="number">100</span>});
el.get(<span class="string">'morph'</span>); <span class="comment">// the Fx.Morph instance.</span></code></pre><div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Element:morph" name="Element:morph">Element Method: morph </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Animates an Element given the properties passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.morph(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>properties - (<em>mixed</em>) The CSS properties to animate. Can be either an object of CSS properties or a string representing a CSS selector.  If only one value is given for any CSS property, the transition will be from the current value of that property to the value given.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div>
<p>With an object:</p>
<pre><code class="javascript">$(<span class="string">'myElement'</span>).morph({height: <span class="number">100</span>, width: <span class="number">200</span>});</code></pre>
<p>With a selector:</p>
<pre><code class="javascript">$(<span class="string">'myElement'</span>).morph(<span class="string">'.class1'</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Fx-Morph" alt="Fx.Morph">Fx.Morph</a></li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Fx-Morph" name="Fx-Morph">Class: Fx.Morph </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Allows for the animation of multiple CSS properties at once, even by a simple CSS selector. Inherits methods, properties, options and events from <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a>.</p>
<div class="heading clearfix"><h3>Extends:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></li>
</ul>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Morph(element[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>element - (<em>mixed</em>) A string ID of the Element or an Element to apply the style transitions to.</li>
<li>options - (<em>object</em>, optional) The <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> options object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) A new Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><p>Multiple styles with start and end values using an object:</p>
<pre><code class="javascript"><span class="keyword">var</span> myEffect = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {
    duration: <span class="string">'long'</span>,
    transition: Fx.Transitions.Sine.easeOut
});

myEffect.start({
    <span class="string">'height'</span>: [<span class="number">10</span>, <span class="number">100</span>], <span class="comment">// Morphs the 'height' style from 10px to 100px.</span>
    <span class="string">'width'</span>: [<span class="number">900</span>, <span class="number">300</span>]  <span class="comment">// Morphs the 'width' style from 900px to 300px.</span>
});</code></pre><p>Multiple styles with the start value omitted will default to the current Element&#39;s value:</p>
<pre><code class="javascript"><span class="keyword">var</span> myEffect = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {
    duration: <span class="string">'short'</span>,
    transition: Fx.Transitions.Sine.easeOut
});

myEffect.start({
    <span class="string">'height'</span>: <span class="number">100</span>, <span class="comment">// Morphs the height from the current to 100px.</span>
    <span class="string">'width'</span>: <span class="number">300</span>   <span class="comment">// Morphs the width from the current to 300px.</span>
});</code></pre><p>Morphing one Element to match the CSS values within a CSS class. This is useful when
separating the logic and styles:</p>
<pre><code class="javascript"><span class="keyword">var</span> myEffect = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {
    duration: <span class="number">1000</span>,
    transition: Fx.Transitions.Sine.easeOut
});

<span class="comment">// the styles of myClassName will be applied to the target Element.</span>
myEffect.start(<span class="string">'.myClassName'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This feature only works for simple selectors like a single class or id due to limited browser support for complex selectors.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx-Morph:set" name="Fx-Morph:set">Fx.Morph Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sets the Element&#39;s CSS properties to the specified values immediately.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.set(to);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - (<em>mixed</em>) Either an <em>object</em> of key/value pairs of CSS attributes to change or a <em>string</em> representing a CSS selector which can be found within the CSS of the page.  If only one value is given for any CSS property, the transition will be from the current value of that property to the value given.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>).set({
    <span class="string">'height'</span>: <span class="number">200</span>,
    <span class="string">'width'</span>: <span class="number">200</span>,
    <span class="string">'background-color'</span>: <span class="string">'#f00'</span>,
    <span class="string">'opacity'</span>: <span class="number">0</span>
});
<span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>).set(<span class="string">'.myClass'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Fx-Morph:start" name="Fx-Morph:start">Fx.Morph Method: start </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Executes a transition for any number of CSS properties in tandem.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.start(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - (<em>mixed</em>) An <em>object</em> of key/value pairs of CSS attributes to change or a <em>string</em> representing a CSS selector which can be found within the CSS of the page.
 If only one value is given for any CSS property, the transition will be from the current value of that property to the value given.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myEffects = <span class="keyword">new</span> Fx.Morph(<span class="string">'myElement'</span>, {duration: <span class="number">1000</span>, transition: Fx.Transitions.Sine.easeOut});

myEffects.start({
    <span class="string">'height'</span>: [<span class="number">10</span>, <span class="number">100</span>],
    <span class="string">'width'</span>: [<span class="number">900</span>, <span class="number">300</span>],
    <span class="string">'opacity'</span>: <span class="number">0</span>,
    <span class="string">'background-color'</span>: <span class="string">'#00f'</span>
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>If a string is passed as the CSS selector, the selector must be identical to the one within the CSS.</li>
<li>Multiple selectors (with commas) are not supported.</li>
<li>@import&#39;ed CSS rules will not be available for Morph calls. All CSS selectors must be present in CSS directly loaded into the page.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:morph" name="Element-Properties:morph">Element Property: morph </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter</h3></div><p>Sets a default Fx.Morph instance for an Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'morph'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>options - (<em>object</em>, optional) The Fx.Morph options.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.set(<span class="string">'morph'</span>, {duration: <span class="string">'long'</span>, transition: <span class="string">'bounce:out'</span>});
el.morph({height: <span class="number">100</span>, width: <span class="number">100</span>});</code></pre><div class="heading clearfix"><h3>Getter</h3></div><p>Gets the default Fx.Morph instance for the Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'morph'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>property - (<em>string</em>) the Fx.Morph property argument.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>object</em>) The Fx.Morph instance.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.set(<span class="string">'morph'</span>, {duration: <span class="string">'long'</span>, transition: <span class="string">'bounce:out'</span>});
el.morph({height: <span class="number">100</span>, width: <span class="number">100</span>});
el.get(<span class="string">'morph'</span>); <span class="comment">// the Fx.Morph instance.</span></code></pre><div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Element:morph" name="Element:morph">Element Method: morph </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Animates an Element given the properties passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.morph(properties);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>properties - (<em>mixed</em>) The CSS properties to animate. Can be either an object of CSS properties or a string representing a CSS selector.  If only one value is given for any CSS property, the transition will be from the current value of that property to the value given.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><p>With an object:</p>
<pre><code class="javascript">$(<span class="string">'myElement'</span>).morph({height: <span class="number">100</span>, width: <span class="number">200</span>});</code></pre><p>With a selector:</p>
<pre><code class="javascript">$(<span class="string">'myElement'</span>).morph(<span class="string">'.class1'</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Fx-Morph" alt="Fx.Morph">Fx.Morph</a></li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Fx" name="Fx">Class: Fx </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Fx.Transitions overrides the base <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> constructor, and adds the possibility to use the transition option as string.</p>
<div class="heading clearfix"><h3>Transition option:</h3></div>
<p>The equation to use for the effect. See <a href="#Fx-Transitions" alt="Fx.Transitions">Fx.Transitions</a>. It accepts both a function (ex: Fx.Transitions.Sine.easeIn) or a string (&#39;sine:in&#39;, &#39;bounce:out&#39; or &#39;quad:in:out&#39;) that will map to Fx.Transitions.Sine.easeIn / Fx.Transitions.Bounce.easeOut / Fx.Transitions.Quad.easeInOut</p>
<div class="heading clearfix"><h1><a href="#Fx-Transitions" name="Fx-Transitions">Object: Fx.Transitions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A collection of tweening transitions for use with the <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> classes.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'tween'</span>, {transition: Fx.Transitions.Elastic.easeOut});
$(<span class="string">'myElement'</span>).tween(<span class="string">'margin-top'</span>, <span class="number">100</span>);</code></pre><div class="heading clearfix"><h3>See also:</h3></div>
<ul>
<li><a href="http://www.robertpenner.com/easing/" alt="Robert Penner&amp;#39;s Easing Equations">Robert Penner&#39;s Easing Equations</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div>
<p>Since MooTools 1.3 this is a native JavaScript Object and not an instance of the deprecated Hash</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:linear" name="Fx-Transitions:linear">Fx.Transitions Method: linear </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a linear transition.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:quad" name="Fx-Transitions:quad">Fx.Transitions Method: quad </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a quadratic transition. Must be used as Quad.easeIn or Quad.easeOut or Quad.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:cubic" name="Fx-Transitions:cubic">Fx.Transitions Method: cubic </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a cubicular transition. Must be used as Cubic.easeIn or Cubic.easeOut or Cubic.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:quart" name="Fx-Transitions:quart">Fx.Transitions Method: quart </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a quartetic transition. Must be used as Quart.easeIn or Quart.easeOut or Quart.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:quint" name="Fx-Transitions:quint">Fx.Transitions Method: quint </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a quintic transition. Must be used as Quint.easeIn or Quint.easeOut or Quint.easeInOut</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:pow" name="Fx-Transitions:pow">Fx.Transitions Method: pow </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Used to generate Quad, Cubic, Quart and Quint.</p>
<div class="heading clearfix"><h3>Note:</h3></div>
<ul>
<li>The default is <code>p^6</code>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:expo" name="Fx-Transitions:expo">Fx.Transitions Method: expo </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a exponential transition. Must be used as Expo.easeIn or Expo.easeOut or Expo.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:circ" name="Fx-Transitions:circ">Fx.Transitions Method: circ </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a circular transition. Must be used as Circ.easeIn or Circ.easeOut or Circ.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:sine" name="Fx-Transitions:sine">Fx.Transitions Method: sine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Displays a sineousidal transition. Must be used as Sine.easeIn or Sine.easeOut or Sine.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:back" name="Fx-Transitions:back">Fx.Transitions Method: back </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Makes the transition go back, then all forth. Must be used as Back.easeIn or Back.easeOut or Back.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:bounce" name="Fx-Transitions:bounce">Fx.Transitions Method: bounce </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Makes the transition bouncy. Must be used as Bounce.easeIn or Bounce.easeOut or Bounce.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:elastic" name="Fx-Transitions:elastic">Fx.Transitions Method: elastic </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Elastic curve. Must be used as Elastic.easeIn or Elastic.easeOut or Elastic.easeInOut</p>
<div class="heading clearfix"><h1><a href="#Fx-Transition" name="Fx-Transition">Class: Fx.Transition </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This class is only useful for math geniuses who want to write their own easing equations.
Returns an <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> transition function with &#39;easeIn&#39;, &#39;easeOut&#39;, and &#39;easeInOut&#39; methods.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myTransition = <span class="keyword">new</span> Fx.Transition(transition[, params]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>transition - (<em>function</em>) Can be a <a href="#Fx-Transitions" alt="Fx.Transitions">Fx.Transitions</a> function or a user-provided function which will be extended with easing functions.</li>
<li>params     - (<em>mixed</em>, optional) Single value or an array for multiple values to pass as the second parameter for the transition function. A single value will be transformed to an array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>function</em>) A function with easing functions.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// Your own function. Here overshoot is bigger (now 1.3) when base -&gt; 1 and base != 1.</span>
<span class="keyword">var</span> myTransition = <span class="keyword">new</span> Fx.Transition(<span class="keyword">function</span>(pos, x){
    <span class="keyword">return</span> <span class="number">1</span> - Math.pow(Math.abs(Math.log(pos) / Math.log(x &amp;&amp; x[<span class="number">0</span>] || Math.E)), pos);
}, <span class="number">1.3</span>);

<span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, {
    property: <span class="string">'height'</span>,
    transition: myTransition.easeOut
}).start(<span class="number">30</span>, <span class="number">100</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Fx-Transitions" alt="Fx.Transitions">Fx.Transitions</a></li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Fx" name="Fx">Class: Fx </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Fx.Transitions overrides the base <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> constructor, and adds the possibility to use the transition option as string.</p>
<div class="heading clearfix"><h3>Transition option:</h3></div><p>The equation to use for the effect. See <a href="#Fx-Transitions" alt="Fx.Transitions">Fx.Transitions</a>. It accepts both a function (ex: Fx.Transitions.Sine.easeIn) or a string (&#39;sine:in&#39;, &#39;bounce:out&#39; or &#39;quad:in:out&#39;) that will map to Fx.Transitions.Sine.easeIn / Fx.Transitions.Bounce.easeOut / Fx.Transitions.Quad.easeInOut</p>
<div class="heading clearfix"><h1><a href="#Fx-Transitions" name="Fx-Transitions">Object: Fx.Transitions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A collection of tweening transitions for use with the <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> classes.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).set(<span class="string">'tween'</span>, {transition: Fx.Transitions.Elastic.easeOut});
$(<span class="string">'myElement'</span>).tween(<span class="string">'margin-top'</span>, <span class="number">100</span>);</code></pre><div class="heading clearfix"><h3>See also:</h3></div><ul>
<li><a href="http://www.robertpenner.com/easing/" alt="Robert Penner&amp;#39;s Easing Equations">Robert Penner&#39;s Easing Equations</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div><p>Since MooTools 1.3 this is a native JavaScript Object and not an instance of the deprecated Hash</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:linear" name="Fx-Transitions:linear">Fx.Transitions Method: linear </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a linear transition.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:quad" name="Fx-Transitions:quad">Fx.Transitions Method: quad </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a quadratic transition. Must be used as Quad.easeIn or Quad.easeOut or Quad.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:cubic" name="Fx-Transitions:cubic">Fx.Transitions Method: cubic </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a cubicular transition. Must be used as Cubic.easeIn or Cubic.easeOut or Cubic.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:quart" name="Fx-Transitions:quart">Fx.Transitions Method: quart </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a quartetic transition. Must be used as Quart.easeIn or Quart.easeOut or Quart.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:quint" name="Fx-Transitions:quint">Fx.Transitions Method: quint </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a quintic transition. Must be used as Quint.easeIn or Quint.easeOut or Quint.easeInOut</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:pow" name="Fx-Transitions:pow">Fx.Transitions Method: pow </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Used to generate Quad, Cubic, Quart and Quint.</p>
<div class="heading clearfix"><h3>Note:</h3></div><ul>
<li>The default is <code>p^6</code>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:expo" name="Fx-Transitions:expo">Fx.Transitions Method: expo </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a exponential transition. Must be used as Expo.easeIn or Expo.easeOut or Expo.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:circ" name="Fx-Transitions:circ">Fx.Transitions Method: circ </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a circular transition. Must be used as Circ.easeIn or Circ.easeOut or Circ.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:sine" name="Fx-Transitions:sine">Fx.Transitions Method: sine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Displays a sineousidal transition. Must be used as Sine.easeIn or Sine.easeOut or Sine.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:back" name="Fx-Transitions:back">Fx.Transitions Method: back </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Makes the transition go back, then all forth. Must be used as Back.easeIn or Back.easeOut or Back.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:bounce" name="Fx-Transitions:bounce">Fx.Transitions Method: bounce </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Makes the transition bouncy. Must be used as Bounce.easeIn or Bounce.easeOut or Bounce.easeInOut.</p>
<div class="heading clearfix"><h2><a href="#Fx-Transitions:elastic" name="Fx-Transitions:elastic">Fx.Transitions Method: elastic </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Elastic curve. Must be used as Elastic.easeIn or Elastic.easeOut or Elastic.easeInOut</p>
<div class="heading clearfix"><h1><a href="#Fx-Transition" name="Fx-Transition">Class: Fx.Transition </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>This class is only useful for math geniuses who want to write their own easing equations.
Returns an <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> transition function with &#39;easeIn&#39;, &#39;easeOut&#39;, and &#39;easeInOut&#39; methods.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myTransition = <span class="keyword">new</span> Fx.Transition(transition[, params]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>transition - (<em>function</em>) Can be a <a href="#Fx-Transitions" alt="Fx.Transitions">Fx.Transitions</a> function or a user-provided function which will be extended with easing functions.</li>
<li>params     - (<em>mixed</em>, optional) Single value or an array for multiple values to pass as the second parameter for the transition function. A single value will be transformed to an array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>function</em>) A function with easing functions.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// Your own function. Here overshoot is bigger (now 1.3) when base -&gt; 1 and base != 1.</span>
<span class="keyword">var</span> myTransition = <span class="keyword">new</span> Fx.Transition(<span class="keyword">function</span>(pos, x){
    <span class="keyword">return</span> <span class="number">1</span> - Math.pow(Math.abs(Math.log(pos) / Math.log(x &amp;&amp; x[<span class="number">0</span>] || Math.E)), pos);
}, <span class="number">1.3</span>);

<span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, {
    property: <span class="string">'height'</span>,
    transition: myTransition.easeOut
}).start(<span class="number">30</span>, <span class="number">100</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Fx-Transitions" alt="Fx.Transitions">Fx.Transitions</a></li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Fx-Tween" name="Fx-Tween">Class: Fx.Tween </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Contains <a href="#Fx-Tween" alt="Fx.Tween">Fx.Tween</a> and the Element shortcut <a href="#Element-Properties:tween" alt="Element.tween">Element.tween</a>.</p>
<div class="heading clearfix"><h3>Extends:</h3></div>
<p><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></p>
<div class="heading clearfix"><h2><a href="#Fx-Tween:constructor" name="Fx-Tween:constructor">Fx.Tween Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The Tween effect, used to transition any CSS property from one value to another.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(element, [, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>element  - (<em>mixed</em>) An Element or the string id of an Element to apply the transition to.</li>
<li>options  - (<em>object</em>, optional) The <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> options object, plus the options described below:</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div>
<ul>
<li>property - (<em>string</em>) The CSS property to transition to, for example &#39;width&#39;, &#39;color&#39;, &#39;font-size&#39;, &#39;border&#39;, etc. If this option is omitted, you are required to use the property as a first argument for the start and set methods. Defaults to null.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Any CSS property that can be set with Element:setStyle can be transitioned with Fx.Tween.</li>
<li>If a property is not mathematically calculable, like border-style or background-image, it will be set immediately upon start of the transition.</li>
<li>If you use the property option, you must not use the property argument in the start and set methods.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div>
<p>Tweens the height of a element while clicking a link (which stops the default behavior), using a transition and a long duration.
It uses the <code>link</code> option so when clicking the link twice it behaves smoothly. When the start value is omitted, the current
value of the property (in this example the height property) will be used.</p>
<pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, {
    duration: <span class="string">'long'</span>,
    transition: <span class="string">'bounce:out'</span>,
    link: <span class="string">'cancel'</span>,
    property: <span class="string">'height'</span>
});

document.id(<span class="string">'myLink'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop();
    myFx.start(<span class="number">40</span>, <span class="number">100</span>);
});</code></pre>
<p>It is also possible to use the Element properties: <code>.get(&#39;tween&#39;)</code> and <code>.set(&#39;tween&#39;)</code> and the <code>tween</code> method.
In this example the property method is not set as an option, now it should be set as argument of the <code>tween</code> method.
This is something you can choose for both the <code>Fx.Tween</code> constructor or this approach.</p>
<pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'myElement'</span>);
myElement.set(<span class="string">'tween'</span>, {
    duration: <span class="string">'long'</span>,
    transition: <span class="string">'bounce:out'</span>,
    link: <span class="string">'cancel'</span>
});

document.id(<span class="string">'myLink'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop();
    myElement.tween(<span class="string">'height'</span>, <span class="number">40</span>, <span class="number">100</span>);
});</code></pre><div class="heading clearfix"><h2><a href="#Fx-Tween:set" name="Fx-Tween:set">Fx.Tween Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sets the Element&#39;s CSS property to the specified value immediately.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.set(property, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>) The css property to set the value to. Omit this if you use the property option.</li>
<li>value - (<em>mixed</em>) The value to set the CSS property of this instance to.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Fx.Tween instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(element);
<span class="comment">// sets the background color of the element to red:</span>
myFx.set(<span class="string">'background-color'</span>, <span class="string">'#f00'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>If you use the property option, you must not use the property argument in the start and set methods.</p>
<div class="heading clearfix"><h2><a href="#Fx-Tween:start" name="Fx-Tween:start">Fx.Tween Method: start </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Transitions the Element&#39;s CSS property to the specified value.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.start([property,] [from,] to);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property - (<em>string</em>, if not in options) The css property to tween. Omit this if you use the property option.</li>
<li>from     - (<em>mixed</em>, optional) The starting CSS property value for the effect.</li>
<li>to       - (<em>mixed</em>) The target CSS property value for the effect.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Fx.Tween instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(element);
<span class="comment">// transitions the background color of the Element from black to red:</span>
myFx.start(<span class="string">'background-color'</span>, <span class="string">'#000'</span>, <span class="string">'#f00'</span>);
<span class="comment">// transitions the background color of the Element from its current color to blue:</span>
myFx.start(<span class="string">'background-color'</span>, <span class="string">'#00f'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>If only one argument is provided, other than the property argument, the first argument to start will be used as the target value, and the initial value will be calculated from the current state of the element.</li>
<li>When using colors, either RGB or Hex values may be used.</li>
<li>If you use the property option, you must not use the property argument in the start and set methods.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:tween" name="Element-Properties:tween">Element Property: tween </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sets and gets default options for the Fx.Tween instance of an Element.</p>
<div class="heading clearfix"><h3>Setter:</h3></div><div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'tween'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ul>
<li>options - (<em>object</em>) the Fx.Tween options.</li>
</ul>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.set(<span class="string">'tween'</span>, {duration: <span class="string">'long'</span>});
el.tween(<span class="string">'color'</span>, <span class="string">'#f00'</span>);</code></pre><div class="heading clearfix"><h3>Getter:</h3></div><div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'tween'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>property - (<em>string</em>) the Fx.Tween property argument.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>object</em>) The Element&#39;s internal Fx.Tween instance.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.get(<span class="string">'tween'</span>).start(<span class="number">0</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>When initializing the Element&#39;s tween instance with Element:set, the property to tween SHOULD NOT be passed.</li>
<li>The property must be specified when using Element:get to retrieve the actual Fx.Tween instance, and in calls to Element:tween.</li>
<li>When options are passed to the setter, the instance will be reset.</li>
<li>As with the other Element shortcuts, the difference between a setter and a getter is that the getter returns the instance, while the setter returns the element (for chaining and initialization).</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:tween" name="Element:tween">Element Method: tween </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Element shortcut method which immediately transitions any single CSS property of an Element from one value to another.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.tween(property, startValue[, endValue]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>property   - (<em>string</em>) the css property you want to animate. Omit this if you previously set the property option.</li>
<li>startValue - (<em>mixed</em>) The start value for the transition.</li>
<li>endValue   - (<em>mixed</em>) The end value for the transition. If this is omitted, startValue will be used as endValue.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// transitions the width of 'myElement' from its current width to 100px:</span>
$(<span class="string">'myElement'</span>).tween(<span class="string">'width'</span>, <span class="string">'100'</span>);
<span class="comment">// transitions the height of 'myElement' from 20px to 200px:</span>
$(<span class="string">'myElement'</span>).tween(<span class="string">'height'</span>, [<span class="number">20</span>, <span class="number">200</span>]);
<span class="comment">// transitions the border of 'myElement' from its current to '6px solid blue':</span>
$(<span class="string">'myElement'</span>).tween(<span class="string">'border'</span>, <span class="string">'6px solid #36f'</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Fx-Tween" alt="Fx.Tween">Fx.Tween</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:fade" name="Element:fade">Element Method: fade </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Element shortcut method for tween with opacity.  Useful for fading an Element in and out or to a certain opacity level.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.fade([how]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>how - (<em>mixed</em>, optional: defaults to &#39;toggle&#39;) The opacity level as a number or string representation.  Possible values include:

<ul>
<li>&#39;in&#39;     - Fade the element to 100% opacity.</li>
<li>&#39;out&#39;    - Fade the element to 0% opacity.</li>
<li>&#39;show&#39;   - Immediately set the element&#39;s opacity to 100%.</li>
<li>&#39;hide&#39;   - Immediately set the element&#39;s opacity to 0%.</li>
<li>&#39;toggle&#39; - If visible, fade the element out, otherwise, fade it in.</li>
<li>(<em>number</em>)  - A float value between 0 and 1. Will fade the element to this opacity.</li>
</ul></li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).fade(<span class="string">'out'</span>); <span class="comment">// fades 'myElement' out.</span>
$(<span class="string">'myElement'</span>).fade(<span class="number">0.7</span>); <span class="comment">// fades 'myElement' to 70% opacity.</span></code></pre><div class="heading clearfix"><h2><a href="#Element:highlight" name="Element:highlight">Element Method: highlight </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Element shortcut method for tweening the background color.  Immediately transitions an Element&#39;s background color to a specified highlight color then back to its set background color.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.highlight([start, end]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>start - (<em>string</em>, optional: defaults to &#39;#ff8&#39;) The color from which to start the transition.</li>
<li>end - (<em>string</em>, optional: defaults to Element&#39;s set background-color) The background color to return to after the highlight effect.</li>
</ol>
<div class="heading clearfix"><h3>Note:</h3></div>
<p>If no background color is set on the Element, or its background color is set to &#39;transparent&#39;, the default end value will be white.</p>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">//immediately changes the background to light blue, then back to its original color (or white):</span>
$(<span class="string">'myElement'</span>).highlight(<span class="string">'#ddf'</span>);

<span class="comment">//immediately changes the background to light blue, then fades to grey:</span>
$(<span class="string">'myElement'</span>).highlight(<span class="string">'#ddf'</span>, <span class="string">'#ccc'</span>);</code></pre>+R*****<div class="heading clearfix"><h1><a href="#Fx-Tween" name="Fx-Tween">Class: Fx.Tween </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Contains <a href="#Fx-Tween" alt="Fx.Tween">Fx.Tween</a> and the Element shortcut <a href="#Element-Properties:tween" alt="Element.tween">Element.tween</a>.</p>
<div class="heading clearfix"><h3>Extends:</h3></div><p><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></p>
<div class="heading clearfix"><h2><a href="#Fx-Tween:constructor" name="Fx-Tween:constructor">Fx.Tween Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The Tween effect, used to transition any CSS property from one value to another.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(element, [, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>element  - (<em>mixed</em>) An Element or the string id of an Element to apply the transition to.</li>
<li>options  - (<em>object</em>, optional) The <a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a> options object, plus the options described below:</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div><ul>
<li>property - (<em>string</em>) The CSS property to transition to, for example &#39;width&#39;, &#39;color&#39;, &#39;font-size&#39;, &#39;border&#39;, etc. If this option is omitted, you are required to use the property as a first argument for the start and set methods. Defaults to null.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Any CSS property that can be set with Element:setStyle can be transitioned with Fx.Tween.</li>
<li>If a property is not mathematically calculable, like border-style or background-image, it will be set immediately upon start of the transition.</li>
<li>If you use the property option, you must not use the property argument in the start and set methods.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Fx/Fx" alt="Fx">Fx</a></li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><p>Tweens the height of a element while clicking a link (which stops the default behavior), using a transition and a long duration.
It uses the <code>link</code> option so when clicking the link twice it behaves smoothly. When the start value is omitted, the current
value of the property (in this example the height property) will be used.</p>
<pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(<span class="string">'myElement'</span>, {
    duration: <span class="string">'long'</span>,
    transition: <span class="string">'bounce:out'</span>,
    link: <span class="string">'cancel'</span>,
    property: <span class="string">'height'</span>
});

document.id(<span class="string">'myLink'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop();
    myFx.start(<span class="number">40</span>, <span class="number">100</span>);
});</code></pre><p>It is also possible to use the Element properties: <code>.get(&#39;tween&#39;)</code> and <code>.set(&#39;tween&#39;)</code> and the <code>tween</code> method.
In this example the property method is not set as an option, now it should be set as argument of the <code>tween</code> method.
This is something you can choose for both the <code>Fx.Tween</code> constructor or this approach.</p>
<pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'myElement'</span>);
myElement.set(<span class="string">'tween'</span>, {
    duration: <span class="string">'long'</span>,
    transition: <span class="string">'bounce:out'</span>,
    link: <span class="string">'cancel'</span>
});

document.id(<span class="string">'myLink'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop();
    myElement.tween(<span class="string">'height'</span>, <span class="number">40</span>, <span class="number">100</span>);
});</code></pre><div class="heading clearfix"><h2><a href="#Fx-Tween:set" name="Fx-Tween:set">Fx.Tween Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sets the Element&#39;s CSS property to the specified value immediately.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.set(property, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>) The css property to set the value to. Omit this if you use the property option.</li>
<li>value - (<em>mixed</em>) The value to set the CSS property of this instance to.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Fx.Tween instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(element);
<span class="comment">// sets the background color of the element to red:</span>
myFx.set(<span class="string">'background-color'</span>, <span class="string">'#f00'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>If you use the property option, you must not use the property argument in the start and set methods.</p>
<div class="heading clearfix"><h2><a href="#Fx-Tween:start" name="Fx-Tween:start">Fx.Tween Method: start </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Transitions the Element&#39;s CSS property to the specified value.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.start([property,] [from,] to);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property - (<em>string</em>, if not in options) The css property to tween. Omit this if you use the property option.</li>
<li>from     - (<em>mixed</em>, optional) The starting CSS property value for the effect.</li>
<li>to       - (<em>mixed</em>) The target CSS property value for the effect.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Fx.Tween instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx.Tween(element);
<span class="comment">// transitions the background color of the Element from black to red:</span>
myFx.start(<span class="string">'background-color'</span>, <span class="string">'#000'</span>, <span class="string">'#f00'</span>);
<span class="comment">// transitions the background color of the Element from its current color to blue:</span>
myFx.start(<span class="string">'background-color'</span>, <span class="string">'#00f'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>If only one argument is provided, other than the property argument, the first argument to start will be used as the target value, and the initial value will be calculated from the current state of the element.</li>
<li>When using colors, either RGB or Hex values may be used.</li>
<li>If you use the property option, you must not use the property argument in the start and set methods.</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:tween" name="Element-Properties:tween">Element Property: tween </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sets and gets default options for the Fx.Tween instance of an Element.</p>
<div class="heading clearfix"><h3>Setter:</h3></div><div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'tween'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ul>
<li>options - (<em>object</em>) the Fx.Tween options.</li>
</ul>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.set(<span class="string">'tween'</span>, {duration: <span class="string">'long'</span>});
el.tween(<span class="string">'color'</span>, <span class="string">'#f00'</span>);</code></pre><div class="heading clearfix"><h3>Getter:</h3></div><div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'tween'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>property - (<em>string</em>) the Fx.Tween property argument.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>object</em>) The Element&#39;s internal Fx.Tween instance.</li>
</ul>
<div class="heading clearfix"><h4>Examples:</h4></div><pre><code class="javascript">el.get(<span class="string">'tween'</span>).start(<span class="number">0</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>When initializing the Element&#39;s tween instance with Element:set, the property to tween SHOULD NOT be passed.</li>
<li>The property must be specified when using Element:get to retrieve the actual Fx.Tween instance, and in calls to Element:tween.</li>
<li>When options are passed to the setter, the instance will be reset.</li>
<li>As with the other Element shortcuts, the difference between a setter and a getter is that the getter returns the instance, while the setter returns the element (for chaining and initialization).</li>
</ul>
<div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:tween" name="Element:tween">Element Method: tween </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Element shortcut method which immediately transitions any single CSS property of an Element from one value to another.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.tween(property, startValue[, endValue]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>property   - (<em>string</em>) the css property you want to animate. Omit this if you previously set the property option.</li>
<li>startValue - (<em>mixed</em>) The start value for the transition.</li>
<li>endValue   - (<em>mixed</em>) The end value for the transition. If this is omitted, startValue will be used as endValue.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">// transitions the width of 'myElement' from its current width to 100px:</span>
$(<span class="string">'myElement'</span>).tween(<span class="string">'width'</span>, <span class="string">'100'</span>);
<span class="comment">// transitions the height of 'myElement' from 20px to 200px:</span>
$(<span class="string">'myElement'</span>).tween(<span class="string">'height'</span>, [<span class="number">20</span>, <span class="number">200</span>]);
<span class="comment">// transitions the border of 'myElement' from its current to '6px solid blue':</span>
$(<span class="string">'myElement'</span>).tween(<span class="string">'border'</span>, <span class="string">'6px solid #36f'</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Fx-Tween" alt="Fx.Tween">Fx.Tween</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Element:fade" name="Element:fade">Element Method: fade </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Element shortcut method for tween with opacity.  Useful for fading an Element in and out or to a certain opacity level.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.fade([how]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>how - (<em>mixed</em>, optional: defaults to &#39;toggle&#39;) The opacity level as a number or string representation.  Possible values include:<ul>
<li>&#39;in&#39;     - Fade the element to 100% opacity.</li>
<li>&#39;out&#39;    - Fade the element to 0% opacity.</li>
<li>&#39;show&#39;   - Immediately set the element&#39;s opacity to 100%.</li>
<li>&#39;hide&#39;   - Immediately set the element&#39;s opacity to 0%.</li>
<li>&#39;toggle&#39; - If visible, fade the element out, otherwise, fade it in.</li>
<li>(<em>number</em>)  - A float value between 0 and 1. Will fade the element to this opacity.</li>
</ul>
</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).fade(<span class="string">'out'</span>); <span class="comment">// fades 'myElement' out.</span>
$(<span class="string">'myElement'</span>).fade(<span class="number">0.7</span>); <span class="comment">// fades 'myElement' to 70% opacity.</span></code></pre><div class="heading clearfix"><h2><a href="#Element:highlight" name="Element:highlight">Element Method: highlight </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Element shortcut method for tweening the background color.  Immediately transitions an Element&#39;s background color to a specified highlight color then back to its set background color.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.highlight([start, end]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>start - (<em>string</em>, optional: defaults to &#39;#ff8&#39;) The color from which to start the transition.</li>
<li>end - (<em>string</em>, optional: defaults to Element&#39;s set background-color) The background color to return to after the highlight effect.</li>
</ol>
<div class="heading clearfix"><h3>Note:</h3></div><p>If no background color is set on the Element, or its background color is set to &#39;transparent&#39;, the default end value will be white.</p>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">//immediately changes the background to light blue, then back to its original color (or white):</span>
$(<span class="string">'myElement'</span>).highlight(<span class="string">'#ddf'</span>);

<span class="comment">//immediately changes the background to light blue, then fades to grey:</span>
$(<span class="string">'myElement'</span>).highlight(<span class="string">'#ddf'</span>, <span class="string">'#ccc'</span>);</code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Fx" name="Fx">Class: Fx </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This Class will rarely be used on its own, but provides the foundation for all custom Fx Classes.
All of the other Fx Classes inherit from this one.</p>
<div class="heading clearfix"><h3>Implements:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Class/Class.Extras#Chain" alt="Chain">Chain</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Events" alt="Events">Events</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Options" alt="Options">Options</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:constructor" name="Fx:constructor">Fx Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>options - (<em>object</em>, optional) An object with options for the effect. See below.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div>
<ul>
<li>fps        - (<em>number</em>: defaults to 50) The frames per second for the transition.</li>
<li>frames     - (<em>number</em>) The numbers of frames in the animation, defaults to the duration and fps calculations.</li>
<li>frameSkip  - (<em>boolean</em>: defaults to true) If sets to true, it evaluates the current frame based on the current time.</li>
<li>unit       - (<em>string</em>: defaults to false) The unit, e.g. &#39;px&#39;, &#39;em&#39;, or &#39;%&#39;. See <a href="/core/docs/1.5.1/Element/Element.Style#Element:setStyle" alt="Element:setStyle">Element:setStyle</a>.</li>
<li>link       - (<em>string</em>: defaults to ignore) Can be &#39;ignore&#39;, &#39;cancel&#39; and &#39;chain&#39;.

<ul>
<li>&#39;ignore&#39; - Any calls made to start while the effect is running will be ignored. (Synonymous with &#39;wait&#39;: true from 1.x)</li>
<li>&#39;cancel&#39; - Any calls made to start while the effect is running will take precedence over the currently running transition. The new transition will start immediately, canceling the one that is currently running. (Synonymous with &#39;wait&#39;: false from 1.x)</li>
<li>&#39;chain&#39;  - Any calls made to start while the effect is running will be chained up, and will take place as soon as the current effect has finished, one after another.</li>
</ul></li>
<li>duration   - (<em>number</em>: defaults to 500) The duration of the effect in ms. Can also be one of:

<ul>
<li>&#39;short&#39;  - 250ms</li>
<li>&#39;normal&#39; - 500ms</li>
<li>&#39;long&#39;   - 1000ms</li>
</ul></li>
<li><p>transition - (<em>function</em>: defaults to <a href="/core/docs/1.5.1/Fx/Fx.Transitions#Fx-Transitions:sine" alt="&amp;#39;sine:in:out&amp;#39;">&#39;sine:in:out&#39;</a> The equation to use for the effect see <a href="/core/docs/1.5.1/Fx/Fx.Transitions" alt="Fx.Transitions">Fx.Transitions</a>. Also accepts a string in the following form:</p>

<p>transition[:in][:out] - for example, &#39;linear&#39;, &#39;quad:in&#39;, &#39;back:in&#39;, &#39;bounce:out&#39;, &#39;elastic:out&#39;, &#39;sine:in:out&#39;</p></li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div>
<ul>
<li>start         - (<em>function</em>) The function to execute when the effect begins.</li>
<li>cancel        - (<em>function</em>) The function to execute when you manually stop the effect.</li>
<li>complete      - (<em>function</em>) The function to execute after the effect has processed.</li>
<li>chainComplete - (<em>function</em>) The function to execute when using link &#39;chain&#39; (<a href="#Fx:constructor" alt="see options">see options</a>). It gets called after all effects in the chain have completed.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>You cannot change the transition if you haven&#39;t included Fx.Transitions.js, (unless you plan on developing your own curve). ;)</li>
<li>The Fx Class is just a skeleton for other Classes to extend the basic functionality.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a>, <a href="/core/docs/1.5.1/Fx/Fx.Morph" alt="Fx.Morph">Fx.Morph</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:start" name="Fx:start">Fx Method: start </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The start method is used to begin a transition.  Fires the &#39;start&#39; event.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.start(from[, to]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>from - (<em>mixed</em>) The starting value for the effect. If only one argument is provided, this value will be used as the target value.</li>
<li>to   - (<em>mixed</em>, optional) The target value for the effect.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div>
<ul>
<li>See examples in the documentation for each Fx subclass.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>If only one parameter is provided, the first argument to start will be used as the target value, and the initial value will be calculated from the current state of the element.</li>
<li>The format and type of this value will be dependent upon implementation, and may vary greatly on a case by case basis.  Check each implementation for more details.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:set" name="Fx:set">Fx Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The set method is fired on every step of a transition.  It can also be called manually to set a specific value to be immediately applied to the effect.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.set(value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>value - (<em>mixed</em>) The value to immediately apply to the transition.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div>
<ul>
<li>See examples in the documentation for each Fx subclass.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:cancel" name="Fx:cancel">Fx Method: cancel </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>The cancel method is used to cancel a running transition.  Fires the &#39;cancel&#39; event.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.cancel();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:pause" name="Fx:pause">Fx Method: pause </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Temporarily pause a currently running effect.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.pause();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>The timer will be stopped to allow the effect to continue where it left off by calling <a href="#Fx:resume" alt="Fx:resume">Fx:resume</a>.</li>
<li>If you call start on a paused effect, the timer will simply be cleared allowing the new transition to start.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:resume" name="Fx:resume">Fx Method: resume </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Resume a previously paused effect.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.resume();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>The effect will only be resumed if it has been previously paused.  Otherwise, the call to resume will be ignored.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:isRunning" name="Fx:isRunning">Fx Method: isRunning </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns true if the animation is running.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> isRunning = myFx.isRunning();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) - If the animation is running, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Returns false if the animation is paused.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:isPaused" name="Fx:isPaused">Fx Method: isPaused </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns true if the animation is paused. You can use this to check if you need to call <a href="#Fx:resume" alt="Fx:resume">Fx:resume</a> to resume an animation instead of restarting it.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> isPaused = myFx.isPaused();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) - If the animation is paused, returns true. Otherwise, returns false.</li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Fx" name="Fx">Class: Fx </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>This Class will rarely be used on its own, but provides the foundation for all custom Fx Classes.
All of the other Fx Classes inherit from this one.</p>
<div class="heading clearfix"><h3>Implements:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Class/Class.Extras#Chain" alt="Chain">Chain</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Events" alt="Events">Events</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Options" alt="Options">Options</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:constructor" name="Fx:constructor">Fx Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFx = <span class="keyword">new</span> Fx([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>options - (<em>object</em>, optional) An object with options for the effect. See below.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div><ul>
<li>fps        - (<em>number</em>: defaults to 50) The frames per second for the transition.</li>
<li>frames     - (<em>number</em>) The numbers of frames in the animation, defaults to the duration and fps calculations.</li>
<li>frameSkip  - (<em>boolean</em>: defaults to true) If sets to true, it evaluates the current frame based on the current time.</li>
<li>unit       - (<em>string</em>: defaults to false) The unit, e.g. &#39;px&#39;, &#39;em&#39;, or &#39;%&#39;. See <a href="/core/docs/1.5.1/Element/Element.Style#Element:setStyle" alt="Element:setStyle">Element:setStyle</a>.</li>
<li>link       - (<em>string</em>: defaults to ignore) Can be &#39;ignore&#39;, &#39;cancel&#39; and &#39;chain&#39;.<ul>
<li>&#39;ignore&#39; - Any calls made to start while the effect is running will be ignored. (Synonymous with &#39;wait&#39;: true from 1.x)</li>
<li>&#39;cancel&#39; - Any calls made to start while the effect is running will take precedence over the currently running transition. The new transition will start immediately, canceling the one that is currently running. (Synonymous with &#39;wait&#39;: false from 1.x)</li>
<li>&#39;chain&#39;  - Any calls made to start while the effect is running will be chained up, and will take place as soon as the current effect has finished, one after another.</li>
</ul>
</li>
<li>duration   - (<em>number</em>: defaults to 500) The duration of the effect in ms. Can also be one of:<ul>
<li>&#39;short&#39;  - 250ms</li>
<li>&#39;normal&#39; - 500ms</li>
<li>&#39;long&#39;   - 1000ms</li>
</ul>
</li>
<li><p>transition - (<em>function</em>: defaults to <a href="/core/docs/1.5.1/Fx/Fx.Transitions#Fx-Transitions:sine" alt="&amp;#39;sine:in:out&amp;#39;">&#39;sine:in:out&#39;</a> The equation to use for the effect see <a href="/core/docs/1.5.1/Fx/Fx.Transitions" alt="Fx.Transitions">Fx.Transitions</a>. Also accepts a string in the following form:</p>
<p>transition[:in][:out] - for example, &#39;linear&#39;, &#39;quad:in&#39;, &#39;back:in&#39;, &#39;bounce:out&#39;, &#39;elastic:out&#39;, &#39;sine:in:out&#39;</p>
</li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div><ul>
<li>start            - (<em>function</em>) The function to execute when the effect begins.</li>
<li>cancel           - (<em>function</em>) The function to execute when you manually stop the effect.</li>
<li>complete         - (<em>function</em>) The function to execute after the effect has processed.</li>
<li>chainComplete    - (<em>function</em>) The function to execute when using link &#39;chain&#39; (<a href="#Fx:constructor" alt="see options">see options</a>). It gets called after all effects in the chain have completed.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>You cannot change the transition if you haven&#39;t included Fx.Transitions.js, (unless you plan on developing your own curve). ;)</li>
<li>The Fx Class is just a skeleton for other Classes to extend the basic functionality.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a>, <a href="/core/docs/1.5.1/Fx/Fx.Morph" alt="Fx.Morph">Fx.Morph</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:start" name="Fx:start">Fx Method: start </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The start method is used to begin a transition.  Fires the &#39;start&#39; event.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.start(from[, to]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>from - (<em>mixed</em>) The starting value for the effect. If only one argument is provided, this value will be used as the target value.</li>
<li>to   - (<em>mixed</em>, optional) The target value for the effect.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><ul>
<li>See examples in the documentation for each Fx subclass.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>If only one parameter is provided, the first argument to start will be used as the target value, and the initial value will be calculated from the current state of the element.</li>
<li>The format and type of this value will be dependent upon implementation, and may vary greatly on a case by case basis.  Check each implementation for more details.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:set" name="Fx:set">Fx Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The set method is fired on every step of a transition.  It can also be called manually to set a specific value to be immediately applied to the effect.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.set(value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>value - (<em>mixed</em>) The value to immediately apply to the transition.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><ul>
<li>See examples in the documentation for each Fx subclass.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:cancel" name="Fx:cancel">Fx Method: cancel </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>The cancel method is used to cancel a running transition.  Fires the &#39;cancel&#39; event.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.cancel();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:pause" name="Fx:pause">Fx Method: pause </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Temporarily pause a currently running effect.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.pause();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>The timer will be stopped to allow the effect to continue where it left off by calling <a href="#Fx:resume" alt="Fx:resume">Fx:resume</a>.</li>
<li>If you call start on a paused effect, the timer will simply be cleared allowing the new transition to start.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:resume" name="Fx:resume">Fx Method: resume </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Resume a previously paused effect.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFx.resume();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) - This Fx instance.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>The effect will only be resumed if it has been previously paused.  Otherwise, the call to resume will be ignored.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:isRunning" name="Fx:isRunning">Fx Method: isRunning </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns true if the animation is running.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> isRunning = myFx.isRunning();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) - If the animation is running, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Returns false if the animation is paused.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Fx:isPaused" name="Fx:isPaused">Fx Method: isPaused </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns true if the animation is paused. You can use this to check if you need to call <a href="#Fx:resume" alt="Fx:resume">Fx:resume</a> to resume an animation instead of restarting it.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> isPaused = myFx.isPaused();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) - If the animation is paused, returns true. Otherwise, returns false.</li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#MooTools-API-Documentation" name="MooTools-API-Documentation">MooTools API Documentation</a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Popular-Pages" name="Popular-Pages">Popular Pages</a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<ul>
<li><a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a> - Use MooTools with Class</li>
<li><a href="/core/docs/1.5.1/Element/Element" alt="Element">Element</a> - Interact with the DOM</li>
<li><a href="/core/docs/1.5.1/Element/Element.Event" alt="Element.Event">Element.Event</a> - Add events to DOM Elements</li>
<li><a href="/core/docs/1.5.1/Element/Element.Delegation" alt="Element.Delegation">Element.Delegation</a> - Event Delegation</li>
<li><a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a> - Create effects for single properties</li>
<li><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a> - An XMLHttpRequest Wrapper</li>
</ul>
<div class="heading clearfix"><h2><a href="#Interesting-Blogposts" name="Interesting-Blogposts">Interesting Blogposts</a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<ul>
<li><a href="http://mootools.net/blog/2010/06/10/setting-up-elements/" alt="Setting Up Elements">Setting Up Elements</a></li>
<li><a href="http://mootools.net/blog/2010/05/18/a-magical-journey-into-the-base-fx-class/" alt="A Magical Journey into the Base Fx Class">A Magical Journey into the Base Fx Class</a></li>
<li><a href="http://mootools.net/blog/2010/03/23/get-friendly-with-the-natives/" alt="Get friendly with the Natives">Get friendly with the Natives</a></li>
<li><a href="http://mootools.net/blog/2010/03/19/a-better-way-to-use-elements/" alt="A Better Way to use Elements">A Better Way to use Elements</a></li>
<li><a href="http://mootools.net/blog/2011/03/28/events-with-mootools-element-class-delegation-and-pseudos/" alt="Events with MooTools - Element, Class, Delegation and Pseudos">Events with MooTools - Element, Class, Delegation and Pseudos</a></li>
<li><a href="http://mootools.net/blog/2012/08/13/optimizing-mootools-builds-sans-internet-explorer/" alt="Optimizing MooTools builds sans Internet Explorer">Optimizing MooTools builds sans Internet Explorer</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Previous-Versions-Documentation" name="Previous-Versions-Documentation">Previous Versions Documentation</a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<ul>
<li><a href="1.2.6" alt="MooTools 1.2.6 Docs">MooTools 1.2.6 Docs</a></li>
<li><a href="http://docs111.mootools.net/" alt="MooTools 1.1 Docs">MooTools 1.1 Docs</a></li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#MooTools-API-Documentation" name="MooTools-API-Documentation">MooTools API Documentation</a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Popular-Pages" name="Popular-Pages">Popular Pages</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><ul>
<li><a href="/core/docs/1.5.1/Class/Class" alt="Class">Class</a> - Use MooTools with Class</li>
<li><a href="/core/docs/1.5.1/Element/Element" alt="Element">Element</a> - Interact with the DOM</li>
<li><a href="/core/docs/1.5.1/Element/Element.Event" alt="Element.Event">Element.Event</a> - Add events to DOM Elements</li>
<li><a href="/core/docs/1.5.1/Element/Element.Delegation" alt="Element.Delegation">Element.Delegation</a> - Event Delegation</li>
<li><a href="/core/docs/1.5.1/Fx/Fx.Tween" alt="Fx.Tween">Fx.Tween</a> - Create effects for single properties</li>
<li><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a> - An XMLHttpRequest Wrapper</li>
</ul>
<div class="heading clearfix"><h2><a href="#Interesting-Blogposts" name="Interesting-Blogposts">Interesting Blogposts</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><ul>
<li><a href="http://mootools.net/blog/2010/06/10/setting-up-elements/" alt="Setting Up Elements">Setting Up Elements</a></li>
<li><a href="http://mootools.net/blog/2010/05/18/a-magical-journey-into-the-base-fx-class/" alt="A Magical Journey into the Base Fx Class">A Magical Journey into the Base Fx Class</a></li>
<li><a href="http://mootools.net/blog/2010/03/23/get-friendly-with-the-natives/" alt="Get friendly with the Natives">Get friendly with the Natives</a></li>
<li><a href="http://mootools.net/blog/2010/03/19/a-better-way-to-use-elements/" alt="A Better Way to use Elements">A Better Way to use Elements</a></li>
<li><a href="http://mootools.net/blog/2011/03/28/events-with-mootools-element-class-delegation-and-pseudos/" alt="Events with MooTools - Element, Class, Delegation and Pseudos">Events with MooTools - Element, Class, Delegation and Pseudos</a></li>
<li><a href="http://mootools.net/blog/2012/08/13/optimizing-mootools-builds-sans-internet-explorer/" alt="Optimizing MooTools builds sans Internet Explorer">Optimizing MooTools builds sans Internet Explorer</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Previous-Versions-Documentation" name="Previous-Versions-Documentation">Previous Versions Documentation</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><ul>
<li><a href="1.2.6" alt="MooTools 1.2.6 Docs">MooTools 1.2.6 Docs</a></li>
<li><a href="http://docs111.mootools.net/" alt="MooTools 1.1 Docs">MooTools 1.1 Docs</a></li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Request-HTML" name="Request-HTML">Class: Request.HTML </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Request Specifically made for receiving HTML.</p>
<div class="heading clearfix"><h3>Extends:</h3></div>
<p><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>options - (<em>object</em>, optional) See options below.  Also inherited are all the options from <a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a>.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div>
<ul>
<li>evalScripts  - (<em>boolean</em>: defaults to true) If set to true, <code>script</code> tags inside the response will be evaluated. This overrides the <code>false</code> default from Request.</li>
<li>update - (<em>element</em>: defaults to null) The Element to insert the response text of the Request into upon completion of the request.</li>
<li>append - (<em>element</em>: defaults to null) The Element to append the response text of the Request into upon completion of the request.</li>
<li>filter - (<em>mixed</em>: defaults to null) To filter the response tree by a selector or function. See <a href="/core/docs/1.5.1/Element/Element#Elements:filter" alt="Elements:filter">Elements:filter</a></li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div><div class="heading clearfix"><h4>success</h4></div>
<ul>
<li>(<em>function</em>) Function to execute when the HTML request completes. This overrides the signature of the Request success event.</li>
</ul>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onSuccess(responseTree, responseElements, responseHTML, responseJavaScript)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>responseTree       - (<em>element</em>) The node list of the remote response.</li>
<li>responseElements   - (<em>array</em>)   An array containing all elements of the remote response.</li>
<li>responseHTML       - (<em>string</em>)  The content of the remote response.</li>
<li>responseJavaScript - (<em>string</em>)  The portion of JavaScript from the remote response.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) A new Request.HTML instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Simple GET Request:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML().get(<span class="string">'myPage.html'</span>);</code></pre><div class="heading clearfix"><h4>POST Request with data as String:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML({url: <span class="string">'myPage.html'</span>}).post(<span class="string">'user_id=25&amp;save=true'</span>);</code></pre><div class="heading clearfix"><h4>Data from Object Passed via GET:</h4></div><pre><code class="javascript"><span class="comment">//Loads "load/?user_id=25".</span>
<span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML({url: <span class="string">'load/'</span>}).get({<span class="string">'user_id'</span>: <span class="number">25</span>});</code></pre><div class="heading clearfix"><h4>Data from Element via POST:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"save/"</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">id</span>=<span class="value">"user-form"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>
        Search: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"search"</span> /&gt;</span>
        Search in description: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"search_description"</span> <span class="attribute">value</span>=<span class="value">"yes"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="comment">//Needs to be in a submit event or the form handler.</span>
<span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML({url: <span class="string">'save/'</span>}).post($(<span class="string">'user-form'</span>));</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
<div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:load" name="Element-Properties:load">Element Property: load </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter</h3></div>
<p>Sets a default Request.HTML instance for an Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'load'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>options - (<em>object</em>) The Request options.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>element</em>) The target Element.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">el.set(<span class="string">'load'</span>, {evalScripts: <span class="literal">true</span>});
el.load(<span class="string">'some/request/uri'</span>);</code></pre><div class="heading clearfix"><h3>Getter</h3></div>
<p>Returns either the previously set Request.HTML instance or a new one with default options.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'load'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>property - (<em>string</em>) the Request.HTML property argument.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>object</em>) The Request instance.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">el.set(<span class="string">'load'</span>, {method: <span class="string">'get'</span>});
el.load(<span class="string">'test.html'</span>);
<span class="comment">// the getter returns the Request.HTML instance, making its class methods available.</span>
el.get(<span class="string">'load'</span>).post(<span class="string">'http://localhost/script'</span>);</code></pre><div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:load" name="Element:load">Element Method: load </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Updates the content of the Element with a Request.HTML GET request.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.load(url);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>url - (<em>string</em>) The URL pointing to the server-side document.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>element</em>) The target Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span>Loading content...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'content'</span>).load(<span class="string">'page_1.html'</span>);</code></pre><div class="heading clearfix"><h3>Cross-Origin Resource Sharing (CORS) note:</h3></div>
<p>The Request.HTML class will (by default) add a custom header that, if used for a cross-origin request, will have to be reported as allowed in the preflight request, in addition to any other headers you may set yourself:</p>
<pre><code class="javascript">Access-Control-Allow-Headers: X-Requested-With</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>, <a href="/Request/docs/1.5.1/Request/Request" alt="Request">Request</a></li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Request-HTML" name="Request-HTML">Class: Request.HTML </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Request Specifically made for receiving HTML.</p>
<div class="heading clearfix"><h3>Extends:</h3></div><p><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>options - (<em>object</em>, optional) See options below.  Also inherited are all the options from <a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a>.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div><ul>
<li>evalScripts  - (<em>boolean</em>: defaults to true) If set to true, <code>script</code> tags inside the response will be evaluated. This overrides the <code>false</code> default from Request.</li>
<li>update - (<em>element</em>: defaults to null) The Element to insert the response text of the Request into upon completion of the request.</li>
<li>append - (<em>element</em>: defaults to null) The Element to append the response text of the Request into upon completion of the request.</li>
<li>filter - (<em>mixed</em>: defaults to null) To filter the response tree by a selector or function. See <a href="/core/docs/1.5.1/Element/Element#Elements:filter" alt="Elements:filter">Elements:filter</a></li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div><div class="heading clearfix"><h4>success</h4></div><ul>
<li>(<em>function</em>) Function to execute when the HTML request completes. This overrides the signature of the Request success event.</li>
</ul>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onSuccess(responseTree, responseElements, responseHTML, responseJavaScript)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>responseTree       - (<em>element</em>) The node list of the remote response.</li>
<li>responseElements   - (<em>array</em>)   An array containing all elements of the remote response.</li>
<li>responseHTML          - (<em>string</em>)  The content of the remote response.</li>
<li>responseJavaScript - (<em>string</em>)  The portion of JavaScript from the remote response.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) A new Request.HTML instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h4>Simple GET Request:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML().get(<span class="string">'myPage.html'</span>);</code></pre><div class="heading clearfix"><h4>POST Request with data as String:</h4></div><pre><code class="javascript"><span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML({url: <span class="string">'myPage.html'</span>}).post(<span class="string">'user_id=25&amp;save=true'</span>);</code></pre><div class="heading clearfix"><h4>Data from Object Passed via GET:</h4></div><pre><code class="javascript"><span class="comment">//Loads "load/?user_id=25".</span>
<span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML({url: <span class="string">'load/'</span>}).get({<span class="string">'user_id'</span>: <span class="number">25</span>});</code></pre><div class="heading clearfix"><h4>Data from Element via POST:</h4></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"save/"</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">id</span>=<span class="value">"user-form"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>
        Search: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"search"</span> /&gt;</span>
        Search in description: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"search_description"</span> <span class="attribute">value</span>=<span class="value">"yes"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript"><span class="comment">//Needs to be in a submit event or the form handler.</span>
<span class="keyword">var</span> myHTMLRequest = <span class="keyword">new</span> Request.HTML({url: <span class="string">'save/'</span>}).post($(<span class="string">'user-form'</span>));</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
<div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:load" name="Element-Properties:load">Element Property: load </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter</h3></div><p>Sets a default Request.HTML instance for an Element.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'load'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>options - (<em>object</em>) The Request options.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>element</em>) The target Element.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">el.set(<span class="string">'load'</span>, {evalScripts: <span class="literal">true</span>});
el.load(<span class="string">'some/request/uri'</span>);</code></pre><div class="heading clearfix"><h3>Getter</h3></div><p>Returns either the previously set Request.HTML instance or a new one with default options.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'load'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>property - (<em>string</em>) the Request.HTML property argument.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>object</em>) The Request instance.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">el.set(<span class="string">'load'</span>, {method: <span class="string">'get'</span>});
el.load(<span class="string">'test.html'</span>);
<span class="comment">// the getter returns the Request.HTML instance, making its class methods available.</span>
el.get(<span class="string">'load'</span>).post(<span class="string">'http://localhost/script'</span>);</code></pre><div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:load" name="Element:load">Element Method: load </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Updates the content of the Element with a Request.HTML GET request.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.load(url);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>url - (<em>string</em>) The URL pointing to the server-side document.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>element</em>) The target Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span>Loading content...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'content'</span>).load(<span class="string">'page_1.html'</span>);</code></pre><div class="heading clearfix"><h3>Cross-Origin Resource Sharing (CORS) note:</h3></div><p>The Request.HTML class will (by default) add a custom header that, if used for a cross-origin request, will have to be reported as allowed in the preflight request, in addition to any other headers you may set yourself:</p>
<pre><code class="javascript">Access-Control-Allow-Headers: X-Requested-With</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>, <a href="/Request/docs/1.5.1/Request/Request" alt="Request">Request</a></li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Request-JSON" name="Request-JSON">Class: Request.JSON </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Wrapped Request with automated receiving of JavaScript Objects in JSON Format.</p>
<div class="heading clearfix"><h3>Extends:</h3></div>
<p><a href="/Request/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myJSONRemote = <span class="keyword">new</span> Request.JSON([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>options - (<em>object</em>, optional) See below.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div>
<ul>
<li>secure  - (<em>boolean</em>: defaults to true) If set to true, a syntax check will be done on the result JSON (see <a href="/Utilities/docs/1.5.1/Utilities/JSON#JSON:decode" alt="JSON.decode">JSON.decode</a>).</li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div><div class="heading clearfix"><h4>success</h4></div>
<p>Fired when the request completes. This overrides the signature of the Request success event.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onSuccess(responseJSON, responseText)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>responseJSON - (<em>object</em>) The JSON response object from the remote request.</li>
<li>responseText - (<em>string</em>) The JSON response as string.</li>
</ol>
<div class="heading clearfix"><h4>error</h4></div>
<p>Fired when the parsed JSON is not valid and the secure option is set.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onError(text, error)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>text - (string) The response text.</li>
<li>error - (string) The error message.</li>
</ol>
<div class="heading clearfix"><h4>failure</h4></div>
<p>Fired when the request failed (error status code).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onFailure(xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<p>xhr - (XMLHttpRequest) The transport instance.</p>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) A new Request.JSON instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">// this code will send a data object via a GET request and alert the retrieved data.</span>
<span class="keyword">var</span> jsonRequest = <span class="keyword">new</span> Request.JSON({url: <span class="string">'http://site.com/tellMeAge.php'</span>, onSuccess: <span class="keyword">function</span>(person){
    alert(person.age);    <span class="comment">// alerts "25 years".</span>
    alert(person.height); <span class="comment">// alerts "170 cm".</span>
    alert(person.weight); <span class="comment">// alerts "120 kg".</span>
}}).get({<span class="string">'firstName'</span>: <span class="string">'John'</span>, <span class="string">'lastName'</span>: <span class="string">'Doe'</span>});</code></pre><div class="heading clearfix"><h3>Cross-Origin Resource Sharing (CORS) note:</h3></div>
<p>The Request.JSON class will (by default) add two custom headers that, if used for a cross-origin request, will have to be reported as allowed in the preflight request, in addition to any other headers you may set yourself:</p>
<pre><code class="javascript">Access-Control-Allow-Headers: X-Requested-With, X-Request</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
+R*****<div class="heading clearfix"><h1><a href="#Request-JSON" name="Request-JSON">Class: Request.JSON </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Wrapped Request with automated receiving of JavaScript Objects in JSON Format.</p>
<div class="heading clearfix"><h3>Extends:</h3></div><p><a href="/Request/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myJSONRemote = <span class="keyword">new</span> Request.JSON([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>options - (<em>object</em>, optional) See below.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div><ul>
<li>secure  - (<em>boolean</em>: defaults to true) If set to true, a syntax check will be done on the result JSON (see <a href="/Utilities/docs/1.5.1/Utilities/JSON#JSON:decode" alt="JSON.decode">JSON.decode</a>).</li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div><div class="heading clearfix"><h4>success</h4></div><p>Fired when the request completes. This overrides the signature of the Request success event.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onSuccess(responseJSON, responseText)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>responseJSON - (<em>object</em>) The JSON response object from the remote request.</li>
<li>responseText - (<em>string</em>) The JSON response as string.</li>
</ol>
<div class="heading clearfix"><h4>error</h4></div><p>Fired when the parsed JSON is not valid and the secure option is set.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onError(text, error)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>text - (string) The response text.</li>
<li>error - (string) The error message.</li>
</ol>
<div class="heading clearfix"><h4>failure</h4></div><p>Fired when the request failed (error status code).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onFailure(xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><p>xhr - (XMLHttpRequest) The transport instance.</p>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) A new Request.JSON instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">// this code will send a data object via a GET request and alert the retrieved data.</span>
<span class="keyword">var</span> jsonRequest = <span class="keyword">new</span> Request.JSON({url: <span class="string">'http://site.com/tellMeAge.php'</span>, onSuccess: <span class="keyword">function</span>(person){
    alert(person.age);    <span class="comment">// alerts "25 years".</span>
    alert(person.height); <span class="comment">// alerts "170 cm".</span>
    alert(person.weight); <span class="comment">// alerts "120 kg".</span>
}}).get({<span class="string">'firstName'</span>: <span class="string">'John'</span>, <span class="string">'lastName'</span>: <span class="string">'Doe'</span>});</code></pre><div class="heading clearfix"><h3>Cross-Origin Resource Sharing (CORS) note:</h3></div><p>The Request.JSON class will (by default) add two custom headers that, if used for a cross-origin request, will have to be reported as allowed in the preflight request, in addition to any other headers you may set yourself:</p>
<pre><code class="javascript">Access-Control-Allow-Headers: X-Requested-With, X-Request</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="/core/docs/1.5.1/Request/Request" alt="Request">Request</a></p>
+M-----+++++<div class="heading clearfix"><h1><a href="#Request" name="Request">Class: Request </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>An XMLHttpRequest Wrapper.</p>
<div class="heading clearfix"><h3>Implements:</h3></div>
<p><a href="/core/docs/1.5.1/Class/Class.Extras#Chain" alt="Chain">Chain</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Events" alt="Events">Events</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Options" alt="Options">Options</a></p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>options - (<em>object</em>, optional) See below.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div>
<ul>
<li>url        - (<em>string</em>: defaults to <em>null</em>) The URL to request. (Note, this can also be an instance of <a href="/more/docs/1.5.1/Types/URI" alt="URI">URI</a>)</li>
<li>data       - (<em>mixed</em>: defaults to &#39;&#39;) The default data for <a href="#Request:send" alt="Request:send">Request:send</a>, used when no data is given. Can be an Element, Object or String. If an Object is passed the <a href="/core/docs/1.5.1/Types/Object#Object:Object-toQueryString" alt="Object:toQueryString">Object:toQueryString</a> method will be used to convert the object to a string. If an Element is passed the <a href="/core/docs/1.5.1/Element/Element#Element:toQueryString" alt="Element:toQueryString">Element:toQueryString</a> method will be used to convert the Element to a string.</li>
<li>format     - (<em>string</em>: defaults to &#39;&#39;) If passed, an additional key &#39;format&#39; will be appended to &#39;data&#39; with the passed value. e.g. &#39;&amp;format=json&#39;</li>
<li>link       - (<em>string</em>: defaults to &#39;ignore&#39;) Can be &#39;ignore&#39;, &#39;cancel&#39; and &#39;chain&#39;.

<ul>
<li>&#39;ignore&#39; - Any calls made to start while the request is running will be ignored. (Synonymous with &#39;wait&#39;: true from 1.11)</li>
<li>&#39;cancel&#39; - Any calls made to start while the request is running will take precedence over the currently running request. The new request will start immediately, canceling the one that is currently running. (Synonymous with &#39;wait&#39;: false from 1.11)</li>
<li>&#39;chain&#39;  - Any calls made to start while the request is running will be chained up, and will take place as soon as the current request has finished, one after another.</li>
</ul></li>
<li>method     - (<em>string</em>: defaults to &#39;post&#39;) The HTTP method for the request, can be either &#39;post&#39; or &#39;get&#39;.</li>
<li>emulation  - (<em>boolean</em>: defaults to <em>true</em>) If set to true, other methods than &#39;post&#39; or &#39;get&#39; are appended as post-data named &#39;_method&#39; (as used in rails)</li>
<li>async      - (<em>boolean</em>: defaults to <em>true</em>) If set to false, the requests will be synchronous and freeze the browser during request.</li>
<li>timeout    - (<em>integer</em>: defaults to 0) In conjunction with <code>onTimeout</code> event, it determines the amount of milliseconds before considering a connection timed out. (It&#39;s suggested to not use timeout with big files and only when knowing what&#39;s expected.)</li>
<li>headers    - (<em>object</em>) An object to use in order to set the request headers.</li>
<li>urlEncoded - (<em>boolean</em>: defaults to <em>true</em>) If set to true, the content-type header is set to www-form-urlencoded + encoding</li>
<li>encoding   - (<em>string</em>: defaults to &#39;utf-8&#39;) The encoding to be set in the request header.</li>
<li>noCache    - (<em>boolean</em>; defaults to <em>false</em>) If <em>true</em>, appends a unique <em>noCache</em> value to the request to prevent caching. (IE and iOS 6 have a bad habit of caching ajax request values. Including this script and setting the <em>noCache</em> value to true will prevent it from caching. The server should ignore the <em>noCache</em> value.)</li>
<li>isSuccess  - (<em>function</em>) Overrides the built-in isSuccess function.</li>
<li>evalScripts  - (<em>boolean</em>: defaults to <em>false</em>) If set to true, <code>script</code> tags inside the response will be evaluated.</li>
<li>evalResponse - (<em>boolean</em>: defaults to <em>false</em>) If set to true, the entire response will be evaluated. Responses with javascript content-type will be evaluated automatically.</li>
<li>user       - (<em>string</em>: defaults to <em>null</em>) The username to use for http basic authentication.</li>
<li>password   - (<em>string</em>: defaults to <em>null</em>) You can use this option together with the <code>user</code> option to set authentication credentials when necessary. Note that the password will be passed as plain text and is therefore readable by anyone through the source code. It is therefore encouraged to use this option carefully</li>
<li>withCredentials   - (<em>boolean</em>: defaults to <em>false</em>) If set to true, xhr.withCredentials will be set to true allowing cookies/auth to be passed for cross origin requests</li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div><div class="heading clearfix"><h4>request</h4></div>
<p>Fired when the Request is sent.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onRequest()</code></pre><div class="heading clearfix"><h4>loadstart</h4></div>
<p>Fired when the Request loaded, right before any progress starts. (This is limited to Browsers that support the event. At this time: Gecko and WebKit).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onLoadstart(event, xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>event - (Event) The loadstart event.</li>
<li>xhr - (XMLHttpRequest) The transport instance.</li>
</ol>
<div class="heading clearfix"><h4>progress</h4></div>
<p>Fired when the Request is making progresses in the download or upload. (This is limited to Browsers that support the event. At this time: Gecko and WebKit).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onProgress(event, xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>event - (Event) The progress event, containing currently downloaded bytes and total bytes.</li>
<li>xhr - (XMLHttpRequest) The transport instance.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({
    url: <span class="string">'image.jpg'</span>,
    onProgress: <span class="keyword">function</span>(event, xhr){
        <span class="keyword">var</span> loaded = event.loaded, total = event.total;

        console.log(parseInt(loaded / total * <span class="number">100</span>, <span class="number">10</span>));
    }
});

myRequest.send();</code></pre><div class="heading clearfix"><h3>Cross-Origin Resource Sharing (CORS) note:</h3></div>
<p>The Request class will (by default) add a custom header that, if used for a cross-origin request, will have to be reported as allowed in the preflight request, in addition to any other headers you may set yourself:</p>
<pre><code class="javascript">Access-Control-Allow-Headers: X-Requested-With</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIDOMProgressEvent" alt="MDN: nsIDOMProgressEvent">MDN: nsIDOMProgressEvent</a></li>
</ul>
<div class="heading clearfix"><h4>complete</h4></div>
<p>Fired when the Request is completed.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onComplete()</code></pre><div class="heading clearfix"><h4>cancel</h4></div>
<p>Fired when a request has been cancelled.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onCancel()</code></pre><div class="heading clearfix"><h4>success</h4></div>
<p>Fired when the Request is completed successfully.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onSuccess(responseText, responseXML)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>responseText - (<em>string</em>) The returned text from the request.</li>
<li>responseXML  - (<em>mixed</em>) The response XML from the request.</li>
</ol>
<div class="heading clearfix"><h4>failure</h4></div>
<p>Fired when the request failed (error status code).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onFailure(xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<p>xhr - (XMLHttpRequest) The transport instance.</p>
<div class="heading clearfix"><h4>exception</h4></div>
<p>Fired when setting a request header fails.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onException(headerName, value)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>headerName - (<em>string</em>) The name of the failing header.</li>
<li>value      - (<em>string</em>) The value of the failing header.</li>
</ol>
<div class="heading clearfix"><h3>Properties:</h3></div>
<ul>
<li>response - (<em>object</em>) Object with text and XML as keys. You can access this property in the &#39;success&#39; event.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) A new Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({method: <span class="string">'get'</span>, url: <span class="string">'requestHandler.php'</span>});
myRequest.send(<span class="string">'name=john&amp;lastname=dorian'</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="http://en.wikipedia.org/wiki/XMLHttpRequest" alt="Wikipedia: XMLHttpRequest">Wikipedia: XMLHttpRequest</a></li>
</ul>
<div class="heading clearfix"><h4>timeout</h4></div>
<p>Fired when a request doesn&#39;t change state for <code>options.timeout</code> milliseconds.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onTimeout()</code></pre><div class="heading clearfix"><h3>Example:</h3></div>
<p>This example fetches some text with Request. When the user clicks the link, the returned text by the server is used to update
the element&#39;s text. It uses the <code>onRequest</code>, <code>onSuccess</code> and <code>onFailure</code> events to inform the user about the current state of
the request. The <code>method</code> option is set to <code>get</code> because we get some text instead of posting it to the server. It gets the
data-userid attribute of the clicked link, which will be used for the querystring.</p>
<pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'myElement'</span>);

<span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({
    url: <span class="string">'getMyText.php'</span>,
    method: <span class="string">'get'</span>,
    onRequest: <span class="keyword">function</span>(){
        myElement.set(<span class="string">'text'</span>, <span class="string">'loading...'</span>);
    },
    onSuccess: <span class="keyword">function</span>(responseText){
        myElement.set(<span class="string">'text'</span>, responseText);
    },
    onFailure: <span class="keyword">function</span>(){
        myElement.set(<span class="string">'text'</span>, <span class="string">'Sorry, your request failed :('</span>);
    }
});

document.id(<span class="string">'myLink'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop();
    myRequest.send(<span class="string">'userid='</span> + <span class="keyword">this</span>.get(<span class="string">'data-userid'</span>));
});</code></pre><div class="heading clearfix"><h2><a href="#Request:setHeader" name="Request:setHeader">Request Method: setHeader </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Add or modify a header for the request. It will not override headers from the options.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.setHeader(name, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>name  - (<em>string</em>) The name for the header.</li>
<li>value - (<em>string</em>) The value to be assigned.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'getData.php'</span>, method: <span class="string">'get'</span>, headers: {<span class="string">'X-Request'</span>: <span class="string">'JSON'</span>}});
myRequest.setHeader(<span class="string">'Last-Modified'</span>, <span class="string">'Sat, 1 Jan 2005 05:00:00 GMT'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Request:getHeader" name="Request:getHeader">Request Method: getHeader </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the given response header or null if not found.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.getHeader(name);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>name - (<em>string</em>) The name of the header to retrieve the value of.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The value of the retrieved header.</li>
<li>(<em>null</em>) <code>null</code> if the header is not found.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'getData.php'</span>, method: <span class="string">'get'</span>, onSuccess: <span class="keyword">function</span>(responseText, responseXML){
    alert(<span class="keyword">this</span>.getHeader(<span class="string">'Date'</span>)); <span class="comment">// alerts the server date (for example, 'Thu, 26 Feb 2009 20:26:06 GMT')</span>
}});</code></pre><div class="heading clearfix"><h2><a href="#Request:send" name="Request:send">Request Method: send </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Opens the Request connection and sends the provided data with the specified options.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.send([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>options - (<em>object</em>, optional) The options for the sent Request.  Will also accept data as a query string for compatibility reasons.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({
    url: <span class="string">'http://localhost/some_url'</span>
}).send(<span class="string">'save=username&amp;name=John'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Request:send-aliases" name="Request:send-aliases">Request Methods: send aliases </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>MooTools provides several aliases for <a href="#Request:send" alt="Request:send">Request:send</a> to make it easier to use different methods.</p>

<p>These aliases are:</p>

<ul>
<li><code>post()</code> and <code>POST()</code></li>
<li><code>get()</code> and <code>GET()</code></li>
<li><code>put()</code> and <code>PUT()</code></li>
<li><code>delete()</code> and <code>DELETE()</code></li>
<li><code>patch()</code> and <code>PATCH()</code></li>
<li><code>head()</code> and <code>HEAD()</code></li>
</ul>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.post([data]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>data - (<em>string</em>, optional) Equivalent with the <code>data</code> option of Request.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'http://localhost/some_url'</span>});

myRequest.post(<span class="string">'save=username&amp;name=John'</span>);
<span class="comment">//...is equivalent to:</span>
myRequest.send({
    method: <span class="string">'post'</span>,
    data: <span class="string">'save=username&amp;name=John'</span>
});

myRequest.get(<span class="string">'save=username&amp;name=John'</span>);
<span class="comment">//...is equivalent to:</span>
myRequest.send({
    method: <span class="string">'get'</span>,
    data: <span class="string">'save=username&amp;name=John'</span>
});</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>By default the emulation option is set to true, so the <em>put</em>, <em>delete</em> and <em>patch</em> send methods are emulated and will actually send as <em>post</em> while the method name is sent as e.g. <code>_method=delete</code>.</p>

<p><code>Async</code> and <code>timeout</code> options are mutually exclusive. If you set <code>async</code> to <code>false</code>, then there&#39;s no need to set the <code>timeout</code> since the server and browser will set their own timeouts to return executing the rest of your script.</p>
<div class="heading clearfix"><h2><a href="#Request:cancel" name="Request:cancel">Request Method: cancel </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Cancels the currently running request, if any.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.cancel();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'mypage.html'</span>, method: <span class="string">'get'</span>}).send(<span class="string">'some=data'</span>);
myRequest.cancel();</code></pre><div class="heading clearfix"><h2><a href="#Request:isRunning" name="Request:isRunning">Request Method: isRunning </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns true if the request is currently running</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.isRunning()</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) True if the request is running</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'mypage.html'</span>, method: <span class="string">'get'</span>}).send(<span class="string">'some=data'</span>);

<span class="keyword">if</span> (myRequest.isRunning()) <span class="comment">// It runs!</span></code></pre><div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:send" name="Element-Properties:send">Element Property: send </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter</h3></div>
<p>Sets a default Request instance for an Element.  This is useful when handling forms.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'send'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>options - (<em>object</em>) The Request options.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div>
<ul>
<li>(<em>element</em>) The original element.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">myForm.set(<span class="string">'send'</span>, {url: <span class="string">'contact.php'</span>, method: <span class="string">'get'</span>});
myForm.send(); <span class="comment">//Sends the form.</span></code></pre><div class="heading clearfix"><h3>Getter</h3></div>
<p>Returns the previously set Request instance (or a new one with default options).</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'send'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div>
<ol>
<li>property - (<em>string</em>) the Request property argument.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The Request instance.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">el.set(<span class="string">'send'</span>, {method: <span class="string">'get'</span>});
el.send();
el.get(<span class="string">'send'</span>); <span class="comment">// returns the Request instance.</span></code></pre><div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:send" name="Element:send">Element Method: send </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Sends a form or a container of inputs with an HTML request.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.send(url);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>url - (<em>string</em>, optional) The url you want to send the form or the &quot;container of inputs&quot; to. If url is omitted, the action of the form will be used. url cannot be omitted for &quot;container of inputs&quot;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(element) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"myForm"</span> <span class="attribute">action</span>=<span class="value">"submit.php"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"bob@bob.com"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"zipCode"</span> <span class="attribute">value</span>=<span class="value">"90210"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myForm'</span>).send();</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<ul>
<li>The URL is taken from the action attribute of the form.</li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Request" name="Request">Class: Request </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>An XMLHttpRequest Wrapper.</p>
<div class="heading clearfix"><h3>Implements:</h3></div><p><a href="/core/docs/1.5.1/Class/Class.Extras#Chain" alt="Chain">Chain</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Events" alt="Events">Events</a>, <a href="/core/docs/1.5.1/Class/Class.Extras#Options" alt="Options">Options</a></p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>options - (<em>object</em>, optional) See below.</li>
</ol>
<div class="heading clearfix"><h3>Options:</h3></div><ul>
<li>url        - (<em>string</em>: defaults to <em>null</em>) The URL to request. (Note, this can also be an instance of <a href="/more/docs/1.5.1/Types/URI" alt="URI">URI</a>)</li>
<li>data       - (<em>mixed</em>: defaults to &#39;&#39;) The default data for <a href="#Request:send" alt="Request:send">Request:send</a>, used when no data is given. Can be an Element, Object or String. If an Object is passed the <a href="/core/docs/1.5.1/Types/Object#Object:Object-toQueryString" alt="Object:toQueryString">Object:toQueryString</a> method will be used to convert the object to a string. If an Element is passed the <a href="/core/docs/1.5.1/Element/Element#Element:toQueryString" alt="Element:toQueryString">Element:toQueryString</a> method will be used to convert the Element to a string.</li>
<li>format     - (<em>string</em>: defaults to &#39;&#39;) If passed, an additional key &#39;format&#39; will be appended to &#39;data&#39; with the passed value. e.g. &#39;&amp;format=json&#39;</li>
<li>link       - (<em>string</em>: defaults to &#39;ignore&#39;) Can be &#39;ignore&#39;, &#39;cancel&#39; and &#39;chain&#39;.<ul>
<li>&#39;ignore&#39; - Any calls made to start while the request is running will be ignored. (Synonymous with &#39;wait&#39;: true from 1.11)</li>
<li>&#39;cancel&#39; - Any calls made to start while the request is running will take precedence over the currently running request. The new request will start immediately, canceling the one that is currently running. (Synonymous with &#39;wait&#39;: false from 1.11)</li>
<li>&#39;chain&#39;  - Any calls made to start while the request is running will be chained up, and will take place as soon as the current request has finished, one after another.</li>
</ul>
</li>
<li>method     - (<em>string</em>: defaults to &#39;post&#39;) The HTTP method for the request, can be either &#39;post&#39; or &#39;get&#39;.</li>
<li>emulation  - (<em>boolean</em>: defaults to <em>true</em>) If set to true, other methods than &#39;post&#39; or &#39;get&#39; are appended as post-data named &#39;_method&#39; (as used in rails)</li>
<li>async      - (<em>boolean</em>: defaults to <em>true</em>) If set to false, the requests will be synchronous and freeze the browser during request.</li>
<li>timeout    - (<em>integer</em>: defaults to 0) In conjunction with <code>onTimeout</code> event, it determines the amount of milliseconds before considering a connection timed out. (It&#39;s suggested to not use timeout with big files and only when knowing what&#39;s expected.)</li>
<li>headers    - (<em>object</em>) An object to use in order to set the request headers.</li>
<li>urlEncoded - (<em>boolean</em>: defaults to <em>true</em>) If set to true, the content-type header is set to www-form-urlencoded + encoding</li>
<li>encoding   - (<em>string</em>: defaults to &#39;utf-8&#39;) The encoding to be set in the request header.</li>
<li>noCache    - (<em>boolean</em>; defaults to <em>false</em>) If <em>true</em>, appends a unique <em>noCache</em> value to the request to prevent caching. (IE and iOS 6 have a bad habit of caching ajax request values. Including this script and setting the <em>noCache</em> value to true will prevent it from caching. The server should ignore the <em>noCache</em> value.)</li>
<li>isSuccess  - (<em>function</em>) Overrides the built-in isSuccess function.</li>
<li>evalScripts  - (<em>boolean</em>: defaults to <em>false</em>) If set to true, <code>script</code> tags inside the response will be evaluated.</li>
<li>evalResponse - (<em>boolean</em>: defaults to <em>false</em>) If set to true, the entire response will be evaluated. Responses with javascript content-type will be evaluated automatically.</li>
<li>user       - (<em>string</em>: defaults to <em>null</em>) The username to use for http basic authentication.</li>
<li>password   - (<em>string</em>: defaults to <em>null</em>) You can use this option together with the <code>user</code> option to set authentication credentials when necessary. Note that the password will be passed as plain text and is therefore readable by anyone through the source code. It is therefore encouraged to use this option carefully</li>
<li>withCredentials   - (<em>boolean</em>: defaults to <em>false</em>) If set to true, xhr.withCredentials will be set to true allowing cookies/auth to be passed for cross origin requests</li>
</ul>
<div class="heading clearfix"><h3>Events:</h3></div><div class="heading clearfix"><h4>request</h4></div><p>Fired when the Request is sent.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onRequest()</code></pre><div class="heading clearfix"><h4>loadstart</h4></div><p>Fired when the Request loaded, right before any progress starts. (This is limited to Browsers that support the event. At this time: Gecko and WebKit).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onLoadstart(event, xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>event - (Event) The loadstart event.</li>
<li>xhr - (XMLHttpRequest) The transport instance.</li>
</ol>
<div class="heading clearfix"><h4>progress</h4></div><p>Fired when the Request is making progresses in the download or upload. (This is limited to Browsers that support the event. At this time: Gecko and WebKit).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onProgress(event, xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>event - (Event) The progress event, containing currently downloaded bytes and total bytes.</li>
<li>xhr - (XMLHttpRequest) The transport instance.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({
    url: <span class="string">'image.jpg'</span>,
    onProgress: <span class="keyword">function</span>(event, xhr){
        <span class="keyword">var</span> loaded = event.loaded, total = event.total;

        console.log(parseInt(loaded / total * <span class="number">100</span>, <span class="number">10</span>));
    }
});

myRequest.send();</code></pre><div class="heading clearfix"><h3>Cross-Origin Resource Sharing (CORS) note:</h3></div><p>The Request class will (by default) add a custom header that, if used for a cross-origin request, will have to be reported as allowed in the preflight request, in addition to any other headers you may set yourself:</p>
<pre><code class="javascript">Access-Control-Allow-Headers: X-Requested-With</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIDOMProgressEvent" alt="MDN: nsIDOMProgressEvent">MDN: nsIDOMProgressEvent</a></li>
</ul>
<div class="heading clearfix"><h4>complete</h4></div><p>Fired when the Request is completed.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onComplete()</code></pre><div class="heading clearfix"><h4>cancel</h4></div><p>Fired when a request has been cancelled.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onCancel()</code></pre><div class="heading clearfix"><h4>success</h4></div><p>Fired when the Request is completed successfully.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onSuccess(responseText, responseXML)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>responseText - (<em>string</em>) The returned text from the request.</li>
<li>responseXML  - (<em>mixed</em>) The response XML from the request.</li>
</ol>
<div class="heading clearfix"><h4>failure</h4></div><p>Fired when the request failed (error status code).</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onFailure(xhr)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><p>xhr - (XMLHttpRequest) The transport instance.</p>
<div class="heading clearfix"><h4>exception</h4></div><p>Fired when setting a request header fails.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onException(headerName, value)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>headerName - (<em>string</em>) The name of the failing header.</li>
<li>value      - (<em>string</em>) The value of the failing header.</li>
</ol>
<div class="heading clearfix"><h3>Properties:</h3></div><ul>
<li>response - (<em>object</em>) Object with text and XML as keys. You can access this property in the &#39;success&#39; event.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) A new Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({method: <span class="string">'get'</span>, url: <span class="string">'requestHandler.php'</span>});
myRequest.send(<span class="string">'name=john&amp;lastname=dorian'</span>);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="http://en.wikipedia.org/wiki/XMLHttpRequest" alt="Wikipedia: XMLHttpRequest">Wikipedia: XMLHttpRequest</a></li>
</ul>
<div class="heading clearfix"><h4>timeout</h4></div><p>Fired when a request doesn&#39;t change state for <code>options.timeout</code> milliseconds.</p>
<div class="heading clearfix"><h5>Signature:</h5></div><pre><code class="javascript">onTimeout()</code></pre><div class="heading clearfix"><h3>Example:</h3></div><p>This example fetches some text with Request. When the user clicks the link, the returned text by the server is used to update
the element&#39;s text. It uses the <code>onRequest</code>, <code>onSuccess</code> and <code>onFailure</code> events to inform the user about the current state of
the request. The <code>method</code> option is set to <code>get</code> because we get some text instead of posting it to the server. It gets the
data-userid attribute of the clicked link, which will be used for the querystring.</p>
<pre><code class="javascript"><span class="keyword">var</span> myElement = document.id(<span class="string">'myElement'</span>);

<span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({
    url: <span class="string">'getMyText.php'</span>,
    method: <span class="string">'get'</span>,
    onRequest: <span class="keyword">function</span>(){
        myElement.set(<span class="string">'text'</span>, <span class="string">'loading...'</span>);
    },
    onSuccess: <span class="keyword">function</span>(responseText){
        myElement.set(<span class="string">'text'</span>, responseText);
    },
    onFailure: <span class="keyword">function</span>(){
        myElement.set(<span class="string">'text'</span>, <span class="string">'Sorry, your request failed :('</span>);
    }
});

document.id(<span class="string">'myLink'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop();
    myRequest.send(<span class="string">'userid='</span> + <span class="keyword">this</span>.get(<span class="string">'data-userid'</span>));
});</code></pre><div class="heading clearfix"><h2><a href="#Request:setHeader" name="Request:setHeader">Request Method: setHeader </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Add or modify a header for the request. It will not override headers from the options.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.setHeader(name, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>name  - (<em>string</em>) The name for the header.</li>
<li>value - (<em>string</em>) The value to be assigned.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'getData.php'</span>, method: <span class="string">'get'</span>, headers: {<span class="string">'X-Request'</span>: <span class="string">'JSON'</span>}});
myRequest.setHeader(<span class="string">'Last-Modified'</span>, <span class="string">'Sat, 1 Jan 2005 05:00:00 GMT'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Request:getHeader" name="Request:getHeader">Request Method: getHeader </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the given response header or null if not found.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.getHeader(name);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>name - (<em>string</em>) The name of the header to retrieve the value of.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The value of the retrieved header.</li>
<li>(<em>null</em>) <code>null</code> if the header is not found.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'getData.php'</span>, method: <span class="string">'get'</span>, onSuccess: <span class="keyword">function</span>(responseText, responseXML){
    alert(<span class="keyword">this</span>.getHeader(<span class="string">'Date'</span>)); <span class="comment">// alerts the server date (for example, 'Thu, 26 Feb 2009 20:26:06 GMT')</span>
}});</code></pre><div class="heading clearfix"><h2><a href="#Request:send" name="Request:send">Request Method: send </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Opens the Request connection and sends the provided data with the specified options.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.send([options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>options - (<em>object</em>, optional) The options for the sent Request.  Will also accept data as a query string for compatibility reasons.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({
    url: <span class="string">'http://localhost/some_url'</span>
}).send(<span class="string">'save=username&amp;name=John'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Request:send-aliases" name="Request:send-aliases">Request Methods: send aliases </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>MooTools provides several aliases for <a href="#Request:send" alt="Request:send">Request:send</a> to make it easier to use different methods.</p>
<p>These aliases are:</p>
<ul>
<li><code>post()</code> and <code>POST()</code></li>
<li><code>get()</code> and <code>GET()</code></li>
<li><code>put()</code> and <code>PUT()</code></li>
<li><code>delete()</code> and <code>DELETE()</code></li>
<li><code>patch()</code> and <code>PATCH()</code></li>
<li><code>head()</code> and <code>HEAD()</code></li>
</ul>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.post([data]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>data - (<em>string</em>, optional) Equivalent with the <code>data</code> option of Request.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'http://localhost/some_url'</span>});

myRequest.post(<span class="string">'save=username&amp;name=John'</span>);
<span class="comment">//...is equivalent to:</span>
myRequest.send({
    method: <span class="string">'post'</span>,
    data: <span class="string">'save=username&amp;name=John'</span>
});

myRequest.get(<span class="string">'save=username&amp;name=John'</span>);
<span class="comment">//...is equivalent to:</span>
myRequest.send({
    method: <span class="string">'get'</span>,
    data: <span class="string">'save=username&amp;name=John'</span>
});</code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>By default the emulation option is set to true, so the <em>put</em>, <em>delete</em> and <em>patch</em> send methods are emulated and will actually send as <em>post</em> while the method name is sent as e.g. <code>_method=delete</code>.</p>
<p><code>Async</code> and <code>timeout</code> options are mutually exclusive. If you set <code>async</code> to <code>false</code>, then there&#39;s no need to set the <code>timeout</code> since the server and browser will set their own timeouts to return executing the rest of your script.</p>
<div class="heading clearfix"><h2><a href="#Request:cancel" name="Request:cancel">Request Method: cancel </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Cancels the currently running request, if any.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.cancel();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This Request instance.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'mypage.html'</span>, method: <span class="string">'get'</span>}).send(<span class="string">'some=data'</span>);
myRequest.cancel();</code></pre><div class="heading clearfix"><h2><a href="#Request:isRunning" name="Request:isRunning">Request Method: isRunning </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns true if the request is currently running</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myRequest.isRunning()</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) True if the request is running</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myRequest = <span class="keyword">new</span> Request({url: <span class="string">'mypage.html'</span>, method: <span class="string">'get'</span>}).send(<span class="string">'some=data'</span>);

<span class="keyword">if</span> (myRequest.isRunning()) <span class="comment">// It runs!</span></code></pre><div class="heading clearfix"><h1><a href="#Element-Properties" name="Element-Properties">Object: Element.Properties </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>see <a href="/core/docs/1.5.1/Element/Element#Element-Properties" alt="Element.Properties">Element.Properties</a></p>
<div class="heading clearfix"><h2><a href="#Element-Properties:send" name="Element-Properties:send">Element Property: send </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Setter</h3></div><p>Sets a default Request instance for an Element.  This is useful when handling forms.</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.set(<span class="string">'send'</span>[, options]);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>options - (<em>object</em>) The Request options.</li>
</ol>
<div class="heading clearfix"><h4>Returns:</h4></div><ul>
<li>(<em>element</em>) The original element.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">myForm.set(<span class="string">'send'</span>, {url: <span class="string">'contact.php'</span>, method: <span class="string">'get'</span>});
myForm.send(); <span class="comment">//Sends the form.</span></code></pre><div class="heading clearfix"><h3>Getter</h3></div><p>Returns the previously set Request instance (or a new one with default options).</p>
<div class="heading clearfix"><h4>Syntax:</h4></div><pre><code class="javascript">el.get(<span class="string">'send'</span>);</code></pre><div class="heading clearfix"><h4>Arguments:</h4></div><ol>
<li>property - (<em>string</em>) the Request property argument.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The Request instance.</li>
</ul>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">el.set(<span class="string">'send'</span>, {method: <span class="string">'get'</span>});
el.send();
el.get(<span class="string">'send'</span>); <span class="comment">// returns the Request instance.</span></code></pre><div class="heading clearfix"><h1><a href="#Element" name="Element">Type: Element </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Custom Type to allow all of its methods to be used with any DOM element via the dollar function <a href="/core/docs/1.5.1/Element/Element#Window:dollar" alt="$">$</a>.</p>
<div class="heading clearfix"><h2><a href="#Element:send" name="Element:send">Element Method: send </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Sends a form or a container of inputs with an HTML request.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myElement.send(url);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>url - (<em>string</em>, optional) The url you want to send the form or the &quot;container of inputs&quot; to. If url is omitted, the action of the form will be used. url cannot be omitted for &quot;container of inputs&quot;.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(element) This Element.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><div class="heading clearfix"><h5>HTML</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"myForm"</span> <span class="attribute">action</span>=<span class="value">"submit.php"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"bob@bob.com"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"zipCode"</span> <span class="attribute">value</span>=<span class="value">"90210"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myForm'</span>).send();</code></pre><div class="heading clearfix"><h3>Note:</h3></div><ul>
<li>The URL is taken from the action attribute of the form.</li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Slick" name="Slick">Slick </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Slick is the selector engine used by MooTools. It supports many CSS3 selectors and more!</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#pseudo-classes" alt="W3C Pseudo Classes">W3C Pseudo Classes</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Reverse-Combinators" name="Reverse-Combinators">Reverse Combinators</a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Reverse Combinators redirect the flow of selectors and combinators. Slick implements these by prepending <code>!</code> to a selector or combinator.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">document.getElement(<span class="string">'p ! div'</span>)    <span class="comment">// A &lt;div&gt; that is an ancestor of a &lt;p&gt;</span>
document.getElement(<span class="string">'p !&gt; div'</span>)   <span class="comment">// A &lt;div&gt; that is a direct parent of a &lt;p&gt;</span>
document.getElement(<span class="string">'.foo !+ p'</span>)  <span class="comment">// Gets the previous adjacent &lt;p&gt; sibling</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>Reverse Combinators are used internally by MooTools for many of our traversal methods. They offer an extremely concise and powerful alternative to traversal methods like <code>getParent()</code>.</p>
<div class="heading clearfix"><h2><a href="#Slick:Slick-definePseudo" name="Slick:Slick-definePseudo">Function: Slick.definePseudo  </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>definePseudo allows you to create your own custom pseudo selectors.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Slick.definePseudo(<span class="string">'display'</span>, <span class="keyword">function</span>(value){
    <span class="keyword">return</span> Element.getStyle(<span class="keyword">this</span>, <span class="string">'display'</span>) == value;
});

<span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"display: none"</span>&gt;</span>foo<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"display: block"</span>&gt;</span>bar<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

$$(':display(block)');      // Will return the block element

Slick.definePseudo('my-custom-pseudo', function(){
    // 'this' is the node to check
    return Element.retrieve(this, 'something-custom').isAwesome;
});

$$(':my-custom-pseudo')     // Will return the first <span class="tag">&lt;<span class="title">p</span>&gt;</span> tag that is awesome
</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:nextSiblings" name="Slick:nextSiblings">Selector: Next Siblings (&#39;~&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the next siblings.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo ~'</span>)        <span class="comment">// Gets all next siblings of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo ~ blockquote'</span>) <span class="comment">// Gets every &lt;blockquote&gt; with a &lt;p class="foo"&gt; sibling somewhere *before* it</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:previouSiblings" name="Slick:previouSiblings">Selector: Previous Siblings (&#39;!~&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the previous siblings.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo !~'</span>)            <span class="comment">// Gets all previous siblings of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo !~ blockquote'</span>) <span class="comment">// Gets every &lt;blockquote&gt; with a &lt;p class="foo"&gt; sibling somewhere *after* it</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:allSiblings" name="Slick:allSiblings">Selector: All Siblings (&#39;~~&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets all siblings.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo ~~'</span>)            <span class="comment">// Gets all previous and next siblings of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo ~~ blockquote'</span>) <span class="comment">// Gets every &lt;blockquote&gt; with a &lt;p class="foo"&gt; sibling before OR after it</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:firstChild" name="Slick:firstChild">Selector: First Child (&#39;^&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the first child of an element.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo ^'</span>)       <span class="comment">// Gets the first child of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo ^ strong'</span>)    <span class="comment">// Gets every &lt;strong&gt; that is the first element child of a &lt;p class="foo"&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:lastChild" name="Slick:lastChild">Selector: Last Child (&#39;!^&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the last child of an element.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo !^'</span>)      <span class="comment">// Gets the last child of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo !^ strong'</span>)   <span class="comment">// Gets every &lt;strong&gt; that is the last element child of a &lt;p class="foo"&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:checked" name="Slick:checked">Selector: checked </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches all Elements that are checked.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$$(<span class="string">':checked'</span>)

$(<span class="string">'myForm'</span>).getElements(<span class="string">'input:checked'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:enabled" name="Slick:enabled">Selector: enabled </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches all Elements that are enabled.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$$(<span class="string">':enabled'</span>)

$(<span class="string">'myElement'</span>).getElements(<span class="string">':enabled'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:empty" name="Slick:empty">Selector: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches all elements which are empty.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">':empty'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:contains" name="Slick:contains">Selector: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches all the Elements which contains the text.</p>
<div class="heading clearfix"><h3>Variables:</h3></div>
<ul>
<li>text - (string) The text that the Element should contain.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p:contains("find me")'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:focus" name="Slick:focus">Selector: focus </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Gets the element in focus.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">':focus'</span>);       <span class="comment">// Gets the element in focus</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:not" name="Slick:not">Selector: not </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches all elements that do not match the selector.</p>

<p><small>Note: The Slick implementation of the <code>:not</code> pseudoClass is a superset of the standard. i.e. it is more advanced than the specification.</small></p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$$(<span class="string">':not(div.foo)'</span>); <span class="comment">// all elements except divs with class 'foo'</span>

$$(<span class="string">'input:not([type="submit"])'</span>); <span class="comment">// all inputs except submit buttons</span>

myElement.getElements(<span class="string">':not(a)'</span>);

$$(<span class="string">':not(ul li)'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:nth-child" name="Slick:nth-child">Selector: nth-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches every nth child.</p>
<div class="heading clearfix"><h3>Usage:</h3></div>
<p>Nth Expression:</p>
<pre><code class="javascript"><span class="string">':nth-child(nExpression)'</span></code></pre><div class="heading clearfix"><h3>Variables:</h3></div>
<ul>
<li>nExpression - (string) A nth expression for the &quot;every&quot; nth-child.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i1"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i3"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i4"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i5"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>

$$(':nth-child(1)'); //Returns Element #i1.

$$(':nth-child(2n)'); //Returns Elements #i2 and #i4.

$$(':nth-child(2n+1)') //Returns Elements #i1, #i3 and #i5.

$$(':nth-child(3n+2)') //Returns Elements #i2 and #i5.</code></pre>
<p>Every Odd Child (same as 2n+1):</p>
<pre><code class="javascript"><span class="string">':nth-child(odd)'</span></code></pre>
<p>Every Even Child (same as 2n):</p>
<pre><code class="javascript"><span class="string">':nth-child(even)'</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This selector respects the w3c specifications, so it has 1 as its first index, not 0. Therefore nth-child(odd) will actually select the even children, if you think in zero-based indexes.</p>
<div class="heading clearfix"><h2><a href="#Slick:nth-last-child" name="Slick:nth-last-child">Selector: nth-last-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches every nth child, starting from the last child.</p>
<div class="heading clearfix"><h3>Usage:</h3></div>
<p>Nth Expression:</p>
<pre><code class="javascript"><span class="string">':nth-last-child(nExpression)'</span></code></pre><div class="heading clearfix"><h3>Variables:</h3></div>
<ul>
<li>nExpression - (string) A nth expression for the &quot;every&quot; nth-child.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i1"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i3"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i4"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i5"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>

$$(':nth-last-child(1)'); //Returns Element #i5.

$$(':nth-last-child(2n)'); //Returns Elements #i2 and #i4.

$$(':nth-last-child(2n+1)') //Returns Elements #i1, #i3 and #i5.

$$(':nth-last-child(3n+2)') //Returns Elements #i1 and #i4.</code></pre>
<p>Every Odd Child (same as 2n+1):</p>
<pre><code class="javascript"><span class="string">':nth-last-child(odd)'</span></code></pre>
<p>Every Even Child  (same as 2n):</p>
<pre><code class="javascript"><span class="string">':nth-last-child(even)'</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This selector respects the w3c specifications, so it has 1 as its first index, not 0. Therefore nth-last-child(odd) will actually select the even last-children, if you think in zero-based indexes.</p>
<div class="heading clearfix"><h2><a href="#Slick:even" name="Slick:even">Selector: even </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches every even child.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:even'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This selector is not part of the w3c specification, therefore its index starts at 0. This selector is highly recommended over nth-child(even), as this will return the real even children.</p>
<div class="heading clearfix"><h2><a href="#Slick:odd" name="Slick:odd">Selector: odd </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches every odd child.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:odd'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This selector is not part of the w3c specification, therefore its index starts at 0. This selector is highly recommended over nth-child(odd), as this will return the real odd children.</p>
<div class="heading clearfix"><h2><a href="#Slick:index" name="Slick:index">Selector: index </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches the node at the specified index</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p:index(2)'</span>);       <span class="comment">// Gets the third &lt;p&gt; tag.</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>This is zero-indexed.</p>
<div class="heading clearfix"><h2><a href="#Slick:first-child" name="Slick:first-child">Selector: first-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches the first child.</p>
<div class="heading clearfix"><h3>Usage:</h3></div><pre><code class="javascript"><span class="string">':first-child'</span></code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:first-child'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:last-child" name="Slick:last-child">Selector: last-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><pre><code class="javascript">Matches the last child.</code></pre><div class="heading clearfix"><h3>Usage:</h3></div><pre><code class="javascript"><span class="string">':last-child'</span></code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:last-child'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:only-child" name="Slick:only-child">Selector: only-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Matches an only child of its parent Element.</p>
<div class="heading clearfix"><h3>Usage:</h3></div><pre><code class="javascript"><span class="string">':only-child'</span></code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:only-child'</span>);</code></pre>+R*****<div class="heading clearfix"><h1><a href="#Slick" name="Slick">Slick </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Slick is the selector engine used by MooTools. It supports many CSS3 selectors and more!</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#pseudo-classes" alt="W3C Pseudo Classes">W3C Pseudo Classes</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Reverse-Combinators" name="Reverse-Combinators">Reverse Combinators</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Reverse Combinators redirect the flow of selectors and combinators. Slick implements these by prepending <code>!</code> to a selector or combinator.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">document.getElement(<span class="string">'p ! div'</span>)    <span class="comment">// A &lt;div&gt; that is an ancestor of a &lt;p&gt;</span>
document.getElement(<span class="string">'p !&gt; div'</span>)   <span class="comment">// A &lt;div&gt; that is a direct parent of a &lt;p&gt;</span>
document.getElement(<span class="string">'.foo !+ p'</span>)  <span class="comment">// Gets the previous adjacent &lt;p&gt; sibling</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>Reverse Combinators are used internally by MooTools for many of our traversal methods. They offer an extremely concise and powerful alternative to traversal methods like <code>getParent()</code>.</p>
<div class="heading clearfix"><h2><a href="#Slick:Slick-definePseudo" name="Slick:Slick-definePseudo">Function: Slick.definePseudo  </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>definePseudo allows you to create your own custom pseudo selectors.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Slick.definePseudo(<span class="string">'display'</span>, <span class="keyword">function</span>(value){
       <span class="keyword">return</span> Element.getStyle(<span class="keyword">this</span>, <span class="string">'display'</span>) == value;
});

<span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"display: none"</span>&gt;</span>foo<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">style</span>=<span class="value">"display: block"</span>&gt;</span>bar<span class="tag">&lt;/<span class="title">div</span>&gt;</span>

$$(':display(block)');        // Will return the block element

Slick.definePseudo('my-custom-pseudo', function(){
    // 'this' is the node to check
    return Element.retrieve(this, 'something-custom').isAwesome;
});

$$(':my-custom-pseudo')        // Will return the first <span class="tag">&lt;<span class="title">p</span>&gt;</span> tag that is awesome</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:nextSiblings" name="Slick:nextSiblings">Selector: Next Siblings (&#39;~&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the next siblings.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo ~'</span>)         <span class="comment">// Gets all next siblings of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo ~ blockquote'</span>) <span class="comment">// Gets every &lt;blockquote&gt; with a &lt;p class="foo"&gt; sibling somewhere *before* it</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:previouSiblings" name="Slick:previouSiblings">Selector: Previous Siblings (&#39;!~&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the previous siblings.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo !~'</span>)            <span class="comment">// Gets all previous siblings of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo !~ blockquote'</span>) <span class="comment">// Gets every &lt;blockquote&gt; with a &lt;p class="foo"&gt; sibling somewhere *after* it</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:allSiblings" name="Slick:allSiblings">Selector: All Siblings (&#39;~~&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets all siblings.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo ~~'</span>)            <span class="comment">// Gets all previous and next siblings of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo ~~ blockquote'</span>) <span class="comment">// Gets every &lt;blockquote&gt; with a &lt;p class="foo"&gt; sibling before OR after it</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:firstChild" name="Slick:firstChild">Selector: First Child (&#39;^&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the first child of an element.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo ^'</span>)        <span class="comment">// Gets the first child of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo ^ strong'</span>)    <span class="comment">// Gets every &lt;strong&gt; that is the first element child of a &lt;p class="foo"&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:lastChild" name="Slick:lastChild">Selector: Last Child (&#39;!^&#39;) </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the last child of an element.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p.foo !^'</span>)        <span class="comment">// Gets the last child of &lt;p class="foo"&gt;</span>
$$(<span class="string">'p.foo !^ strong'</span>)    <span class="comment">// Gets every &lt;strong&gt; that is the last element child of a &lt;p class="foo"&gt;</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:checked" name="Slick:checked">Selector: checked </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches all Elements that are checked.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$$(<span class="string">':checked'</span>)

$(<span class="string">'myForm'</span>).getElements(<span class="string">'input:checked'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:enabled" name="Slick:enabled">Selector: enabled </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches all Elements that are enabled.</p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$$(<span class="string">':enabled'</span>)

$(<span class="string">'myElement'</span>).getElements(<span class="string">':enabled'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:empty" name="Slick:empty">Selector: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches all elements which are empty.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">':empty'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:contains" name="Slick:contains">Selector: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches all the Elements which contains the text.</p>
<div class="heading clearfix"><h3>Variables:</h3></div><ul>
<li>text - (string) The text that the Element should contain.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p:contains("find me")'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:focus" name="Slick:focus">Selector: focus </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Gets the element in focus.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">':focus'</span>);        <span class="comment">// Gets the element in focus</span></code></pre><div class="heading clearfix"><h2><a href="#Slick:not" name="Slick:not">Selector: not </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches all elements that do not match the selector.</p>
<p><small>Note: The Slick implementation of the <code>:not</code> pseudoClass is a superset of the standard. i.e. it is more advanced than the specification.</small></p>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$$(<span class="string">':not(div.foo)'</span>); <span class="comment">// all elements except divs with class 'foo'</span>

$$(<span class="string">'input:not([type="submit"])'</span>); <span class="comment">// all inputs except submit buttons</span>

myElement.getElements(<span class="string">':not(a)'</span>);

$$(<span class="string">':not(ul li)'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:nth-child" name="Slick:nth-child">Selector: nth-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches every nth child.</p>
<div class="heading clearfix"><h3>Usage:</h3></div><p>Nth Expression:</p>
<pre><code class="javascript"><span class="string">':nth-child(nExpression)'</span></code></pre><div class="heading clearfix"><h3>Variables:</h3></div><ul>
<li>nExpression - (string) A nth expression for the &quot;every&quot; nth-child.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i1"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i3"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i4"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i5"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>

$$(':nth-child(1)'); //Returns Element #i1.

$$(':nth-child(2n)'); //Returns Elements #i2 and #i4.

$$(':nth-child(2n+1)') //Returns Elements #i1, #i3 and #i5.

$$(':nth-child(3n+2)') //Returns Elements #i2 and #i5.</code></pre><p>Every Odd Child (same as 2n+1):</p>
<pre><code class="javascript"><span class="string">':nth-child(odd)'</span></code></pre><p>Every Even Child (same as 2n):</p>
<pre><code class="javascript"><span class="string">':nth-child(even)'</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This selector respects the w3c specifications, so it has 1 as its first index, not 0. Therefore nth-child(odd) will actually select the even children, if you think in zero-based indexes.</p>
<div class="heading clearfix"><h2><a href="#Slick:nth-last-child" name="Slick:nth-last-child">Selector: nth-last-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches every nth child, starting from the last child.</p>
<div class="heading clearfix"><h3>Usage:</h3></div><p>Nth Expression:</p>
<pre><code class="javascript"><span class="string">':nth-last-child(nExpression)'</span></code></pre><div class="heading clearfix"><h3>Variables:</h3></div><ul>
<li>nExpression - (string) A nth expression for the &quot;every&quot; nth-child.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i1"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i3"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i4"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"i5"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>

$$(':nth-last-child(1)'); //Returns Element #i5.

$$(':nth-last-child(2n)'); //Returns Elements #i2 and #i4.

$$(':nth-last-child(2n+1)') //Returns Elements #i1, #i3 and #i5.

$$(':nth-last-child(3n+2)') //Returns Elements #i1 and #i4.</code></pre><p>Every Odd Child (same as 2n+1):</p>
<pre><code class="javascript"><span class="string">':nth-last-child(odd)'</span></code></pre><p>Every Even Child  (same as 2n):</p>
<pre><code class="javascript"><span class="string">':nth-last-child(even)'</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This selector respects the w3c specifications, so it has 1 as its first index, not 0. Therefore nth-last-child(odd) will actually select the even last-children, if you think in zero-based indexes.</p>
<div class="heading clearfix"><h2><a href="#Slick:even" name="Slick:even">Selector: even </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches every even child.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:even'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This selector is not part of the w3c specification, therefore its index starts at 0. This selector is highly recommended over nth-child(even), as this will return the real even children.</p>
<div class="heading clearfix"><h2><a href="#Slick:odd" name="Slick:odd">Selector: odd </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches every odd child.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:odd'</span>);</code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This selector is not part of the w3c specification, therefore its index starts at 0. This selector is highly recommended over nth-child(odd), as this will return the real odd children.</p>
<div class="heading clearfix"><h2><a href="#Slick:index" name="Slick:index">Selector: index </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches the node at the specified index</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'p:index(2)'</span>);        <span class="comment">// Gets the third &lt;p&gt; tag.</span></code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>This is zero-indexed.</p>
<div class="heading clearfix"><h2><a href="#Slick:first-child" name="Slick:first-child">Selector: first-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches the first child.</p>
<div class="heading clearfix"><h3>Usage:</h3></div><pre><code class="javascript"><span class="string">':first-child'</span></code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:first-child'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:last-child" name="Slick:last-child">Selector: last-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><pre><code class="javascript">Matches the last child.</code></pre><div class="heading clearfix"><h3>Usage:</h3></div><pre><code class="javascript"><span class="string">':last-child'</span></code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:last-child'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Slick:only-child" name="Slick:only-child">Selector: only-child </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Matches an only child of its parent Element.</p>
<div class="heading clearfix"><h3>Usage:</h3></div><pre><code class="javascript"><span class="string">':only-child'</span></code></pre><div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">$$(<span class="string">'td:only-child'</span>);</code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Array" name="Array">Type: Array </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A collection of Array methods and functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array" alt="MDN Array">MDN Array</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:Array-each" name="Array:Array-each">Function: Array.each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Used to iterate through arrays, or iterables that are not regular arrays, such as built in getElementsByTagName calls or arguments of a function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Array.each(iterable, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>iterable - (<em>array</em>) The array to iterate through.</li>
<li>fn       - (<em>function</em>) The function to test for each element.</li>
<li>bind     - (<em>object</em>, optional) The object to use as &#39;this&#39; within the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array. In the case of an object, it is passed the key of that item rather than the index.</li>
<li>object - (<em>mixed</em>) The actual array/object.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Array.each([<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tue'</span>], <span class="keyword">function</span>(day, index){
    alert(<span class="string">'name:'</span> + day + <span class="string">', index: '</span> + index);
}); <span class="comment">// alerts 'name: Sun, index: 0', 'name: Mon, index: 1', etc.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Array:each" alt="Array:each">Array:each</a></li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<p>This is an array-specific equivalent of <em>$each</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:Array-clone" name="Array:Array-clone">Function: Array.clone </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns a copy of the passed array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> clone = Array.clone(myArray);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>myArray  - (<em>array</em>) The array you wish to copy.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) a copy of the passed array.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];
<span class="keyword">var</span> otherArray = Array.clone(myArray);

<span class="keyword">var</span> myArray[<span class="number">0</span>] = <span class="string">'yellow'</span>;

alert(myArray[<span class="number">0</span>]);      <span class="comment">// alerts 'yellow'</span>
alert(otherArray[<span class="number">0</span>])    <span class="comment">// alerts 'red'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This is an array-specific equivalent of <em>$unlink</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:Array-from" name="Array:Array-from">Function: Array.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts the argument passed in to an array if it is defined and not already an array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> splatted = Array.from(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>obj - (<em>mixed</em>) Any type of variable.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) If the variable passed in is an array, returns the array. Otherwise, returns an array with the only element being the variable passed in.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Array.from(<span class="string">'hello'</span>); <span class="comment">// returns ['hello'].</span>
Array.from([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]); <span class="comment">// returns ['a', 'b', 'c'].</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This is equivalent to <em>$splat</em> from MooTools 1.2, with the exception of Array-like Objects such as NodeList or FileList which <code>Array.from</code> does transform in
Arrays and <code>$splat</code> not.</p>
<div class="heading clearfix"><h2><a href="#Array:each" name="Array:each">Array method: each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Calls a function for each element in the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.each(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>fn   - (<em>function</em>) The function which should be executed on each item in the array. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to be used as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">//Alerts "0 = apple", "1 = banana", and so on:</span>
[<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'lemon'</span>].each(<span class="keyword">function</span>(item, index){
    alert(index + <span class="string">" = "</span> + item);
}); <span class="comment">//The optional second argument for binding isn't used here.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Array:Array-each" alt="Array.each">Array.each</a></li>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/forEach" alt="MDN Array:forEach">MDN Array:forEach</a></li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This method is only available for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/forEach" alt="MDN Array:forEach">MDN Array:forEach</a> support.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:invoke" name="Array:invoke">Array method: invoke </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns an array with the named method applied to the array&#39;s contents.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> arr = myArray.invoke(method[, arg, arg, arg ...])</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>method - (<em>string</em>) The method to apply to each item in the array.</li>
<li>arg - (<em>mixed</em>) Any number of arguments to pass to the named method.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) A new array containing the results of the applied method.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> foo = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>];
<span class="keyword">var</span> bar = foo.invoke(<span class="string">'limit'</span>, <span class="number">10</span>, <span class="number">30</span>);  <span class="comment">//bar is now [10, 10, 15, 16, 23, 30]</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>The method that is invoked is a method of each of the items.
If the method does not exist, then an error will be thrown. For example:</p>
<pre><code class="javascript">[<span class="number">0</span>, <span class="literal">false</span>, <span class="string">'string'</span>].invoke(<span class="string">'limit'</span>, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// throws an error!</span></code></pre><div class="heading clearfix"><h2><a href="#Array:every" name="Array:every">Array method: every </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns true if every element in the array satisfies the provided testing function.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/every" alt="Array:every">Array:every</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> allPassed = myArray.every(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>fn   - (<em>function</em>) The function to test for each element.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) If every element in the array satisfies the provided testing function, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> areAllBigEnough = [<span class="number">10</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">100</span>].every(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item &gt; <span class="number">20</span>;
}); <span class="comment">// areAllBigEnough = false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/every" alt="MDN Array:every">MDN Array:every</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:filter" name="Array:filter">Array method: filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates a new array with all of the elements of the array for which the provided filtering function returns true.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter" alt="Array:filter">Array:filter</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> filteredArray = myArray.filter(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>fn   - (<em>function</em>) The function to test each element of the array. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) The new filtered array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> biggerThanTwenty = [<span class="number">10</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">100</span>].filter(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item &gt; <span class="number">20</span>;
}); <span class="comment">// biggerThanTwenty = [25, 100]</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter" alt="MDN Array:filter">MDN Array:filter</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:clean" name="Array:clean">Array method: clean </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates a new array with all of the elements of the array which are defined (i.e. not null or undefined).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> cleanedArray = myArray.clean();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) The new filtered array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="literal">null</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">'foo'</span>, <span class="literal">undefined</span>, <span class="string">''</span>];
myArray.clean() <span class="comment">// returns [1, 0, true, false, 'foo', '']</span></code></pre><div class="heading clearfix"><h2><a href="#Array:indexOf" name="Array:indexOf">Array method: indexOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the index of the first element within the array equal to the specified value, or -1 if the value is not found.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf" alt="Array:indexOf">Array:indexOf</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> index = myArray.indexOf(item[, from]);</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The index of the first element within the array equal to the specified value. If not found, returns -1.</li>
</ul>
<div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
<li>from - (<em>number</em>, optional: defaults to 0) The index of the array at which to begin the search.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'apple'</span>, <span class="string">'lemon'</span>, <span class="string">'banana'</span>].indexOf(<span class="string">'lemon'</span>); <span class="comment">// returns 1</span>
[<span class="string">'apple'</span>, <span class="string">'lemon'</span>].indexOf(<span class="string">'banana'</span>); <span class="comment">// returns -1</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf" alt="MDN Array:indexOf">MDN Array:indexOf</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:map" name="Array:map">Array method: map </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates a new array with the results of calling a provided function on every element in the array.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/map" alt="Array:map">Array:map</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> mappedArray = myArray.map(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>fn   - (<em>function</em>) The function to produce an element of the new Array from an element of the current one.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) The new mapped array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> timesTwo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item * <span class="number">2</span>;
}); <span class="comment">//timesTwo = [2, 4, 6];</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/map" alt="MDN Array:map">MDN Array:map</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:some" name="Array:some">Array method: some </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns true if at least one element in the array satisfies the provided testing function.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/some" alt="Array:some">Array:some</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> somePassed = myArray.some(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) If at least one element in the array satisfies the provided testing function returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>fn   - (<em>function</em>) The function to test for each element. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> isAnyBigEnough = [<span class="number">10</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">100</span>].some(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item &gt; <span class="number">20</span>;
}); <span class="comment">// isAnyBigEnough = true</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/some" alt="MDN Array:some">MDN Array:some</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:associate" name="Array:associate">Array method: associate </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates an object with key-value pairs based on the array of keywords passed in and the current content of the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> associated = myArray.associate(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>obj - (<em>array</em>) Its items will be used as the keys of the object that will be created.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The new associated object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> animals = [<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>];
<span class="keyword">var</span> sounds = [<span class="string">'Moo'</span>, <span class="string">'Oink'</span>, <span class="string">'Woof'</span>, <span class="string">'Miao'</span>];
sounds.associate(animals);
<span class="comment">// returns {'Cow': 'Moo', 'Pig': 'Oink', 'Dog': 'Woof', 'Cat': 'Miao'}</span></code></pre><div class="heading clearfix"><h2><a href="#Array:link" name="Array:link">Array method: link </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Accepts an object of key / function pairs to assign values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = myArray.link(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>)  An object containing key / function pairs must be passed to be used as a template for associating values with the different keys.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The new associated object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> el = document.createElement(<span class="string">'div'</span>);
<span class="keyword">var</span> arr2 = [<span class="number">100</span>, <span class="string">'Hello'</span>, {foo: <span class="string">'bar'</span>}, el, <span class="literal">false</span>];
arr2.link({
    myNumber: Type.isNumber,
    myElement: Type.isElement,
    myObject: Type.isObject,
    myString: Type.isString,
    myBoolean: <span class="keyword">function</span>(obj){ <span class="keyword">return</span> obj != <span class="literal">null</span>; }
});
<span class="comment">// returns {myNumber: 100, myElement: el, myObject: {foo: 'bar'}, myString: 'Hello', myBoolean: false}</span></code></pre><div class="heading clearfix"><h2><a href="#Array:contains" name="Array:contains">Array method: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Tests an array for the presence of an item.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> inArray = myArray.contains(item[, from]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
<li>from - (<em>number</em>, optional: defaults to 0) The index of the array at which to begin the search.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) If the array contains the item specified, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].contains(<span class="string">'a'</span>); <span class="comment">// returns true</span>
[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].contains(<span class="string">'d'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf" alt="MDN Array:indexOf">MDN Array:indexOf</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:append" name="Array:append">Array method: append </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Appends the passed array to the end of the current array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = myArray.append(otherArray);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>otherArray - (<em>array</em>) The array containing values you wish to append.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) The original array including the new values.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myOtherArray = [<span class="string">'green'</span>, <span class="string">'yellow'</span>];
[<span class="string">'red'</span>, <span class="string">'blue'</span>].append(myOtherArray); <span class="comment">// returns ['red', 'blue', 'green', 'yellow'];</span>

[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>].append([<span class="number">3</span>, [<span class="number">4</span>]]); <span class="comment">// [0, 1, 2, 3, [4]]</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This is an array-specific equivalent of <em>$extend</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:getLast" name="Array:getLast">Array method: getLast </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the last item from the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.getLast();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The last item in this array.</li>
<li>(<em>null</em>) If this array is empty, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>].getLast(); <span class="comment">// returns 'Cat'</span></code></pre><div class="heading clearfix"><h2><a href="#Array:getRandom" name="Array:getRandom">Array method: getRandom </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns a random item from the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.getRandom();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) A random item from this array. If this array is empty, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>].getRandom(); <span class="comment">// returns one of the items</span></code></pre><div class="heading clearfix"><h2><a href="#Array:include" name="Array:include">Array method: include </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Pushes the passed element into the array if it&#39;s not already present (case and type sensitive).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.include(item);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>item - (<em>object</em>) The item that should be added to this array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) This array with the new item included.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>].include(<span class="string">'Cat'</span>); <span class="comment">// returns ['Cow', 'Pig', 'Dog', 'Cat']</span>
[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>].include(<span class="string">'Dog'</span>); <span class="comment">// returns ['Cow', 'Pig', 'Dog']</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>If you want to push the passed element even if it&#39;s already present, use
the vanilla javascript:</p>
<pre><code class="javascript">myArray.push(item);</code></pre><div class="heading clearfix"><h2><a href="#Array:combine" name="Array:combine">Array method: combine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Combines an array with all the items of another. Does not allow duplicates and is case and type sensitive.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.combine(array);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>array - (<em>array</em>) The array whose items should be combined into this array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) This array combined with the new items.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> animals = [<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>];
animals.combine([<span class="string">'Cat'</span>, <span class="string">'Dog'</span>]); <span class="comment">//animals = ['Cow', 'Pig', 'Dog', 'Cat'];</span></code></pre><div class="heading clearfix"><h2><a href="#Array:erase" name="Array:erase">Array method: erase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes all occurrences of an item from the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.erase(item);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) This array with all occurrences of the item removed.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>, <span class="string">'Dog'</span>].erase(<span class="string">'Dog'</span>) <span class="comment">// returns ['Cow', 'Pig', 'Cat']</span>
[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>].erase(<span class="string">'Cat'</span>) <span class="comment">// returns ['Cow', 'Pig', 'Dog']</span></code></pre><div class="heading clearfix"><h2><a href="#Array:empty" name="Array:empty">Array method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Empties an array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.empty();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) This array, emptied.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="string">'old'</span>, <span class="string">'data'</span>];
myArray.empty(); <span class="comment">//myArray is now []</span></code></pre><div class="heading clearfix"><h2><a href="#Array:flatten" name="Array:flatten">Array method: flatten </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Flattens a multidimensional array into a single array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.flatten();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) A new flat array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>, [<span class="number">6</span>,<span class="number">7</span>]], [[[<span class="number">8</span>]]]];
<span class="keyword">var</span> newArray = myArray.flatten(); <span class="comment">//newArray is [1,2,3,4,5,6,7,8]</span></code></pre><div class="heading clearfix"><h2><a href="#Array:pick" name="Array:pick">Array method: pick </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the first defined value of the array passed in, or null.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> picked = [var1, var2, var3].pick();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The first variable that is defined.</li>
<li>(<em>null</em>) If all variables passed in are <code>null</code> or <code>undefined</code>, returns <code>null</code>.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">(infoMessage, errorMessage)</span>{</span>
    alert([errorMessage, infoMessage, <span class="string">'There was no message supplied.'</span>].pick());

    <span class="comment">//or more MooTools 1.2 style using Generics</span>
    Array.pick([errorMessage, infoMessage, <span class="string">'There was no message supplied.'</span>]);

}
say(); <span class="comment">// alerts 'There was no message supplied.'</span>
say(<span class="string">'This is an info message.'</span>); <span class="comment">// alerts 'This is an info message.'</span>
say(<span class="string">'This message will be ignored.'</span>, <span class="string">'This is the error message.'</span>); <span class="comment">// alerts 'This is the error message.'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This is equivalent to <em>$pick</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:hexToRgb" name="Array:hexToRgb">Array method: hexToRgb </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts an hexadecimal color value to RGB. Input array must be the following hexadecimal color format.
[&#39;FF&#39;, &#39;FF&#39;, &#39;FF&#39;]</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.hexToRgb([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [255, 51, 0]) instead of a string (e.g. &quot;rgb(255, 51, 0)&quot;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A string representing the color in RGB.</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'11'</span>, <span class="string">'22'</span>, <span class="string">'33'</span>].hexToRgb(); <span class="comment">// returns 'rgb(17, 34, 51)'</span>
[<span class="string">'11'</span>, <span class="string">'22'</span>, <span class="string">'33'</span>].hexToRgb(<span class="literal">true</span>); <span class="comment">// returns [17, 34, 51]</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Types/String#String:hexToRgb" alt="String:hexToRgb">String:hexToRgb</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:rgbToHex" name="Array:rgbToHex">Array method: rgbToHex </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts an RGB color value to hexadecimal. Input array must be in one of the following RGB color formats.
[255, 255, 255], or [255, 255, 255, 1]</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.rgbToHex([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [&#39;ff&#39;, &#39;33&#39;, &#39;00&#39;]) instead of a string (e.g. &#39;#ff3300&#39;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A string representing the color in hexadecimal, or &#39;transparent&#39; string if the fourth value of rgba in the input array is 0 (rgba).</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="number">17</span>, <span class="number">34</span>, <span class="number">51</span>].rgbToHex(); <span class="comment">// returns '#112233'</span>
[<span class="number">17</span>, <span class="number">34</span>, <span class="number">51</span>].rgbToHex(<span class="literal">true</span>); <span class="comment">// returns ['11', '22', '33']</span>
[<span class="number">17</span>, <span class="number">34</span>, <span class="number">51</span>, <span class="number">0</span>].rgbToHex(); <span class="comment">// returns 'transparent'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Types/String#String:rgbToHex" alt="String:rgbToHex">String:rgbToHex</a></li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Array" name="Array">Type: Array </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A collection of Array methods and functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array" alt="MDN Array">MDN Array</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:Array-each" name="Array:Array-each">Function: Array.each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Used to iterate through arrays, or iterables that are not regular arrays, such as built in getElementsByTagName calls or arguments of a function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Array.each(iterable, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>iterable - (<em>array</em>) The array to iterate through.</li>
<li>fn       - (<em>function</em>) The function to test for each element.</li>
<li>bind     - (<em>object</em>, optional) The object to use as &#39;this&#39; within the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array. In the case of an object, it is passed the key of that item rather than the index.</li>
<li>object - (<em>mixed</em>) The actual array/object.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Array.each([<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tue'</span>], <span class="keyword">function</span>(day, index){
    alert(<span class="string">'name:'</span> + day + <span class="string">', index: '</span> + index);
}); <span class="comment">// alerts 'name: Sun, index: 0', 'name: Mon, index: 1', etc.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Array:each" alt="Array:each">Array:each</a></li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><p>This is an array-specific equivalent of <em>$each</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:Array-clone" name="Array:Array-clone">Function: Array.clone </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns a copy of the passed array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> clone = Array.clone(myArray);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>myArray    - (<em>array</em>) The array you wish to copy.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) a copy of the passed array.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];
<span class="keyword">var</span> otherArray = Array.clone(myArray);

<span class="keyword">var</span> myArray[<span class="number">0</span>] = <span class="string">'yellow'</span>;

alert(myArray[<span class="number">0</span>]);        <span class="comment">// alerts 'yellow'</span>
alert(otherArray[<span class="number">0</span>])    <span class="comment">// alerts 'red'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This is an array-specific equivalent of <em>$unlink</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:Array-from" name="Array:Array-from">Function: Array.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts the argument passed in to an array if it is defined and not already an array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> splatted = Array.from(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>obj - (<em>mixed</em>) Any type of variable.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) If the variable passed in is an array, returns the array. Otherwise, returns an array with the only element being the variable passed in.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Array.from(<span class="string">'hello'</span>); <span class="comment">// returns ['hello'].</span>
Array.from([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]); <span class="comment">// returns ['a', 'b', 'c'].</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This is equivalent to <em>$splat</em> from MooTools 1.2, with the exception of Array-like Objects such as NodeList or FileList which <code>Array.from</code> does transform in
Arrays and <code>$splat</code> not.</p>
<div class="heading clearfix"><h2><a href="#Array:each" name="Array:each">Array method: each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Calls a function for each element in the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.each(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>fn   - (<em>function</em>) The function which should be executed on each item in the array. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to be used as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="comment">//Alerts "0 = apple", "1 = banana", and so on:</span>
[<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'lemon'</span>].each(<span class="keyword">function</span>(item, index){
    alert(index + <span class="string">" = "</span> + item);
}); <span class="comment">//The optional second argument for binding isn't used here.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Array:Array-each" alt="Array.each">Array.each</a></li>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/forEach" alt="MDN Array:forEach">MDN Array:forEach</a></li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This method is only available for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/forEach" alt="MDN Array:forEach">MDN Array:forEach</a> support.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:invoke" name="Array:invoke">Array method: invoke </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns an array with the named method applied to the array&#39;s contents.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> arr = myArray.invoke(method[, arg, arg, arg ...])</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>method - (<em>string</em>) The method to apply to each item in the array.</li>
<li>arg - (<em>mixed</em>) Any number of arguments to pass to the named method.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) A new array containing the results of the applied method.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> foo = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>];
<span class="keyword">var</span> bar = foo.invoke(<span class="string">'limit'</span>, <span class="number">10</span>, <span class="number">30</span>);    <span class="comment">//bar is now [10, 10, 15, 16, 23, 30]</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>The method that is invoked is a method of each of the items.
If the method does not exist, then an error will be thrown. For example:</p>
<pre><code class="javascript">[<span class="number">0</span>, <span class="literal">false</span>, <span class="string">'string'</span>].invoke(<span class="string">'limit'</span>, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// throws an error!</span></code></pre><div class="heading clearfix"><h2><a href="#Array:every" name="Array:every">Array method: every </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns true if every element in the array satisfies the provided testing function.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/every" alt="Array:every">Array:every</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> allPassed = myArray.every(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>fn   - (<em>function</em>) The function to test for each element.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) If every element in the array satisfies the provided testing function, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> areAllBigEnough = [<span class="number">10</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">100</span>].every(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item &gt; <span class="number">20</span>;
}); <span class="comment">// areAllBigEnough = false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/every" alt="MDN Array:every">MDN Array:every</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:filter" name="Array:filter">Array method: filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates a new array with all of the elements of the array for which the provided filtering function returns true.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter" alt="Array:filter">Array:filter</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> filteredArray = myArray.filter(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>fn   - (<em>function</em>) The function to test each element of the array. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) The new filtered array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> biggerThanTwenty = [<span class="number">10</span>, <span class="number">3</span>, <span class="number">25</span>, <span class="number">100</span>].filter(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item &gt; <span class="number">20</span>;
}); <span class="comment">// biggerThanTwenty = [25, 100]</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter" alt="MDN Array:filter">MDN Array:filter</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:clean" name="Array:clean">Array method: clean </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates a new array with all of the elements of the array which are defined (i.e. not null or undefined).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> cleanedArray = myArray.clean();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) The new filtered array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="literal">null</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">'foo'</span>, <span class="literal">undefined</span>, <span class="string">''</span>];
myArray.clean() <span class="comment">// returns [1, 0, true, false, 'foo', '']</span></code></pre><div class="heading clearfix"><h2><a href="#Array:indexOf" name="Array:indexOf">Array method: indexOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the index of the first element within the array equal to the specified value, or -1 if the value is not found.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf" alt="Array:indexOf">Array:indexOf</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> index = myArray.indexOf(item[, from]);</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The index of the first element within the array equal to the specified value. If not found, returns -1.</li>
</ul>
<div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
<li>from - (<em>number</em>, optional: defaults to 0) The index of the array at which to begin the search.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'apple'</span>, <span class="string">'lemon'</span>, <span class="string">'banana'</span>].indexOf(<span class="string">'lemon'</span>); <span class="comment">// returns 1</span>
[<span class="string">'apple'</span>, <span class="string">'lemon'</span>].indexOf(<span class="string">'banana'</span>); <span class="comment">// returns -1</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf" alt="MDN Array:indexOf">MDN Array:indexOf</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:map" name="Array:map">Array method: map </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates a new array with the results of calling a provided function on every element in the array.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/map" alt="Array:map">Array:map</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> mappedArray = myArray.map(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>fn   - (<em>function</em>) The function to produce an element of the new Array from an element of the current one.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) The new mapped array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> timesTwo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item * <span class="number">2</span>;
}); <span class="comment">//timesTwo = [2, 4, 6];</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/map" alt="MDN Array:map">MDN Array:map</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:some" name="Array:some">Array method: some </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns true if at least one element in the array satisfies the provided testing function.
This method is provided only for browsers without native <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/some" alt="Array:some">Array:some</a> support.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> somePassed = myArray.some(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) If at least one element in the array satisfies the provided testing function returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>fn   - (<em>function</em>) The function to test for each element. This function is passed the item and its index in the array.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, index, array)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>index  - (<em>number</em>) The current item&#39;s index in the array.</li>
<li>array  - (<em>array</em>) The actual array.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> isAnyBigEnough = [<span class="number">10</span>, <span class="number">4</span>, <span class="number">25</span>, <span class="number">100</span>].some(<span class="keyword">function</span>(item, index){
    <span class="keyword">return</span> item &gt; <span class="number">20</span>;
}); <span class="comment">// isAnyBigEnough = true</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/some" alt="MDN Array:some">MDN Array:some</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:associate" name="Array:associate">Array method: associate </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates an object with key-value pairs based on the array of keywords passed in and the current content of the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> associated = myArray.associate(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>obj - (<em>array</em>) Its items will be used as the keys of the object that will be created.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The new associated object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> animals = [<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>];
<span class="keyword">var</span> sounds = [<span class="string">'Moo'</span>, <span class="string">'Oink'</span>, <span class="string">'Woof'</span>, <span class="string">'Miao'</span>];
sounds.associate(animals);
<span class="comment">// returns {'Cow': 'Moo', 'Pig': 'Oink', 'Dog': 'Woof', 'Cat': 'Miao'}</span></code></pre><div class="heading clearfix"><h2><a href="#Array:link" name="Array:link">Array method: link </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Accepts an object of key / function pairs to assign values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = myArray.link(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>)  An object containing key / function pairs must be passed to be used as a template for associating values with the different keys.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The new associated object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> el = document.createElement(<span class="string">'div'</span>);
<span class="keyword">var</span> arr2 = [<span class="number">100</span>, <span class="string">'Hello'</span>, {foo: <span class="string">'bar'</span>}, el, <span class="literal">false</span>];
arr2.link({
    myNumber: Type.isNumber,
    myElement: Type.isElement,
    myObject: Type.isObject,
    myString: Type.isString,
    myBoolean: <span class="keyword">function</span>(obj){ <span class="keyword">return</span> obj != <span class="literal">null</span>; }
});
<span class="comment">// returns {myNumber: 100, myElement: el, myObject: {foo: 'bar'}, myString: 'Hello', myBoolean: false}</span></code></pre><div class="heading clearfix"><h2><a href="#Array:contains" name="Array:contains">Array method: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Tests an array for the presence of an item.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> inArray = myArray.contains(item[, from]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
<li>from - (<em>number</em>, optional: defaults to 0) The index of the array at which to begin the search.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) If the array contains the item specified, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].contains(<span class="string">'a'</span>); <span class="comment">// returns true</span>
[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].contains(<span class="string">'d'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf" alt="MDN Array:indexOf">MDN Array:indexOf</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:append" name="Array:append">Array method: append </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Appends the passed array to the end of the current array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = myArray.append(otherArray);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>otherArray - (<em>array</em>) The array containing values you wish to append.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) The original array including the new values.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myOtherArray = [<span class="string">'green'</span>, <span class="string">'yellow'</span>];
[<span class="string">'red'</span>, <span class="string">'blue'</span>].append(myOtherArray); <span class="comment">// returns ['red', 'blue', 'green', 'yellow'];</span>

[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>].append([<span class="number">3</span>, [<span class="number">4</span>]]); <span class="comment">// [0, 1, 2, 3, [4]]</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This is an array-specific equivalent of <em>$extend</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:getLast" name="Array:getLast">Array method: getLast </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the last item from the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.getLast();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The last item in this array.</li>
<li>(<em>null</em>) If this array is empty, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>].getLast(); <span class="comment">// returns 'Cat'</span></code></pre><div class="heading clearfix"><h2><a href="#Array:getRandom" name="Array:getRandom">Array method: getRandom </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns a random item from the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.getRandom();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) A random item from this array. If this array is empty, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>].getRandom(); <span class="comment">// returns one of the items</span></code></pre><div class="heading clearfix"><h2><a href="#Array:include" name="Array:include">Array method: include </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Pushes the passed element into the array if it&#39;s not already present (case and type sensitive).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.include(item);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>item - (<em>object</em>) The item that should be added to this array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) This array with the new item included.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>].include(<span class="string">'Cat'</span>); <span class="comment">// returns ['Cow', 'Pig', 'Dog', 'Cat']</span>
[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>].include(<span class="string">'Dog'</span>); <span class="comment">// returns ['Cow', 'Pig', 'Dog']</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>If you want to push the passed element even if it&#39;s already present, use
the vanilla javascript:</p>
<pre><code class="javascript">myArray.push(item);</code></pre><div class="heading clearfix"><h2><a href="#Array:combine" name="Array:combine">Array method: combine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Combines an array with all the items of another. Does not allow duplicates and is case and type sensitive.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.combine(array);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>array - (<em>array</em>) The array whose items should be combined into this array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) This array combined with the new items.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> animals = [<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>];
animals.combine([<span class="string">'Cat'</span>, <span class="string">'Dog'</span>]); <span class="comment">//animals = ['Cow', 'Pig', 'Dog', 'Cat'];</span></code></pre><div class="heading clearfix"><h2><a href="#Array:erase" name="Array:erase">Array method: erase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes all occurrences of an item from the array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.erase(item);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>item - (<em>object</em>) The item to search for in the array.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) This array with all occurrences of the item removed.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>, <span class="string">'Cat'</span>, <span class="string">'Dog'</span>].erase(<span class="string">'Dog'</span>) <span class="comment">// returns ['Cow', 'Pig', 'Cat']</span>
[<span class="string">'Cow'</span>, <span class="string">'Pig'</span>, <span class="string">'Dog'</span>].erase(<span class="string">'Cat'</span>) <span class="comment">// returns ['Cow', 'Pig', 'Dog']</span></code></pre><div class="heading clearfix"><h2><a href="#Array:empty" name="Array:empty">Array method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Empties an array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.empty();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) This array, emptied.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="string">'old'</span>, <span class="string">'data'</span>];
myArray.empty(); <span class="comment">//myArray is now []</span></code></pre><div class="heading clearfix"><h2><a href="#Array:flatten" name="Array:flatten">Array method: flatten </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Flattens a multidimensional array into a single array.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.flatten();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) A new flat array.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>, [<span class="number">6</span>,<span class="number">7</span>]], [[[<span class="number">8</span>]]]];
<span class="keyword">var</span> newArray = myArray.flatten(); <span class="comment">//newArray is [1,2,3,4,5,6,7,8]</span></code></pre><div class="heading clearfix"><h2><a href="#Array:pick" name="Array:pick">Array method: pick </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the first defined value of the array passed in, or null.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> picked = [var1, var2, var3].pick();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The first variable that is defined.</li>
<li>(<em>null</em>) If all variables passed in are <code>null</code> or <code>undefined</code>, returns <code>null</code>.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">(infoMessage, errorMessage)</span>{</span>
    alert([errorMessage, infoMessage, <span class="string">'There was no message supplied.'</span>].pick());

    <span class="comment">//or more MooTools 1.2 style using Generics</span>
    Array.pick([errorMessage, infoMessage, <span class="string">'There was no message supplied.'</span>]);

}
say(); <span class="comment">// alerts 'There was no message supplied.'</span>
say(<span class="string">'This is an info message.'</span>); <span class="comment">// alerts 'This is an info message.'</span>
say(<span class="string">'This message will be ignored.'</span>, <span class="string">'This is the error message.'</span>); <span class="comment">// alerts 'This is the error message.'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This is equivalent to <em>$pick</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Array:hexToRgb" name="Array:hexToRgb">Array method: hexToRgb </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts an hexadecimal color value to RGB. Input array must be the following hexadecimal color format.
[&#39;FF&#39;, &#39;FF&#39;, &#39;FF&#39;]</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.hexToRgb([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [255, 51, 0]) instead of a string (e.g. &quot;rgb(255, 51, 0)&quot;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A string representing the color in RGB.</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="string">'11'</span>, <span class="string">'22'</span>, <span class="string">'33'</span>].hexToRgb(); <span class="comment">// returns 'rgb(17, 34, 51)'</span>
[<span class="string">'11'</span>, <span class="string">'22'</span>, <span class="string">'33'</span>].hexToRgb(<span class="literal">true</span>); <span class="comment">// returns [17, 34, 51]</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Types/String#String:hexToRgb" alt="String:hexToRgb">String:hexToRgb</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Array:rgbToHex" name="Array:rgbToHex">Array method: rgbToHex </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts an RGB color value to hexadecimal. Input array must be in one of the following RGB color formats.
[255, 255, 255], or [255, 255, 255, 1]</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myArray.rgbToHex([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [&#39;ff&#39;, &#39;33&#39;, &#39;00&#39;]) instead of a string (e.g. &#39;#ff3300&#39;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A string representing the color in hexadecimal, or &#39;transparent&#39; string if the fourth value of rgba in the input array is 0 (rgba).</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">[<span class="number">17</span>, <span class="number">34</span>, <span class="number">51</span>].rgbToHex(); <span class="comment">// returns '#112233'</span>
[<span class="number">17</span>, <span class="number">34</span>, <span class="number">51</span>].rgbToHex(<span class="literal">true</span>); <span class="comment">// returns ['11', '22', '33']</span>
[<span class="number">17</span>, <span class="number">34</span>, <span class="number">51</span>, <span class="number">0</span>].rgbToHex(); <span class="comment">// returns 'transparent'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Types/String#String:rgbToHex" alt="String:rgbToHex">String:rgbToHex</a></li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Event" name="Event">Type: DOMEvent </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>MooTools DOMEvent Methods.</p>
<div class="heading clearfix"><h2><a href="#DOMEvent:constructor" name="DOMEvent:constructor">DOMEvent Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">new</span> DOMEvent([event[, win]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>event - (<em>event</em>, required) An HTMLEvent Object.</li>
<li>win   - (<em>window</em>, optional: defaults to window) The context of the event.</li>
</ol>
<div class="heading clearfix"><h4>Properties:</h4></div>
<ul>
<li>page.x        - (<em>number</em>) The x position of the mouse, relative to the full window.</li>
<li>page.y        - (<em>number</em>) The y position of the mouse, relative to the full window.</li>
<li>client.x      - (<em>number</em>) The x position of the mouse, relative to the viewport.</li>
<li>client.y      - (<em>number</em>) The y position of the mouse, relative to the viewport.</li>
<li>rightClick    - (<em>boolean</em>) True if the user clicked the right mousebutton</li>
<li>wheel         - (<em>number</em>) The amount of third button scrolling.</li>
<li>relatedTarget - (<em>element</em>) The event related target.</li>
<li>target        - (<em>element</em>) The event target.</li>
<li>code          - (<em>number</em>) The keycode of the key pressed.</li>
<li>key           - (<em>string</em>) The key pressed as a lowercase string. key can be &#39;enter&#39;, &#39;up&#39;, &#39;down&#39;, &#39;left&#39;, &#39;right&#39;, &#39;space&#39;, &#39;backspace&#39;, &#39;tab&#39;, &#39;delete&#39;, and &#39;esc&#39;.</li>
<li>shift         - (<em>boolean</em>) True if the user pressed the shift key.</li>
<li>control       - (<em>boolean</em>) True if the user pressed the control key.</li>
<li>alt           - (<em>boolean</em>) True if the user pressed the alt key.</li>
<li>meta          - (<em>boolean</em>) True if the user pressed the meta key.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myLink'</span>).addEvent(<span class="string">'keydown'</span>, <span class="keyword">function</span>(event){
    <span class="comment">// the passed event parameter is already an instance of the Event type.</span>
    alert(event.key);   <span class="comment">// returns the lowercase letter pressed.</span>
    alert(event.shift); <span class="comment">// returns true if the key pressed is shift.</span>
    <span class="keyword">if</span> (event.key == <span class="string">'s'</span> &amp;&amp; event.control) alert(<span class="string">'Document saved.'</span>); <span class="comment">//executes if the user presses Ctr+S.</span>
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Accessing event.page / event.client requires the page to be in <a href="http://hsivonen.iki.fi/doctype/" alt="Standards Mode">Standards Mode</a>.</li>
<li>Every event added with addEvent gets the MooTools method automatically, without the need to manually instance it.</li>
<li><code>event.key</code> is only reliable with <code>keydown</code> or <code>keyup</code> events. See <a href="http://www.quirksmode.org/js/keys.html" alt="PPK">PPK</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:stop" name="DOMEvent:stop">DOMEvent Method: stop </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Stop an event from propagating and also executes preventDefault.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myEvent.stop();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This DOMEvent instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"http://google.com/"</span>&gt;</span>Visit Google.com<span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myAnchor'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop(); <span class="comment">//Prevents the browser from following the link.</span>
    <span class="keyword">this</span>.set(<span class="string">'text'</span>, <span class="string">'Where do you think you\'re going?'</span>); <span class="comment">//'this' is Element that fires the Event.</span>
    (<span class="keyword">function</span>(){
        <span class="keyword">this</span>.set(<span class="string">'text'</span>, <span class="string">'Instead visit the Blog.'</span>).set(<span class="string">'href'</span>, <span class="string">'http://blog.mootools.net'</span>);
    }).delay(<span class="number">500</span>, <span class="keyword">this</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Returning false within the function can also stop the propagation of the Event.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="#Element:addEvent" alt="Element.addEvent">Element.addEvent</a>, <a href="#DOMEvent:stopPropagation" alt="DOMEvent.stopPropagation">DOMEvent.stopPropagation</a>, <a href="#DOMEvent:preventDefault" alt="DOMEvent.preventDefault">DOMEvent.preventDefault</a>, <a href="/core/docs/1.5.1/Types/Function#Function:delay" alt="Function:delay">Function:delay</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:stopPropagation" name="DOMEvent:stopPropagation">DOMEvent Method: stopPropagation </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Cross browser method to stop the propagation of an event (this stops the event from bubbling up through the DOM).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myEvent.stopPropagation();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This DOMEvent object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div>
<p>&quot;#myChild&quot; does not cover the same area as myElement. Therefore, the &#39;click&#39; differs from parent and child depending on the click location:</p>
<div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myChild"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){
    alert(<span class="string">'click'</span>);
    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//equivalent to stopPropagation.</span>
});
$(<span class="string">'myChild'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stopPropagation(); <span class="comment">//prevents the event from bubbling up, and fires the parent's click event.</span>
});</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
<li><a href="https://developer.mozilla.org/en/DOM/event.stopPropagation" alt="MDN event.stopPropagation">MDN event.stopPropagation</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:preventDefault" name="DOMEvent:preventDefault">DOMEvent Method: preventDefault </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Cross browser method to prevent the default action of the event.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myEvent.preventDefault();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) This DOMEvent object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"myCheckbox"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myCheckbox'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.preventDefault(); <span class="comment">//prevents the checkbox from being "checked".</span>
});</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
<li><a href="https://developer.mozilla.org/en/DOM/event.preventDefault" alt="MDN event.preventDefault">MDN event.preventDefault</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:DOMEvent-defineKey" name="DOMEvent:DOMEvent-defineKey">Function: DOMEvent.defineKey </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This function allows to add an additional event key code.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">DOMEvent.defineKey(<span class="number">16</span>, <span class="string">'shift'</span>);
$(<span class="string">'myInput'</span>).addEvent(<span class="string">'keydown'</span>, <span class="keyword">function</span>(event){
    <span class="keyword">if</span> (event.key == <span class="string">'shift'</span>) alert(<span class="string">'You pressed shift.'</span>);
});</code></pre><div class="heading clearfix"><h4>Predefined keys:</h4></div>
<ul>
<li>enter</li>
<li>up</li>
<li>down</li>
<li>left</li>
<li>right</li>
<li>esc</li>
<li>space</li>
<li>backspace</li>
<li>tab</li>
<li>delete</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/more/docs/1.5.1/Interface/Keyboard" alt="MooTools More Keyboard">MooTools More Keyboard</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:DOMEvent-defineKey-1" name="DOMEvent:DOMEvent-defineKey-1">Function: DOMEvent.defineKeys </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This function allows to add additional event key codes.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">DOMEvent.defineKeys({
    <span class="string">'16'</span>: <span class="string">'shift'</span>,
    <span class="string">'17'</span>: <span class="string">'control'</span>
});
$(<span class="string">'myInput'</span>).addEvent(<span class="string">'keydown'</span>, <span class="keyword">function</span>(event){
    <span class="keyword">if</span> (event.key == <span class="string">'control'</span>) alert(<span class="string">'You pressed control.'</span>);
});</code></pre>+R*****<div class="heading clearfix"><h1><a href="#Event" name="Event">Type: DOMEvent </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>MooTools DOMEvent Methods.</p>
<div class="heading clearfix"><h2><a href="#DOMEvent:constructor" name="DOMEvent:constructor">DOMEvent Method: constructor </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">new</span> DOMEvent([event[, win]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>event - (<em>event</em>, required) An HTMLEvent Object.</li>
<li>win   - (<em>window</em>, optional: defaults to window) The context of the event.</li>
</ol>
<div class="heading clearfix"><h4>Properties:</h4></div><ul>
<li>page.x        - (<em>number</em>) The x position of the mouse, relative to the full window.</li>
<li>page.y        - (<em>number</em>) The y position of the mouse, relative to the full window.</li>
<li>client.x      - (<em>number</em>) The x position of the mouse, relative to the viewport.</li>
<li>client.y      - (<em>number</em>) The y position of the mouse, relative to the viewport.</li>
<li>rightClick    - (<em>boolean</em>) True if the user clicked the right mousebutton</li>
<li>wheel         - (<em>number</em>) The amount of third button scrolling.</li>
<li>relatedTarget - (<em>element</em>) The event related target.</li>
<li>target        - (<em>element</em>) The event target.</li>
<li>code          - (<em>number</em>) The keycode of the key pressed.</li>
<li>key           - (<em>string</em>) The key pressed as a lowercase string. key can be &#39;enter&#39;, &#39;up&#39;, &#39;down&#39;, &#39;left&#39;, &#39;right&#39;, &#39;space&#39;, &#39;backspace&#39;, &#39;tab&#39;, &#39;delete&#39;, and &#39;esc&#39;.</li>
<li>shift         - (<em>boolean</em>) True if the user pressed the shift key.</li>
<li>control       - (<em>boolean</em>) True if the user pressed the control key.</li>
<li>alt           - (<em>boolean</em>) True if the user pressed the alt key.</li>
<li>meta          - (<em>boolean</em>) True if the user pressed the meta key.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">$(<span class="string">'myLink'</span>).addEvent(<span class="string">'keydown'</span>, <span class="keyword">function</span>(event){
     <span class="comment">// the passed event parameter is already an instance of the Event type.</span>
    alert(event.key);   <span class="comment">// returns the lowercase letter pressed.</span>
    alert(event.shift); <span class="comment">// returns true if the key pressed is shift.</span>
    <span class="keyword">if</span> (event.key == <span class="string">'s'</span> &amp;&amp; event.control) alert(<span class="string">'Document saved.'</span>); <span class="comment">//executes if the user presses Ctr+S.</span>
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Accessing event.page / event.client requires the page to be in <a href="http://hsivonen.iki.fi/doctype/" alt="Standards Mode">Standards Mode</a>.</li>
<li>Every event added with addEvent gets the MooTools method automatically, without the need to manually instance it.</li>
<li><code>event.key</code> is only reliable with <code>keydown</code> or <code>keyup</code> events. See <a href="http://www.quirksmode.org/js/keys.html" alt="PPK">PPK</a>.</li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:stop" name="DOMEvent:stop">DOMEvent Method: stop </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Stop an event from propagating and also executes preventDefault.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myEvent.stop();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This DOMEvent instance.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">id</span>=<span class="value">"myAnchor"</span> <span class="attribute">href</span>=<span class="value">"http://google.com/"</span>&gt;</span>Visit Google.com<span class="tag">&lt;/<span class="title">a</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myAnchor'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stop(); <span class="comment">//Prevents the browser from following the link.</span>
    <span class="keyword">this</span>.set(<span class="string">'text'</span>, <span class="string">'Where do you think you\'re going?'</span>); <span class="comment">//'this' is Element that fires the Event.</span>
    (<span class="keyword">function</span>(){
        <span class="keyword">this</span>.set(<span class="string">'text'</span>, <span class="string">'Instead visit the Blog.'</span>).set(<span class="string">'href'</span>, <span class="string">'http://blog.mootools.net'</span>);
    }).delay(<span class="number">500</span>, <span class="keyword">this</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Returning false within the function can also stop the propagation of the Event.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="#Element:addEvent" alt="Element.addEvent">Element.addEvent</a>, <a href="#DOMEvent:stopPropagation" alt="DOMEvent.stopPropagation">DOMEvent.stopPropagation</a>, <a href="#DOMEvent:preventDefault" alt="DOMEvent.preventDefault">DOMEvent.preventDefault</a>, <a href="/core/docs/1.5.1/Types/Function#Function:delay" alt="Function:delay">Function:delay</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:stopPropagation" name="DOMEvent:stopPropagation">DOMEvent Method: stopPropagation </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Cross browser method to stop the propagation of an event (this stops the event from bubbling up through the DOM).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myEvent.stopPropagation();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This DOMEvent object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><p>&quot;#myChild&quot; does not cover the same area as myElement. Therefore, the &#39;click&#39; differs from parent and child depending on the click location:</p>
<div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myElement"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"myChild"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myElement'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(){
    alert(<span class="string">'click'</span>);
    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//equivalent to stopPropagation.</span>
});
$(<span class="string">'myChild'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.stopPropagation(); <span class="comment">//prevents the event from bubbling up, and fires the parent's click event.</span>
});</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
<li><a href="https://developer.mozilla.org/en/DOM/event.stopPropagation" alt="MDN event.stopPropagation">MDN event.stopPropagation</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:preventDefault" name="DOMEvent:preventDefault">DOMEvent Method: preventDefault </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Cross browser method to prevent the default action of the event.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myEvent.preventDefault();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) This DOMEvent object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><div class="heading clearfix"><h5>HTML:</h5></div><pre><code class="xml"><span class="tag">&lt;<span class="title">form</span>&gt;</span>
    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"myCheckbox"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span></code></pre><div class="heading clearfix"><h5>JavaScript</h5></div><pre><code class="javascript">$(<span class="string">'myCheckbox'</span>).addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(event){
    event.preventDefault(); <span class="comment">//prevents the checkbox from being "checked".</span>
});</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Element/Element.Event#Element:addEvent" alt="Element:addEvent">Element:addEvent</a></li>
<li><a href="https://developer.mozilla.org/en/DOM/event.preventDefault" alt="MDN event.preventDefault">MDN event.preventDefault</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:DOMEvent-defineKey" name="DOMEvent:DOMEvent-defineKey">Function: DOMEvent.defineKey </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This function allows to add an additional event key code.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">DOMEvent.defineKey(<span class="number">16</span>, <span class="string">'shift'</span>);
$(<span class="string">'myInput'</span>).addEvent(<span class="string">'keydown'</span>, <span class="keyword">function</span>(event){
    <span class="keyword">if</span> (event.key == <span class="string">'shift'</span>) alert(<span class="string">'You pressed shift.'</span>);
});</code></pre><div class="heading clearfix"><h4>Predefined keys:</h4></div><ul>
<li>enter</li>
<li>up</li>
<li>down</li>
<li>left</li>
<li>right</li>
<li>esc</li>
<li>space</li>
<li>backspace</li>
<li>tab</li>
<li>delete</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/more/docs/1.5.1/Interface/Keyboard" alt="MooTools More Keyboard">MooTools More Keyboard</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#DOMEvent:DOMEvent-defineKey-1" name="DOMEvent:DOMEvent-defineKey-1">Function: DOMEvent.defineKeys </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This function allows to add additional event key codes.</p>
<div class="heading clearfix"><h4>Example:</h4></div><pre><code class="javascript">DOMEvent.defineKeys({
    <span class="string">'16'</span>: <span class="string">'shift'</span>,
    <span class="string">'17'</span>: <span class="string">'control'</span>
});
$(<span class="string">'myInput'</span>).addEvent(<span class="string">'keydown'</span>, <span class="keyword">function</span>(event){
    <span class="keyword">if</span> (event.key == <span class="string">'control'</span>) alert(<span class="string">'You pressed control.'</span>);
});</code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Function" name="Function">Type: Function </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Function Methods.</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function" alt="MDN Function">MDN Function</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Function:Function-from" name="Function:Function-from">Function: Function.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>If the passed argument is a function, it will return itself. Otherwise, it will return a function that returns the passed argument.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> foo = Function.from(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>obj - (<em>mixed</em>) If this argument is a function, it will simply return itself. Otherwise, an object you wish to convert into a function that returns the argument.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>function</em>) Either the passed function or an anonymous function that returns the passed argument.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> fn = Function.from(<span class="number">42</span>);
alert(fn());    <span class="comment">// alerts '42'</span>

<span class="keyword">var</span> fn2 = Function.from(fn);
alert(fn2());   <span class="comment">// alerts '42'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This function is equivalent to the following deprecated MooTools 1.2 methods:</p>
<pre><code class="javascript"><span class="keyword">var</span> fn1 = Function.from();      <span class="comment">// equivalent to var fn1 = function(){};</span>
<span class="keyword">var</span> fn2 = Function.from(foo);   <span class="comment">// equivalent to var fn2 = function(){ return foo; };</span></code></pre><div class="heading clearfix"><h2><a href="#Function:Function-attempt" name="Function:Function-attempt">Function: Function.attempt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Tries to execute a number of functions. Returns immediately the return value of the first non-failed function without executing successive functions, or null.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Function.attempt(fn[, fn, fn, fn, ...]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ul>
<li>fn   - (<em>function</em>) Any number of functions to execute.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) Standard return of the called function.</li>
<li>(<em>null</em>) <code>null</code> if all the passed functions fail.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = Function.attempt(<span class="keyword">function</span>(){
    <span class="keyword">return</span> some.made.up.object;
}, <span class="keyword">function</span>(){
    <span class="keyword">return</span> jibberish.that.doesnt.exists;
}, <span class="keyword">function</span>(){
    <span class="keyword">return</span> <span class="literal">false</span>;
});

<span class="comment">//result is false</span>

<span class="keyword">var</span> failure, success;

Function.attempt(<span class="keyword">function</span>(){
    some.made.up.object = <span class="string">'something'</span>;
    success = <span class="literal">true</span>;
}, <span class="keyword">function</span>(){
    failure = <span class="literal">true</span>;
});

<span class="keyword">if</span> (success) alert(<span class="string">'yey!'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This method is an equivalent of <em>$try</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Function:extend" name="Function:extend">Function method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Extends a function with a new method or property.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFunction.extend(key, value);

<span class="comment">// Or</span>

myFunction.extend(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>key - (<em>string</em>) The key of the method or property</li>
<li>value - (<em>mixed</em>) The function or property value</li>
</ol>

<p>Or</p>

<ol>
<li>object - (<em>object</em>) An object with the key value pairs to add multiple methods or properties</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>function</em>) The function</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){};
myFunction.extend(<span class="string">'alert'</span>, <span class="keyword">function</span>(text){
    alert(text);
});
myFunction.alert(<span class="string">'Hello!'</span>); <span class="comment">// alerts Hello!</span>

<span class="comment">// Using objects</span>
myFunction.extend({
    alert: <span class="keyword">function</span>(text){
        alert(text);
    }
});</code></pre><div class="heading clearfix"><h2><a href="#Function:implement" name="Function:implement">Function method: implement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Implements a method to the prototype of the function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFunction.implement(key, value);

<span class="comment">// Or</span>

myFunction.implement(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>key - (<em>string</em>) The method of property name in the prototype</li>
<li>value - (<em>mixed</em>) The function or another value in the prototype</li>
</ol>

<p>Or</p>

<ol>
<li>object - (<em>object</em>) An object with key-value pairs to add multiple methods or properties to the function it&#39;s prototype.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>function</em>) The function</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){};
myFunction.implement(<span class="string">'alert'</span>, <span class="keyword">function</span>(text){
    alert(text);
});
<span class="keyword">var</span> myInstance = <span class="keyword">new</span> myFunction();
myInstance.alert(<span class="string">'Hello!'</span>); <span class="comment">// alerts Hello!</span>

<span class="comment">// Using objects</span>
myInstance.implement({
    alert: <span class="keyword">function</span>(text){
        alert(text);
    }
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>The difference between <em>implement</em> and <em>extend</em>, is that implement adds the value to the prototype.
So with <em>implement</em> each instance of the function will have this method or property while with <em>extend</em>
the method or property is added to a single instance.</p>
<div class="heading clearfix"><h2><a href="#Function:attempt" name="Function:attempt">Function method: attempt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Tries to execute a single function. Returns immediately the return value of the function if it does not fail, or null.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunctionResult = myFunction.attempt(args[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>args - (<em>mixed</em>) An argument, or array of arguments to run the function with.</li>
<li>bind - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) This Function&#39;s return value.</li>
<li>(<em>null</em>) <code>null</code> if the function fails.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){
    <span class="keyword">return</span> some.made.up.object;
};
myFunction.attempt(); <span class="comment">// returns 'null'</span>


<span class="keyword">var</span> myFunction = <span class="keyword">function</span>(val){
    <span class="keyword">return</span> val;
};
myFunction.attempt(<span class="literal">false</span>); <span class="comment">// returns 'false'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li>See <a href="#Function:Function-attempt" alt="Function.attempt">Function.attempt</a> for using more than one functions.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Function:pass" name="Function:pass">Function method: pass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns a closure with arguments and bind.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> newFunction = myFunction.pass([args[, bind]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>args - (<em>mixed</em>, optional) The arguments to pass to the function (must be an array if passing more than one argument).</li>
<li>bind - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>function</em>) The function whose arguments are passed when called.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){
    <span class="keyword">var</span> result = <span class="string">'Passed: '</span>;
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arguments.length; i &lt; l; i++){
        result += (arguments[i] + <span class="string">' '</span>);
    }
    <span class="keyword">return</span> result;
}
<span class="keyword">var</span> myHello = myFunction.pass(<span class="string">'hello'</span>);
<span class="keyword">var</span> myItems = myFunction.pass([<span class="string">'peach'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>]);

<span class="comment">// Later in the code, the functions can be executed:</span>
alert(myHello()); <span class="comment">// passes 'hello' to myFunction.</span>
alert(myItems()); <span class="comment">// passes the array of items to myFunction.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a></p>
<div class="heading clearfix"><h2><a href="#Function:bind" name="Function:bind">Function method: bind </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Changes the scope of <code>this</code> within the target function to refer to the bind parameter.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFunction.bind([bind[, arg1, arg2, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>bind - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
<li>arg1, arg2, ... - (<em>mixed</em>, optional) The arguments to pass to the function. If the bound function is called with other arguments the arguments are concatenated.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>function</em>) The bound function.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span>{</span>
    <span class="comment">// Note that 'this' here refers to window, not an element.</span>
    <span class="comment">// the function must be bound to the element we want to manipulate.</span>
    <span class="keyword">this</span>.setStyle(<span class="string">'color'</span>, <span class="string">'red'</span>);
};
<span class="keyword">var</span> myBoundFunction = myFunction.bind(myElement);
myBoundFunction(); <span class="comment">// makes myElement's text red</span>

<span class="comment">// To show how bind works the following example:</span>
<span class="keyword">var</span> myBoundFunction = myFunction.bind(anyVar);
<span class="comment">// is roughly equivalent with</span>
<span class="keyword">var</span> myBoundFunction = <span class="keyword">function</span>(){
    <span class="keyword">return</span> myFunction.call(<span class="keyword">this</span>);
};</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="/core/docs/1.5.1/Types/Function#Function:pass" alt="Function:pass">Function:pass</a></p>
<div class="heading clearfix"><h2><a href="#Function:delay" name="Function:delay">Function method: delay </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Delays the execution of a function by a specified duration.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> timeoutID = myFunction.delay(delay[, bind[, args]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>delay - (<em>number</em>) The duration to wait (in milliseconds).</li>
<li>bind  - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
<li>args  - (<em>mixed</em>, optional) The arguments passed (must be an array if the arguments are greater than one).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The JavaScript timeout id (for clearing delays).</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){ alert(<span class="string">'moo! Element id is: '</span> + <span class="keyword">this</span>.id); };

<span class="comment">//wait 50 milliseconds, then call myFunction and bind myElement to it</span>
myFunction.delay(<span class="number">50</span>, myElement); <span class="comment">// alerts: 'moo! Element id is: ... '</span>

<span class="comment">//an anonymous function which waits a second and then alerts</span>
(<span class="keyword">function</span>(){ alert(<span class="string">'one second later...'</span>); }).delay(<span class="number">1000</span>);

<span class="comment">//to stop the delay, clearTimeout can be used like so:</span>
<span class="keyword">var</span> timer = myFunction.delay(<span class="number">50</span>);
clearTimeout(timer);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/DOM/window.setTimeout" alt="MDN setTimeout">MDN setTimeout</a>, <a href="https://developer.mozilla.org/en/DOM/window.clearTimeout" alt="MDN clearTimeout">MDN clearTimeout</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Function:periodical" name="Function:periodical">Function method: periodical </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Executes a function in the specified intervals of time. Periodic execution can be stopped using the <em>clearInterval</em> function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> intervalID = myFunction.periodical(period[, bind[, args]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>period - (<em>number</em>) The duration of the intervals between executions.</li>
<li>bind   - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
<li>args   - (<em>mixed</em>, optional) The arguments passed (must be an array if the arguments are greater than one).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The Interval id (for clearing a periodical).</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Site = { counter: <span class="number">0</span> };
<span class="keyword">var</span> addCount = <span class="keyword">function</span>(){ <span class="keyword">this</span>.counter++; };
addCount.periodical(<span class="number">1000</span>, Site); <span class="comment">//adds the number of seconds at the Site.</span>

<span class="comment">// the interval can be stopped using the clearInterval function</span>
<span class="keyword">var</span> timer = myFunction.periodical(<span class="number">1000</span>);
clearInterval(timer);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/DOM/window.setInterval" alt="MDN setInterval">MDN setInterval</a>, <a href="https://developer.mozilla.org/en/DOM/window.clearInterval" alt="MDN clearInterval">MDN clearInterval</a></li>
</ul>
<div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:create" name="Deprecated-Functions:create">Function method: create </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This function has been deprecated.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:bindWithEvent" name="Deprecated-Functions:bindWithEvent">Function method: bindWithEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This function has been deprecated.</p>
<div class="heading clearfix"><h3>Example how you could replace this method:</h3></div><pre><code class="javascript">myElement.addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(e){
    myFunction.call(bind, e);
});</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:run" name="Deprecated-Functions:run">Function method: run </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>This function has been deprecated.</p>
<div class="heading clearfix"><h3>Replacement example</h3></div><pre><code class="javascript">fn.apply(thisArg, arguments); <span class="comment">// Old API: fn.run(arguments, thisArg);</span></code></pre>+R*****<div class="heading clearfix"><h1><a href="#Function" name="Function">Type: Function </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Function Methods.</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function" alt="MDN Function">MDN Function</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Function:Function-from" name="Function:Function-from">Function: Function.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>If the passed argument is a function, it will return itself. Otherwise, it will return a function that returns the passed argument.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> foo = Function.from(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>obj - (<em>mixed</em>) If this argument is a function, it will simply return itself. Otherwise, an object you wish to convert into a function that returns the argument.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>function</em>) Either the passed function or an anonymous function that returns the passed argument.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> fn = Function.from(<span class="number">42</span>);
alert(fn());    <span class="comment">// alerts '42'</span>

<span class="keyword">var</span> fn2 = Function.from(fn);
alert(fn2());    <span class="comment">// alerts '42'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This function is equivalent to the following deprecated MooTools 1.2 methods:</p>
<pre><code class="javascript"><span class="keyword">var</span> fn1 = Function.from();        <span class="comment">// equivalent to var fn1 = function(){};</span>
<span class="keyword">var</span> fn2 = Function.from(foo);    <span class="comment">// equivalent to var fn2 = function(){ return foo; };</span></code></pre><div class="heading clearfix"><h2><a href="#Function:Function-attempt" name="Function:Function-attempt">Function: Function.attempt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Tries to execute a number of functions. Returns immediately the return value of the first non-failed function without executing successive functions, or null.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Function.attempt(fn[, fn, fn, fn, ...]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ul>
<li>fn   - (<em>function</em>) Any number of functions to execute.</li>
</ul>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) Standard return of the called function.</li>
<li>(<em>null</em>) <code>null</code> if all the passed functions fail.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> result = Function.attempt(<span class="keyword">function</span>(){
    <span class="keyword">return</span> some.made.up.object;
}, <span class="keyword">function</span>(){
    <span class="keyword">return</span> jibberish.that.doesnt.exists;
}, <span class="keyword">function</span>(){
    <span class="keyword">return</span> <span class="literal">false</span>;
});

<span class="comment">//result is false</span>

<span class="keyword">var</span> failure, success;

Function.attempt(<span class="keyword">function</span>(){
    some.made.up.object = <span class="string">'something'</span>;
    success = <span class="literal">true</span>;
}, <span class="keyword">function</span>(){
    failure = <span class="literal">true</span>;
});

<span class="keyword">if</span> (success) alert(<span class="string">'yey!'</span>);</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This method is an equivalent of <em>$try</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Function:extend" name="Function:extend">Function method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Extends a function with a new method or property.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFunction.extend(key, value);

<span class="comment">// Or</span>

myFunction.extend(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>key - (<em>string</em>) The key of the method or property</li>
<li>value - (<em>mixed</em>) The function or property value</li>
</ol>
<p>Or</p>
<ol>
<li>object - (<em>object</em>) An object with the key value pairs to add multiple methods or properties</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>function</em>) The function</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){};
myFunction.extend(<span class="string">'alert'</span>, <span class="keyword">function</span>(text){
    alert(text);
});
myFunction.alert(<span class="string">'Hello!'</span>); <span class="comment">// alerts Hello!</span>

<span class="comment">// Using objects</span>
myFunction.extend({
    alert: <span class="keyword">function</span>(text){
        alert(text);
    }
});</code></pre><div class="heading clearfix"><h2><a href="#Function:implement" name="Function:implement">Function method: implement </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Implements a method to the prototype of the function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFunction.implement(key, value);

<span class="comment">// Or</span>

myFunction.implement(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>key - (<em>string</em>) The method of property name in the prototype</li>
<li>value - (<em>mixed</em>) The function or another value in the prototype</li>
</ol>
<p>Or</p>
<ol>
<li>object - (<em>object</em>) An object with key-value pairs to add multiple methods or properties to the function it&#39;s prototype.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>function</em>) The function</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){};
myFunction.implement(<span class="string">'alert'</span>, <span class="keyword">function</span>(text){
    alert(text);
});
<span class="keyword">var</span> myInstance = <span class="keyword">new</span> myFunction();
myInstance.alert(<span class="string">'Hello!'</span>); <span class="comment">// alerts Hello!</span>

<span class="comment">// Using objects</span>
myInstance.implement({
    alert: <span class="keyword">function</span>(text){
        alert(text);
    }
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>The difference between <em>implement</em> and <em>extend</em>, is that implement adds the value to the prototype.
So with <em>implement</em> each instance of the function will have this method or property while with <em>extend</em>
the method or property is added to a single instance.</p>
<div class="heading clearfix"><h2><a href="#Function:attempt" name="Function:attempt">Function method: attempt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Tries to execute a single function. Returns immediately the return value of the function if it does not fail, or null.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunctionResult = myFunction.attempt(args[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>args - (<em>mixed</em>) An argument, or array of arguments to run the function with.</li>
<li>bind - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) This Function&#39;s return value.</li>
<li>(<em>null</em>) <code>null</code> if the function fails.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){
    <span class="keyword">return</span> some.made.up.object;
};
myFunction.attempt(); <span class="comment">// returns 'null'</span>


<span class="keyword">var</span> myFunction = <span class="keyword">function</span>(val){
    <span class="keyword">return</span> val;
};
myFunction.attempt(<span class="literal">false</span>); <span class="comment">// returns 'false'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li>See <a href="#Function:Function-attempt" alt="Function.attempt">Function.attempt</a> for using more than one functions.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Function:pass" name="Function:pass">Function method: pass </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns a closure with arguments and bind.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> newFunction = myFunction.pass([args[, bind]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>args - (<em>mixed</em>, optional) The arguments to pass to the function (must be an array if passing more than one argument).</li>
<li>bind - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>function</em>) The function whose arguments are passed when called.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){
    <span class="keyword">var</span> result = <span class="string">'Passed: '</span>;
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arguments.length; i &lt; l; i++){
        result += (arguments[i] + <span class="string">' '</span>);
    }
    <span class="keyword">return</span> result;
}
<span class="keyword">var</span> myHello = myFunction.pass(<span class="string">'hello'</span>);
<span class="keyword">var</span> myItems = myFunction.pass([<span class="string">'peach'</span>, <span class="string">'apple'</span>, <span class="string">'orange'</span>]);

<span class="comment">// Later in the code, the functions can be executed:</span>
alert(myHello()); <span class="comment">// passes 'hello' to myFunction.</span>
alert(myItems()); <span class="comment">// passes the array of items to myFunction.</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a></p>
<div class="heading clearfix"><h2><a href="#Function:bind" name="Function:bind">Function method: bind </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Changes the scope of <code>this</code> within the target function to refer to the bind parameter.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myFunction.bind([bind[, arg1, arg2, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>bind - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
<li>arg1, arg2, ... - (<em>mixed</em>, optional) The arguments to pass to the function. If the bound function is called with other arguments the arguments are concatenated.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>function</em>) The bound function.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span>{</span>
    <span class="comment">// Note that 'this' here refers to window, not an element.</span>
    <span class="comment">// the function must be bound to the element we want to manipulate.</span>
    <span class="keyword">this</span>.setStyle(<span class="string">'color'</span>, <span class="string">'red'</span>);
};
<span class="keyword">var</span> myBoundFunction = myFunction.bind(myElement);
myBoundFunction(); <span class="comment">// makes myElement's text red</span>

<span class="comment">// To show how bind works the following example:</span>
<span class="keyword">var</span> myBoundFunction = myFunction.bind(anyVar);
<span class="comment">// is roughly equivalent with</span>
<span class="keyword">var</span> myBoundFunction = <span class="keyword">function</span>(){
    <span class="keyword">return</span> myFunction.call(<span class="keyword">this</span>);
};</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><p><a href="/core/docs/1.5.1/Types/Function#Function:pass" alt="Function:pass">Function:pass</a></p>
<div class="heading clearfix"><h2><a href="#Function:delay" name="Function:delay">Function method: delay </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Delays the execution of a function by a specified duration.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> timeoutID = myFunction.delay(delay[, bind[, args]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>delay - (<em>number</em>) The duration to wait (in milliseconds).</li>
<li>bind     - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
<li>args     - (<em>mixed</em>, optional) The arguments passed (must be an array if the arguments are greater than one).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The JavaScript timeout id (for clearing delays).</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myFunction = <span class="keyword">function</span>(){ alert(<span class="string">'moo! Element id is: '</span> + <span class="keyword">this</span>.id); };

<span class="comment">//wait 50 milliseconds, then call myFunction and bind myElement to it</span>
myFunction.delay(<span class="number">50</span>, myElement); <span class="comment">// alerts: 'moo! Element id is: ... '</span>

<span class="comment">//an anonymous function which waits a second and then alerts</span>
(<span class="keyword">function</span>(){ alert(<span class="string">'one second later...'</span>); }).delay(<span class="number">1000</span>);

<span class="comment">//to stop the delay, clearTimeout can be used like so:</span>
<span class="keyword">var</span> timer = myFunction.delay(<span class="number">50</span>);
clearTimeout(timer);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/DOM/window.setTimeout" alt="MDN setTimeout">MDN setTimeout</a>, <a href="https://developer.mozilla.org/en/DOM/window.clearTimeout" alt="MDN clearTimeout">MDN clearTimeout</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Function:periodical" name="Function:periodical">Function method: periodical </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Executes a function in the specified intervals of time. Periodic execution can be stopped using the <em>clearInterval</em> function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> intervalID = myFunction.periodical(period[, bind[, args]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>period - (<em>number</em>) The duration of the intervals between executions.</li>
<li>bind      - (<em>object</em>, optional) The object that the &quot;this&quot; of the function will refer to.</li>
<li>args      - (<em>mixed</em>, optional) The arguments passed (must be an array if the arguments are greater than one).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The Interval id (for clearing a periodical).</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> Site = { counter: <span class="number">0</span> };
<span class="keyword">var</span> addCount = <span class="keyword">function</span>(){ <span class="keyword">this</span>.counter++; };
addCount.periodical(<span class="number">1000</span>, Site); <span class="comment">//adds the number of seconds at the Site.</span>

<span class="comment">// the interval can be stopped using the clearInterval function</span>
<span class="keyword">var</span> timer = myFunction.periodical(<span class="number">1000</span>);
clearInterval(timer);</code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/DOM/window.setInterval" alt="MDN setInterval">MDN setInterval</a>, <a href="https://developer.mozilla.org/en/DOM/window.clearInterval" alt="MDN clearInterval">MDN clearInterval</a></li>
</ul>
<div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:create" name="Deprecated-Functions:create">Function method: create </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This function has been deprecated.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:bindWithEvent" name="Deprecated-Functions:bindWithEvent">Function method: bindWithEvent </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This function has been deprecated.</p>
<div class="heading clearfix"><h3>Example how you could replace this method:</h3></div><pre><code class="javascript">myElement.addEvent(<span class="string">'click'</span>, <span class="keyword">function</span>(e){
    myFunction.call(bind, e);
});</code></pre><div class="heading clearfix"><h2><a href="#Deprecated-Functions:run" name="Deprecated-Functions:run">Function method: run </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>This function has been deprecated.</p>
<div class="heading clearfix"><h3>Replacement example</h3></div><pre><code class="javascript">fn.apply(thisArg, arguments); <span class="comment">// Old API: fn.run(arguments, thisArg);</span></code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Number" name="Number">Type: Number </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A collection of the Number Object methods and functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Number" alt="MDN Number">MDN Number</a></li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<p>Every Math method is mirrored in the Number object, both as prototype and generic.</p>
<div class="heading clearfix"><h2><a href="#Number:Number-from" name="Number:Number-from">Function: Number.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the passed parameter as a Number, or null if not a number.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Number.from(arg);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>arg - (<em>mixed</em>) The argument to return as a number.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The argument as a number.</li>
<li>(<em>null</em>) Returns null if the number cannot be converted.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Number.from(<span class="string">'12'</span>)       <span class="comment">// returns 12</span>
Number.from(<span class="string">'hello'</span>)    <span class="comment">// returns null</span></code></pre><div class="heading clearfix"><h2><a href="#Number:Number-random" name="Number:Number-random">Function: Number.random </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns a random integer between the two passed in values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> random = Number.random(min, max);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>min - (<em>number</em>) The minimum value (inclusive).</li>
<li>max - (<em>number</em>) The maximum value (inclusive).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) A random number between min and max.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Number.random(<span class="number">5</span>, <span class="number">20</span>); <span class="comment">// returns a random number between 5 and 20.</span></code></pre><div class="heading clearfix"><h2><a href="#Number:limit" name="Number:limit">Number method: limit </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Limits this number between two bounds.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.limit(min, max);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>min - (<em>number</em>) The minimum possible value.</li>
<li>max - (<em>number</em>) The maximum possible value.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The number bounded between the given limits.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">12</span>).limit(<span class="number">2</span>, <span class="number">6.5</span>);  <span class="comment">// returns 6.5</span>
(-<span class="number">4</span>).limit(<span class="number">2</span>, <span class="number">6.5</span>);  <span class="comment">// returns 2</span>
(<span class="number">4.3</span>).limit(<span class="number">2</span>, <span class="number">6.5</span>); <span class="comment">// returns 4.3</span></code></pre><div class="heading clearfix"><h2><a href="#Number:round" name="Number:round">Number method: round </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns this number rounded to the specified precision.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.round([precision]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>precision - (<em>number</em>, optional: defaults to 0) The number of digits after the decimal place.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(number) The number, rounded.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>Argument may also be negative.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">12.45</span>).round()   <span class="comment">// returns 12</span>
(<span class="number">12.45</span>).round(<span class="number">1</span>)  <span class="comment">// returns 12.5</span>
(<span class="number">12.45</span>).round(-<span class="number">1</span>) <span class="comment">// returns 10</span></code></pre><div class="heading clearfix"><h2><a href="#Number:times" name="Number:times">Number method: times </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Executes the function passed in the specified number of times.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.times(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>fn   - (<em>function</em>) The function which should be executed on each iteration of the loop. This function is passed the current iteration&#39;s index.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">4</span>).times(alert); <span class="comment">// alerts "0", then "1", then "2", then "3".</span></code></pre><div class="heading clearfix"><h2><a href="#Number:toFloat" name="Number:toFloat">Number method: toFloat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns this number as a float. Useful because toFloat must work on both Strings and Numbers.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.toFloat();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The number as a float.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">111</span>).toFloat(); <span class="comment">// returns 111</span>
(<span class="number">111.1</span>).toFloat(); <span class="comment">// returns 111.1</span></code></pre><div class="heading clearfix"><h2><a href="#Number:toInt" name="Number:toInt">Number method: toInt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns this number as another number with the passed in base. Useful because toInt must work on both Strings and Numbers.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.toInt([base]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>base - (<em>number</em>, optional: defaults to 10) The base to use.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) A number with the base provided.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">111</span>).toInt(); <span class="comment">// returns 111</span>
(<span class="number">111.1</span>).toInt(); <span class="comment">// returns 111</span>
(<span class="number">111</span>).toInt(<span class="number">2</span>); <span class="comment">// returns 7</span></code></pre><div class="heading clearfix"><h2><a href="#Number-Math" name="Number-Math">Math Methods </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>There are several methods available from the Math object that can be used as Number Methods.</p>

<ul>
<li>abs</li>
<li>acos</li>
<li>asin</li>
<li>atan2</li>
<li>ceil</li>
<li>cos</li>
<li>exp</li>
<li>floor</li>
<li>log</li>
<li>max</li>
<li>min</li>
<li>pow</li>
<li>sin</li>
<li>sqrt</li>
<li>tan</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(-<span class="number">1</span>).abs(); <span class="comment">// returns 1</span>
(<span class="number">3</span>).pow(<span class="number">4</span>); <span class="comment">// returns 81</span></code></pre>+R*****<div class="heading clearfix"><h1><a href="#Number" name="Number">Type: Number </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A collection of the Number Object methods and functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Number" alt="MDN Number">MDN Number</a></li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><p>Every Math method is mirrored in the Number object, both as prototype and generic.</p>
<div class="heading clearfix"><h2><a href="#Number:Number-from" name="Number:Number-from">Function: Number.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the passed parameter as a Number, or null if not a number.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Number.from(arg);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>arg - (<em>mixed</em>) The argument to return as a number.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The argument as a number.</li>
<li>(<em>null</em>) Returns null if the number cannot be converted.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Number.from(<span class="string">'12'</span>)        <span class="comment">// returns 12</span>
Number.from(<span class="string">'hello'</span>)    <span class="comment">// returns null</span></code></pre><div class="heading clearfix"><h2><a href="#Number:Number-random" name="Number:Number-random">Function: Number.random </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns a random integer between the two passed in values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> random = Number.random(min, max);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>min - (<em>number</em>) The minimum value (inclusive).</li>
<li>max - (<em>number</em>) The maximum value (inclusive).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) A random number between min and max.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Number.random(<span class="number">5</span>, <span class="number">20</span>); <span class="comment">// returns a random number between 5 and 20.</span></code></pre><div class="heading clearfix"><h2><a href="#Number:limit" name="Number:limit">Number method: limit </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Limits this number between two bounds.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.limit(min, max);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>min - (<em>number</em>) The minimum possible value.</li>
<li>max - (<em>number</em>) The maximum possible value.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The number bounded between the given limits.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">12</span>).limit(<span class="number">2</span>, <span class="number">6.5</span>);  <span class="comment">// returns 6.5</span>
(-<span class="number">4</span>).limit(<span class="number">2</span>, <span class="number">6.5</span>);  <span class="comment">// returns 2</span>
(<span class="number">4.3</span>).limit(<span class="number">2</span>, <span class="number">6.5</span>); <span class="comment">// returns 4.3</span></code></pre><div class="heading clearfix"><h2><a href="#Number:round" name="Number:round">Number method: round </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns this number rounded to the specified precision.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.round([precision]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>precision - (<em>number</em>, optional: defaults to 0) The number of digits after the decimal place.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(number) The number, rounded.</li>
</ul>
<div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>Argument may also be negative.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">12.45</span>).round()   <span class="comment">// returns 12</span>
(<span class="number">12.45</span>).round(<span class="number">1</span>)  <span class="comment">// returns 12.5</span>
(<span class="number">12.45</span>).round(-<span class="number">1</span>) <span class="comment">// returns 10</span></code></pre><div class="heading clearfix"><h2><a href="#Number:times" name="Number:times">Number method: times </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Executes the function passed in the specified number of times.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.times(fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>fn   - (<em>function</em>) The function which should be executed on each iteration of the loop. This function is passed the current iteration&#39;s index.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">4</span>).times(alert); <span class="comment">// alerts "0", then "1", then "2", then "3".</span></code></pre><div class="heading clearfix"><h2><a href="#Number:toFloat" name="Number:toFloat">Number method: toFloat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns this number as a float. Useful because toFloat must work on both Strings and Numbers.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.toFloat();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The number as a float.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">111</span>).toFloat(); <span class="comment">// returns 111</span>
(<span class="number">111.1</span>).toFloat(); <span class="comment">// returns 111.1</span></code></pre><div class="heading clearfix"><h2><a href="#Number:toInt" name="Number:toInt">Number method: toInt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns this number as another number with the passed in base. Useful because toInt must work on both Strings and Numbers.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myNumber.toInt([base]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>base - (<em>number</em>, optional: defaults to 10) The base to use.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) A number with the base provided.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(<span class="number">111</span>).toInt(); <span class="comment">// returns 111</span>
(<span class="number">111.1</span>).toInt(); <span class="comment">// returns 111</span>
(<span class="number">111</span>).toInt(<span class="number">2</span>); <span class="comment">// returns 7</span></code></pre><div class="heading clearfix"><h2><a href="#Number-Math" name="Number-Math">Math Methods </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>There are several methods available from the Math object that can be used as Number Methods.</p>
<ul>
<li>abs</li>
<li>acos</li>
<li>asin</li>
<li>atan2</li>
<li>ceil</li>
<li>cos</li>
<li>exp</li>
<li>floor</li>
<li>log</li>
<li>max</li>
<li>min</li>
<li>pow</li>
<li>sin</li>
<li>sqrt</li>
<li>tan</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">(-<span class="number">1</span>).abs(); <span class="comment">// returns 1</span>
(<span class="number">3</span>).pow(<span class="number">4</span>); <span class="comment">// returns 81</span></code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Object" name="Object">Type: Object </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A collection of Object functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object" alt="MDN Object">MDN Object</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Object:Object-each" name="Object:Object-each">Function: Object.each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Used to iterate through an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Object.each(obj, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>obj      - (<em>object</em>) The object to iterate through.</li>
<li>fn       - (<em>function</em>) The function to test for each element.</li>
<li>bind     - (<em>object</em>, optional) The object to use as &#39;this&#39; within the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>key  - (<em>mixed</em>) The current item&#39;s key.</li>
<li>object - (<em>mixed</em>) The actual array/object.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">// alerts 'The first day of the week is Sunday', 'The second day of the week is Monday', etc.:</span>
Object.each({first: <span class="string">'Sunday'</span>, second: <span class="string">'Monday'</span>, third: <span class="string">'Tuesday'</span>}, <span class="keyword">function</span>(value, key){
    alert(<span class="string">'The '</span> + key + <span class="string">' day of the week is '</span> + value);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This method is an object-specific equivalent of <em>$each</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Object:Object-merge" name="Object:Object-merge">Function: Object.merge </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Merges any number of objects recursively without referencing them or their sub-objects.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> merged = Object.merge(obj1, obj2[, obj3[, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>(objects) Any number of objects.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The object that is created as a result of merging all the objects passed in.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> obj1 = {a: <span class="number">0</span>, b: <span class="number">1</span>};
<span class="keyword">var</span> obj2 = {c: <span class="number">2</span>, d: <span class="number">3</span>};
<span class="keyword">var</span> obj3 = {a: <span class="number">4</span>, d: <span class="number">5</span>};
<span class="keyword">var</span> merged = Object.merge(obj1, obj2, obj3); <span class="comment">// returns {a: 4, b: 1, c: 2, d: 5}, (obj2, and obj3 are unaltered)</span>

merged === obj1; <span class="comment">// true, obj1 gets altered and returned as merged object</span>

<span class="keyword">var</span> nestedObj1 = {a: {b: <span class="number">1</span>, c: <span class="number">1</span>}};
<span class="keyword">var</span> nestedObj2 = {a: {b: <span class="number">2</span>}};
<span class="keyword">var</span> nested = Object.merge(nestedObj1, nestedObj2); <span class="comment">// returns: {a: {b: 2, c: 1}}</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-clone" name="Object:Object-clone">Function: Object.clone </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns a copy of an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> clone = Object.clone(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>(obj) The object to clone</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) A copy of the passed object</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> obj1 = {a: <span class="number">0</span>, b: <span class="number">1</span>};
<span class="keyword">var</span> obj2 = Object.clone(obj1);

obj1.a = <span class="number">42</span>;
alert(obj1.a);  <span class="comment">// alerts '42'</span>
alert(obj2.a);  <span class="comment">// alerts '0'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This is an object-specific equivalent of <em>$unlink</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Object:Object-append" name="Object:Object-append">Function: Object.append </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Copies all the properties from the second object passed in to the first object passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Object.append(original, extension);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>original  - (<em>object</em>) The object to be extended.</li>
<li>extension - (<em>object</em>) The object whose properties will be copied to original.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The first object passed in, extended.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> firstObj = {
    name: <span class="string">'John'</span>,
    lastName: <span class="string">'Doe'</span>
};
<span class="keyword">var</span> secondObj = {
    age: <span class="string">'20'</span>,
    sex: <span class="string">'male'</span>,
    lastName: <span class="string">'Dorian'</span>
};
Object.append(firstObj, secondObj);
<span class="comment">//firstObj is now: {name: 'John', lastName: 'Dorian', age: '20', sex: 'male'};</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<p>This method is an object-specific equivalent of <em>$extend</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Object:Object-subset" name="Object:Object-subset">Function: Object.subset </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Get a subset of an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Object.subset(object, keys);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
<li>keys - (<em>array</em>) An array with the keys.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The subset of the Object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> object = {
    a: <span class="string">'one'</span>,
    b: <span class="string">'two'</span>,
    c: <span class="string">'three'</span>
};
Object.subset(object, [<span class="string">'a'</span>, <span class="string">'c'</span>]); <span class="comment">// returns {a: 'one', c: 'three'}</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-map" name="Object:Object-map">Function: Object.map </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates a new map with the results of calling a provided function on every value in the map.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> mappedObject = Object.map(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to produce an element of the Object from an element of the current one.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The new mapped object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>};
<span class="keyword">var</span> timesTwo = Object.map(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value * <span class="number">2</span>;
}); <span class="comment">// timesTwo now holds an object containing: {a: 2, b: 4, c: 6};</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-filter" name="Object:Object-filter">Function: Object.filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Creates a new object with all of the elements of the object for which the provided filtering function returns true.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> filteredObject = Object.filter(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to test each element of the Object. This function is passed the value and its key in the Object.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The new filtered object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">10</span>, b: <span class="number">20</span>, c: <span class="number">30</span>};
<span class="keyword">var</span> biggerThanTwenty = Object.filter(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value &gt; <span class="number">20</span>;
}); <span class="comment">// biggerThanTwenty now holds an object containing: {c: 30}</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-every" name="Object:Object-every">Function: Object.every </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns true if every value in the object satisfies the provided testing function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> allPassed = Object.every(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to test each element of the Object. This function is passed the value and its key in the Object.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object  - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) If every value in the Object satisfies the provided testing function, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">10</span>, b: <span class="number">4</span>, c: <span class="number">25</span>, d: <span class="number">100</span>};
<span class="keyword">var</span> areAllBigEnough = Object.every(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value &gt; <span class="number">20</span>;
}); <span class="comment">// areAllBigEnough = false</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-some" name="Object:Object-some">Function: Object.some </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns true if at least one value in the object satisfies the provided testing function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> anyPassed = Object.some(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to test each element of the object. This function is passed the value and its key in the object.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div>
<ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object  - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) If any value in the object satisfies the provided testing function, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">10</span>, b: <span class="number">4</span>, c: <span class="number">25</span>, d: <span class="number">100</span>};
<span class="keyword">var</span> areAnyBigEnough = Object.some(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value &gt; <span class="number">20</span>;
}); <span class="comment">//isAnyBigEnough = true</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-keys" name="Object:Object-keys">Function: Object.keys </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns an array containing all the keys, in the same order as the values returned by <a href="#Object:values" alt="Object:values">Object:values</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> keys = Object.keys(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) An array containing all the keys of the object.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Object:Object-values" name="Object:Object-values">Function: Object.values </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns an array containing all the values, in the same order as the keys returned by <a href="#Object:keys" alt="Object:keys">Object:keys</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> values = Object.values(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>array</em>) An array containing all the values of the object.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Object:Object-getLength" name="Object:Object-getLength">Function: Object.getLength </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the number of keys in the object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> length = Object.getLength(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The length of the object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {
    name: <span class="string">'John'</span>,
    lastName: <span class="string">'Doe'</span>
});
Object.getLength(myObject); <span class="comment">// returns 2</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-keyOf" name="Object:Object-keyOf">Function: Object.keyOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the key of the specified value. Synonymous with <a href="/core/docs/1.5.1/Types/Array#Array:indexOf" alt="Array:indexOf">Array:indexOf</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> key = Object.keyOf(object, item);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
<li>item - (<em>mixed</em>) The item to search for in the object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) If the object has a the specified item in it, returns the key of that item.</li>
<li>(<em>boolean</em>) Otherwise, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="string">'one'</span>, b: <span class="string">'two'</span>, c: <span class="number">3</span>};
Object.keyOf(myObject, <span class="string">'two'</span>); <span class="comment">// returns 'b'</span>
Object.keyOf(myObject, <span class="number">3</span>); <span class="comment">// returns 'c'</span>
Object.keyOf(myObject, <span class="string">'four'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-contains" name="Object:Object-contains">Function: Object.contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Tests for the presence of a specified value in the object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> inObject = Object.contains(object, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object.</li>
<li>value - (<em>mixed</em>) The value to search for in the Object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) If the object has the passed in value in any of the keys, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="string">'one'</span>, b: <span class="string">'two'</span>, c: <span class="string">'three'</span>};
Object.contains(myObject, <span class="string">'one'</span>); <span class="comment">// returns true</span>
Object.contains(myObject, <span class="string">'four'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-toQueryString" name="Object:Object-toQueryString">Function: Object.toQueryString </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Generates a query string from key/value pairs in an object and URI encodes the values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> queryString = Object.toQueryString(object[, base]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>object</em>) The object to generate the query string from.</li>
<li>base - (<em>string</em>, optional) Will be used as base variable in the query string.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The query string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Object.toQueryString({apple: <span class="string">'red'</span>, lemon: <span class="string">'yellow'</span>}); <span class="comment">// returns 'apple=red&amp;lemon=yellow'</span>

Object.toQueryString({apple: <span class="string">'red'</span>, lemon: <span class="string">'yellow'</span>}, <span class="string">'fruits'</span>); <span class="comment">// returns 'fruits[apple]=red&amp;fruits[lemon]=yellow'</span></code></pre><div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash" name="Deprecated-Functions:Hash">Type: Hash </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Hash has been deprecated. Each Hash method has a similar Object method or a Vanilla JS equivalent.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:has" name="Deprecated-Functions:Hash:has">Hash Method: has </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>You could simply use <code>myObject.myKey != undefined</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:keyOf" name="Deprecated-Functions:Hash:keyOf">Hash Method: keyOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-keyOf" alt="Object.keyOf">Object.keyOf</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:hasValue" name="Deprecated-Functions:Hash:hasValue">Hash Method: hasValue </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-contains" alt="Object.contains">Object.contains</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:extend" name="Deprecated-Functions:Hash:extend">Hash Method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-append" alt="Object.append">Object.append</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:combine" name="Deprecated-Functions:Hash:combine">Hash Method: combine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-merge" alt="Object.merge">Object.merge</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:erase" name="Deprecated-Functions:Hash:erase">Hash Method: erase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <code>delete myObject.a</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:get" name="Deprecated-Functions:Hash:get">Hash Method: get </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <code>myObject.myKey</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:set" name="Deprecated-Functions:Hash:set">Hash Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <code>myObject.myKey = value</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:empty" name="Deprecated-Functions:Hash:empty">Hash Method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <code>myObject = {}</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:include" name="Deprecated-Functions:Hash:include">Hash Method: include </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <code>if(myObject.myKey == undefined) myObject.myKey = value</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:map" name="Deprecated-Functions:Hash:map">Hash Method: map </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-map" alt="Object.map">Object.map</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:filter" name="Deprecated-Functions:Hash:filter">Hash Method: filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-filter" alt="Object.filter">Object.filter</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:every" name="Deprecated-Functions:Hash:every">Hash Method: every </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-every" alt="Object.every">Object.every</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:some" name="Deprecated-Functions:Hash:some">Hash Method: some </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-some" alt="Object.some">Object.some</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:getKeys" name="Deprecated-Functions:Hash:getKeys">Hash Method: getKeys </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-keys" alt="Object.keys">Object.keys</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:getValues" name="Deprecated-Functions:Hash:getValues">Hash Method: getValues </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-values" alt="Object.values">Object.values</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:toQueryString" name="Deprecated-Functions:Hash:toQueryString">Hash Method: toQueryString </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Use <a href="#Object:Object-toQueryString" alt="Object.toQueryString">Object.toQueryString</a></p>
+R*****<div class="heading clearfix"><h1><a href="#Object" name="Object">Type: Object </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A collection of Object functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object" alt="MDN Object">MDN Object</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#Object:Object-each" name="Object:Object-each">Function: Object.each </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Used to iterate through an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Object.each(obj, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>obj        - (<em>object</em>) The object to iterate through.</li>
<li>fn       - (<em>function</em>) The function to test for each element.</li>
<li>bind     - (<em>object</em>, optional) The object to use as &#39;this&#39; within the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(item, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>item   - (<em>mixed</em>) The current item in the array.</li>
<li>key  - (<em>mixed</em>) The current item&#39;s key.</li>
<li>object - (<em>mixed</em>) The actual array/object.</li>
</ol>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="comment">// alerts 'The first day of the week is Sunday', 'The second day of the week is Monday', etc.:</span>
Object.each({first: <span class="string">'Sunday'</span>, second: <span class="string">'Monday'</span>, third: <span class="string">'Tuesday'</span>}, <span class="keyword">function</span>(value, key){
    alert(<span class="string">'The '</span> + key + <span class="string">' day of the week is '</span> + value);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This method is an object-specific equivalent of <em>$each</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Object:Object-merge" name="Object:Object-merge">Function: Object.merge </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Merges any number of objects recursively without referencing them or their sub-objects.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> merged = Object.merge(obj1, obj2[, obj3[, ...]]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>(objects) Any number of objects.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The object that is created as a result of merging all the objects passed in.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> obj1 = {a: <span class="number">0</span>, b: <span class="number">1</span>};
<span class="keyword">var</span> obj2 = {c: <span class="number">2</span>, d: <span class="number">3</span>};
<span class="keyword">var</span> obj3 = {a: <span class="number">4</span>, d: <span class="number">5</span>};
<span class="keyword">var</span> merged = Object.merge(obj1, obj2, obj3); <span class="comment">// returns {a: 4, b: 1, c: 2, d: 5}, (obj2, and obj3 are unaltered)</span>

merged === obj1; <span class="comment">// true, obj1 gets altered and returned as merged object</span>

<span class="keyword">var</span> nestedObj1 = {a: {b: <span class="number">1</span>, c: <span class="number">1</span>}};
<span class="keyword">var</span> nestedObj2 = {a: {b: <span class="number">2</span>}};
<span class="keyword">var</span> nested = Object.merge(nestedObj1, nestedObj2); <span class="comment">// returns: {a: {b: 2, c: 1}}</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-clone" name="Object:Object-clone">Function: Object.clone </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns a copy of an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> clone = Object.clone(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>(obj) The object to clone</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) A copy of the passed object</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript"><span class="keyword">var</span> obj1 = {a: <span class="number">0</span>, b: <span class="number">1</span>};
<span class="keyword">var</span> obj2 = Object.clone(obj1);

obj1.a = <span class="number">42</span>;
alert(obj1.a);    <span class="comment">// alerts '42'</span>
alert(obj2.a);    <span class="comment">// alerts '0'</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This is an object-specific equivalent of <em>$unlink</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Object:Object-append" name="Object:Object-append">Function: Object.append </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Copies all the properties from the second object passed in to the first object passed in.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Object.append(original, extension);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>original  - (<em>object</em>) The object to be extended.</li>
<li>extension - (<em>object</em>) The object whose properties will be copied to original.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The first object passed in, extended.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> firstObj = {
    name: <span class="string">'John'</span>,
    lastName: <span class="string">'Doe'</span>
};
<span class="keyword">var</span> secondObj = {
    age: <span class="string">'20'</span>,
    sex: <span class="string">'male'</span>,
    lastName: <span class="string">'Dorian'</span>
};
Object.append(firstObj, secondObj);
<span class="comment">//firstObj is now: {name: 'John', lastName: 'Dorian', age: '20', sex: 'male'};</span></code></pre><div class="heading clearfix"><h3>Notes:</h3></div><p>This method is an object-specific equivalent of <em>$extend</em> from MooTools 1.2.</p>
<div class="heading clearfix"><h2><a href="#Object:Object-subset" name="Object:Object-subset">Function: Object.subset </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Get a subset of an object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">Object.subset(object, keys);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
<li>keys - (<em>array</em>) An array with the keys.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The subset of the Object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> object = {
    a: <span class="string">'one'</span>,
    b: <span class="string">'two'</span>,
    c: <span class="string">'three'</span>
};
Object.subset(object, [<span class="string">'a'</span>, <span class="string">'c'</span>]); <span class="comment">// returns {a: 'one', c: 'three'}</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-map" name="Object:Object-map">Function: Object.map </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates a new map with the results of calling a provided function on every value in the map.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> mappedObject = Object.map(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to produce an element of the Object from an element of the current one.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The new mapped object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>};
<span class="keyword">var</span> timesTwo = Object.map(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value * <span class="number">2</span>;
}); <span class="comment">// timesTwo now holds an object containing: {a: 2, b: 4, c: 6};</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-filter" name="Object:Object-filter">Function: Object.filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Creates a new object with all of the elements of the object for which the provided filtering function returns true.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> filteredObject = Object.filter(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to test each element of the Object. This function is passed the value and its key in the Object.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The new filtered object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">10</span>, b: <span class="number">20</span>, c: <span class="number">30</span>};
<span class="keyword">var</span> biggerThanTwenty = Object.filter(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value &gt; <span class="number">20</span>;
}); <span class="comment">// biggerThanTwenty now holds an object containing: {c: 30}</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-every" name="Object:Object-every">Function: Object.every </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns true if every value in the object satisfies the provided testing function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> allPassed = Object.every(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to test each element of the Object. This function is passed the value and its key in the Object.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object  - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) If every value in the Object satisfies the provided testing function, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">10</span>, b: <span class="number">4</span>, c: <span class="number">25</span>, d: <span class="number">100</span>};
<span class="keyword">var</span> areAllBigEnough = Object.every(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value &gt; <span class="number">20</span>;
}); <span class="comment">// areAllBigEnough = false</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-some" name="Object:Object-some">Function: Object.some </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns true if at least one value in the object satisfies the provided testing function.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> anyPassed = Object.some(object, fn[, bind]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
<li>fn   - (<em>function</em>) The function to test each element of the object. This function is passed the value and its key in the object.</li>
<li>bind - (<em>object</em>, optional) The object to use as &#39;this&#39; in the function. For more information see <a href="/core/docs/1.5.1/Types/Function#Function:bind" alt="Function:bind">Function:bind</a>.</li>
</ol>
<div class="heading clearfix"><h4>Argument: fn</h4></div><div class="heading clearfix"><h5>Syntax:</h5></div><pre><code class="javascript">fn(value, key, object)</code></pre><div class="heading clearfix"><h5>Arguments:</h5></div><ol>
<li>value - (<em>mixed</em>) The current value in the object.</li>
<li>key   - (<em>string</em>) The current value&#39;s key in the object.</li>
<li>object  - (<em>object</em>) The actual object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) If any value in the object satisfies the provided testing function, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="number">10</span>, b: <span class="number">4</span>, c: <span class="number">25</span>, d: <span class="number">100</span>};
<span class="keyword">var</span> areAnyBigEnough = Object.some(myObject, <span class="keyword">function</span>(value, key){
    <span class="keyword">return</span> value &gt; <span class="number">20</span>;
}); <span class="comment">//isAnyBigEnough = true</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-keys" name="Object:Object-keys">Function: Object.keys </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns an array containing all the keys, in the same order as the values returned by <a href="#Object:values" alt="Object:values">Object:values</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> keys = Object.keys(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) An array containing all the keys of the object.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Object:Object-values" name="Object:Object-values">Function: Object.values </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns an array containing all the values, in the same order as the keys returned by <a href="#Object:keys" alt="Object:keys">Object:keys</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> values = Object.values(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>array</em>) An array containing all the values of the object.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Object:Object-getLength" name="Object:Object-getLength">Function: Object.getLength </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the number of keys in the object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> length = Object.getLength(object);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The length of the object.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {
    name: <span class="string">'John'</span>,
    lastName: <span class="string">'Doe'</span>
});
Object.getLength(myObject); <span class="comment">// returns 2</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-keyOf" name="Object:Object-keyOf">Function: Object.keyOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the key of the specified value. Synonymous with <a href="/core/docs/1.5.1/Types/Array#Array:indexOf" alt="Array:indexOf">Array:indexOf</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> key = Object.keyOf(object, item);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
<li>item - (<em>mixed</em>) The item to search for in the object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) If the object has a the specified item in it, returns the key of that item.</li>
<li>(<em>boolean</em>) Otherwise, returns null.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="string">'one'</span>, b: <span class="string">'two'</span>, c: <span class="number">3</span>};
Object.keyOf(myObject, <span class="string">'two'</span>); <span class="comment">// returns 'b'</span>
Object.keyOf(myObject, <span class="number">3</span>); <span class="comment">// returns 'c'</span>
Object.keyOf(myObject, <span class="string">'four'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-contains" name="Object:Object-contains">Function: Object.contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Tests for the presence of a specified value in the object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> inObject = Object.contains(object, value);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object.</li>
<li>value - (<em>mixed</em>) The value to search for in the Object.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) If the object has the passed in value in any of the keys, returns true. Otherwise, returns false.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = {a: <span class="string">'one'</span>, b: <span class="string">'two'</span>, c: <span class="string">'three'</span>};
Object.contains(myObject, <span class="string">'one'</span>); <span class="comment">// returns true</span>
Object.contains(myObject, <span class="string">'four'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h2><a href="#Object:Object-toQueryString" name="Object:Object-toQueryString">Function: Object.toQueryString </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Generates a query string from key/value pairs in an object and URI encodes the values.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> queryString = Object.toQueryString(object[, base]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>object</em>) The object to generate the query string from.</li>
<li>base - (<em>string</em>, optional) Will be used as base variable in the query string.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The query string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript">Object.toQueryString({apple: <span class="string">'red'</span>, lemon: <span class="string">'yellow'</span>}); <span class="comment">// returns 'apple=red&amp;lemon=yellow'</span>

Object.toQueryString({apple: <span class="string">'red'</span>, lemon: <span class="string">'yellow'</span>}, <span class="string">'fruits'</span>); <span class="comment">// returns 'fruits[apple]=red&amp;fruits[lemon]=yellow'</span></code></pre><div class="heading clearfix"><h1><a href="#Deprecated-Functions" name="Deprecated-Functions">Deprecated Functions </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash" name="Deprecated-Functions:Hash">Type: Hash </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Hash has been deprecated. Each Hash method has a similar Object method or a Vanilla JS equivalent.</p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:has" name="Deprecated-Functions:Hash:has">Hash Method: has </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>You could simply use <code>myObject.myKey != undefined</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:keyOf" name="Deprecated-Functions:Hash:keyOf">Hash Method: keyOf </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-keyOf" alt="Object.keyOf">Object.keyOf</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:hasValue" name="Deprecated-Functions:Hash:hasValue">Hash Method: hasValue </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-contains" alt="Object.contains">Object.contains</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:extend" name="Deprecated-Functions:Hash:extend">Hash Method: extend </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-append" alt="Object.append">Object.append</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:combine" name="Deprecated-Functions:Hash:combine">Hash Method: combine </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-merge" alt="Object.merge">Object.merge</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:erase" name="Deprecated-Functions:Hash:erase">Hash Method: erase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <code>delete myObject.a</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:get" name="Deprecated-Functions:Hash:get">Hash Method: get </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <code>myObject.myKey</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:set" name="Deprecated-Functions:Hash:set">Hash Method: set </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <code>myObject.myKey = value</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:empty" name="Deprecated-Functions:Hash:empty">Hash Method: empty </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <code>myObject = {}</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:include" name="Deprecated-Functions:Hash:include">Hash Method: include </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <code>if(myObject.myKey == undefined) myObject.myKey = value</code></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:map" name="Deprecated-Functions:Hash:map">Hash Method: map </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-map" alt="Object.map">Object.map</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:filter" name="Deprecated-Functions:Hash:filter">Hash Method: filter </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-filter" alt="Object.filter">Object.filter</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:every" name="Deprecated-Functions:Hash:every">Hash Method: every </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-every" alt="Object.every">Object.every</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:some" name="Deprecated-Functions:Hash:some">Hash Method: some </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-some" alt="Object.some">Object.some</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:getKeys" name="Deprecated-Functions:Hash:getKeys">Hash Method: getKeys </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-keys" alt="Object.keys">Object.keys</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:getValues" name="Deprecated-Functions:Hash:getValues">Hash Method: getValues </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-values" alt="Object.values">Object.values</a></p>
<div class="heading clearfix"><h2><a href="#Deprecated-Functions:Hash:toQueryString" name="Deprecated-Functions:Hash:toQueryString">Hash Method: toQueryString </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Use <a href="#Object:Object-toQueryString" alt="Object.toQueryString">Object.toQueryString</a></p>
+M-----+++++<div class="heading clearfix"><h1><a href="#String" name="String">Type: String </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>A collection of the String Object methods and functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String" alt="MDN String">MDN String</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:String-from" name="String:String-from">Function: String.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Returns the passed parameter as a String.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">String.from(arg);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>arg - (<em>mixed</em>) The argument to return as a string.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The argument as a string.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">String.from(<span class="number">2</span>); <span class="comment">// returns '2'</span>
String.from(<span class="literal">true</span>); <span class="comment">// returns 'true'</span></code></pre><div class="heading clearfix"><h2><a href="#String:String-uniqueID" name="String:String-uniqueID">Function: String.uniqueID </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Generates a unique ID</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">String.uniqueID();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A unique ID.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">String.uniqueID();</code></pre><div class="heading clearfix"><h2><a href="#String:test" name="String:test">String method: test </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Searches for a match between the string and a regular expression.
For more information see <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/RegExp/test" alt="MDN Regexp:test">MDN Regexp:test</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.test(regex[, params]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>regex  - (<em>mixed</em>) The string or regular expression you want to match the string with.</li>
<li>params - (<em>string</em>, optional) If first parameter is a string, any parameters you want to pass to the regular expression (&#39;g&#39; has no effect).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) <code>true</code>, if a match for the regular expression is found in this string.</li>
<li>(<em>boolean</em>) <code>false</code> if is not found</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'I like cookies'</span>.test(<span class="string">'cookie'</span>); <span class="comment">// returns true</span>
<span class="string">'I like cookies'</span>.test(<span class="string">'COOKIE'</span>, <span class="string">'i'</span>); <span class="comment">// returns true (ignore case)</span>
<span class="string">'I like cookies'</span>.test(<span class="string">'cake'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Regular_Expressions" alt="MDN Regular Expressions">MDN Regular Expressions</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:contains" name="String:contains">String method: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Checks to see if the string passed in is contained in this string.
If the position parameter is passed, it will only check for the string from that point.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.contains(string[, position]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>string    - (<em>string</em>) The string to search for.</li>
<li>position - (<em>number</em>, optional) Position in the string to begin searching for <code>string</code>, defaults to <code>0</code>.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>boolean</em>) <code>true</code> if the string is contained in this string</li>
<li>(<em>boolean</em>) <code>false</code> if not.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'a bc'</span>.contains(<span class="string">'bc'</span>); <span class="comment">// returns true</span>
<span class="string">'abc'</span>.contains(<span class="string">'b'</span>, <span class="number">1</span>); <span class="comment">// returns true</span>
<span class="string">'abc'</span>.contains(<span class="string">'b'</span>, <span class="number">2</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/indexOf" alt="MDN String:indexOf">MDN String:indexOf</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/contains" alt="MDN String:contains">MDN String:contains</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div>
<p>Since MooTools 1.5 the second parameter changed from <code>separator</code> to <code>position</code> so it conforms the ES6 specification.
If using the 1.4 compatibility layer, this method will be overwritten to have the old behavior.</p>
<div class="heading clearfix"><h2><a href="#String:trim" name="String:trim">String method: trim </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Trims the leading and trailing spaces off a string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.trim();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The trimmed string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'    i like cookies     '</span>.trim(); <span class="comment">// returns 'i like cookies'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/trim" alt="MDN String:trim">MDN String:trim</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:clean" name="String:clean">String method: clean </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes all extraneous whitespace from a string and trims it (<a href="#String:trim" alt="String:trim">String:trim</a>).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.clean();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The cleaned string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">' i      like     cookies      \n\n'</span>.clean(); <span class="comment">// returns 'i like cookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:camelCase" name="String:camelCase">String method: camelCase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts a hyphenated string to a camelcased string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.camelCase();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The camelcased string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'I-like-cookies'</span>.camelCase(); <span class="comment">// returns 'ILikeCookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:hyphenate" name="String:hyphenate">String method: hyphenate </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts a camelcased string to a hyphenated string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.hyphenate();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The hyphenated string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'ILikeCookies'</span>.hyphenate(); <span class="comment">// returns '-i-like-cookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:capitalize" name="String:capitalize">String method: capitalize </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts the first letter of each word in a string to uppercase.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.capitalize();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The capitalized string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'i like cookies'</span>.capitalize(); <span class="comment">// returns 'I Like Cookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:escapeRegExp" name="String:escapeRegExp">String method: escapeRegExp </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Escapes all regular expression characters from the string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.escapeRegExp();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) The escaped string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'animals.sheep[1]'</span>.escapeRegExp(); <span class="comment">// returns 'animals\.sheep\[1\]'</span></code></pre><div class="heading clearfix"><h2><a href="#String:toInt" name="String:toInt">String method: toInt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Parses this string and returns a number of the specified radix or base.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.toInt([base]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>base - (<em>number</em>, optional) The base to use (defaults to 10).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The number.</li>
<li>(<em>NaN</em>) If the string is not numeric, returns NaN.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'4em'</span>.toInt(); <span class="comment">// returns 4</span>
<span class="string">'10px'</span>.toInt(); <span class="comment">// returns 10</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Functions/parseInt" alt="MDN parseInt">MDN parseInt</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:toFloat" name="String:toFloat">String method: toFloat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Parses this string and returns a floating point number.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.toFloat();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>number</em>) The float.</li>
<li>(<em>NaN</em>) If the string is not numeric, returns NaN.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'95.25%'</span>.toFloat(); <span class="comment">// returns 95.25</span>
    <span class="string">'10.848'</span>.toFloat(); <span class="comment">// returns 10.848</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Functions/parseFloat" alt="MDN parseFloat">MDN parseFloat</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:hexToRgb" name="String:hexToRgb">String method: hexToRgb </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts a hexadecimal color value to RGB. Input string must be in one of the following hexadecimal color formats (with or without the hash).
&#39;#ffffff&#39;, #fff&#39;, &#39;ffffff&#39;, or &#39;fff&#39;</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.hexToRgb([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [255, 51, 0]) instead of a string (e.g. &#39;rgb(255, 51, 0)&#39;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A string representing the color in RGB.</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'#123'</span>.hexToRgb(); <span class="comment">// returns 'rgb(17, 34, 51)'</span>
<span class="string">'112233'</span>.hexToRgb(); <span class="comment">// returns 'rgb(17, 34, 51)'</span>
<span class="string">'#112233'</span>.hexToRgb(<span class="literal">true</span>); <span class="comment">// returns [17, 34, 51]</span></code></pre><div class="heading clearfix"><h2><a href="#String:rgbToHex" name="String:rgbToHex">String method: rgbToHex </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts an RGB color value to hexadecimal. Input string must be in one of the following RGB color formats.
&#39;rgb(255, 255, 255)&#39;, or &#39;rgba(255, 255, 255, 1)&#39;</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.rgbToHex([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [&#39;ff&#39;, &#39;33&#39;, &#39;00&#39;]) instead of a string (e.g. &#39;#ff3300&#39;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A string representing the color in hexadecimal, or transparent if the fourth value of rgba in the input string is 0.</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'rgb(17, 34, 51)'</span>.rgbToHex(); <span class="comment">// returns '#112233'</span>
<span class="string">'rgb(17, 34, 51)'</span>.rgbToHex(<span class="literal">true</span>); <span class="comment">// returns ['11', '22', '33']</span>
<span class="string">'rgba(17, 34, 51, 0)'</span>.rgbToHex(); <span class="comment">// returns 'transparent'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="/core/docs/1.5.1/Types/Array#Array:rgbToHex" alt="Array:rgbToHex">Array:rgbToHex</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:substitute" name="String:substitute">String method: substitute </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Substitutes keywords in a string using an object/array.
Removes undefined keywords and ignores escaped keywords.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.substitute(object[, regexp]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>object - (<em>mixed</em>) The key/value pairs used to substitute a string.</li>
<li>regexp - (<em>regexp</em>, optional) The regexp pattern to be used in the string keywords, with global flag. Defaults to /\?{([^}]+)}/g .</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) - The substituted string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myString = <span class="string">'{subject} is {property_1} and {property_2}.'</span>;
<span class="keyword">var</span> myObject = {subject: <span class="string">'Jack Bauer'</span>, property_1: <span class="string">'our lord'</span>, property_2: <span class="string">'saviour'</span>};
myString.substitute(myObject); <span class="comment">// returns Jack Bauer is our lord and saviour</span></code></pre><div class="heading clearfix"><h2><a href="#String:stripScripts" name="String:stripScripts">String method: stripScripts </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Strips the String of its <em><script></em> tags and anything in between them.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.stripScripts([evaluate]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>evaluate - (<em>boolean</em>, optional) If true is passed, the scripts within the String will be evaluated.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) - The String without the stripped scripts.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myString = <span class="string">"&lt;script&gt;alert('Hello')&lt;/script&gt;Hello, World."</span>;
myString.stripScripts(); <span class="comment">// returns 'Hello, World.'</span>
myString.stripScripts(<span class="literal">true</span>); <span class="comment">// alerts 'Hello', then returns 'Hello, World.'</span></code></pre>+R*****<div class="heading clearfix"><h1><a href="#String" name="String">Type: String </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>A collection of the String Object methods and functions.</p>
<div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String" alt="MDN String">MDN String</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:String-from" name="String:String-from">Function: String.from </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Returns the passed parameter as a String.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">String.from(arg);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>arg - (<em>mixed</em>) The argument to return as a string.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The argument as a string.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">String.from(<span class="number">2</span>); <span class="comment">// returns '2'</span>
String.from(<span class="literal">true</span>); <span class="comment">// returns 'true'</span></code></pre><div class="heading clearfix"><h2><a href="#String:String-uniqueID" name="String:String-uniqueID">Function: String.uniqueID </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Generates a unique ID</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">String.uniqueID();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A unique ID.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">String.uniqueID();</code></pre><div class="heading clearfix"><h2><a href="#String:test" name="String:test">String method: test </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Searches for a match between the string and a regular expression.
For more information see <a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/RegExp/test" alt="MDN Regexp:test">MDN Regexp:test</a>.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.test(regex[, params]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>regex  - (<em>mixed</em>) The string or regular expression you want to match the string with.</li>
<li>params - (<em>string</em>, optional) If first parameter is a string, any parameters you want to pass to the regular expression (&#39;g&#39; has no effect).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) <code>true</code>, if a match for the regular expression is found in this string.</li>
<li>(<em>boolean</em>) <code>false</code> if is not found</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'I like cookies'</span>.test(<span class="string">'cookie'</span>); <span class="comment">// returns true</span>
<span class="string">'I like cookies'</span>.test(<span class="string">'COOKIE'</span>, <span class="string">'i'</span>); <span class="comment">// returns true (ignore case)</span>
<span class="string">'I like cookies'</span>.test(<span class="string">'cake'</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Regular_Expressions" alt="MDN Regular Expressions">MDN Regular Expressions</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:contains" name="String:contains">String method: contains </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Checks to see if the string passed in is contained in this string.
If the position parameter is passed, it will only check for the string from that point.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.contains(string[, position]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>string    - (<em>string</em>) The string to search for.</li>
<li>position - (<em>number</em>, optional) Position in the string to begin searching for <code>string</code>, defaults to <code>0</code>.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>boolean</em>) <code>true</code> if the string is contained in this string</li>
<li>(<em>boolean</em>) <code>false</code> if not.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'a bc'</span>.contains(<span class="string">'bc'</span>); <span class="comment">// returns true</span>
<span class="string">'abc'</span>.contains(<span class="string">'b'</span>, <span class="number">1</span>); <span class="comment">// returns true</span>
<span class="string">'abc'</span>.contains(<span class="string">'b'</span>, <span class="number">2</span>); <span class="comment">// returns false</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/indexOf" alt="MDN String:indexOf">MDN String:indexOf</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/contains" alt="MDN String:contains">MDN String:contains</a></li>
</ul>
<div class="heading clearfix"><h3>Note:</h3></div><p>Since MooTools 1.5 the second parameter changed from <code>separator</code> to <code>position</code> so it conforms the ES6 specification.
If using the 1.4 compatibility layer, this method will be overwritten to have the old behavior.</p>
<div class="heading clearfix"><h2><a href="#String:trim" name="String:trim">String method: trim </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Trims the leading and trailing spaces off a string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.trim();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The trimmed string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'    i like cookies     '</span>.trim(); <span class="comment">// returns 'i like cookies'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/trim" alt="MDN String:trim">MDN String:trim</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:clean" name="String:clean">String method: clean </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes all extraneous whitespace from a string and trims it (<a href="#String:trim" alt="String:trim">String:trim</a>).</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.clean();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The cleaned string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">' i      like     cookies      \n\n'</span>.clean(); <span class="comment">// returns 'i like cookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:camelCase" name="String:camelCase">String method: camelCase </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts a hyphenated string to a camelcased string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.camelCase();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The camelcased string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'I-like-cookies'</span>.camelCase(); <span class="comment">// returns 'ILikeCookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:hyphenate" name="String:hyphenate">String method: hyphenate </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts a camelcased string to a hyphenated string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.hyphenate();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The hyphenated string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'ILikeCookies'</span>.hyphenate(); <span class="comment">// returns '-i-like-cookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:capitalize" name="String:capitalize">String method: capitalize </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts the first letter of each word in a string to uppercase.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.capitalize();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The capitalized string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'i like cookies'</span>.capitalize(); <span class="comment">// returns 'I Like Cookies'</span></code></pre><div class="heading clearfix"><h2><a href="#String:escapeRegExp" name="String:escapeRegExp">String method: escapeRegExp </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Escapes all regular expression characters from the string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.escapeRegExp();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) The escaped string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'animals.sheep[1]'</span>.escapeRegExp(); <span class="comment">// returns 'animals\.sheep\[1\]'</span></code></pre><div class="heading clearfix"><h2><a href="#String:toInt" name="String:toInt">String method: toInt </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Parses this string and returns a number of the specified radix or base.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.toInt([base]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>base - (<em>number</em>, optional) The base to use (defaults to 10).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The number.</li>
<li>(<em>NaN</em>) If the string is not numeric, returns NaN.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'4em'</span>.toInt(); <span class="comment">// returns 4</span>
<span class="string">'10px'</span>.toInt(); <span class="comment">// returns 10</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Functions/parseInt" alt="MDN parseInt">MDN parseInt</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:toFloat" name="String:toFloat">String method: toFloat </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Parses this string and returns a floating point number.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.toFloat();</code></pre><div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>number</em>) The float.</li>
<li>(<em>NaN</em>) If the string is not numeric, returns NaN.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'95.25%'</span>.toFloat(); <span class="comment">// returns 95.25</span>
    <span class="string">'10.848'</span>.toFloat(); <span class="comment">// returns 10.848</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Functions/parseFloat" alt="MDN parseFloat">MDN parseFloat</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:hexToRgb" name="String:hexToRgb">String method: hexToRgb </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts a hexadecimal color value to RGB. Input string must be in one of the following hexadecimal color formats (with or without the hash).
&#39;#ffffff&#39;, #fff&#39;, &#39;ffffff&#39;, or &#39;fff&#39;</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.hexToRgb([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [255, 51, 0]) instead of a string (e.g. &#39;rgb(255, 51, 0)&#39;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A string representing the color in RGB.</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'#123'</span>.hexToRgb(); <span class="comment">// returns 'rgb(17, 34, 51)'</span>
<span class="string">'112233'</span>.hexToRgb(); <span class="comment">// returns 'rgb(17, 34, 51)'</span>
<span class="string">'#112233'</span>.hexToRgb(<span class="literal">true</span>); <span class="comment">// returns [17, 34, 51]</span></code></pre><div class="heading clearfix"><h2><a href="#String:rgbToHex" name="String:rgbToHex">String method: rgbToHex </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts an RGB color value to hexadecimal. Input string must be in one of the following RGB color formats.
&#39;rgb(255, 255, 255)&#39;, or &#39;rgba(255, 255, 255, 1)&#39;</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.rgbToHex([array]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>array - (<em>boolean</em>, optional) If true is passed, will output an array (e.g. [&#39;ff&#39;, &#39;33&#39;, &#39;00&#39;]) instead of a string (e.g. &#39;#ff3300&#39;).</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A string representing the color in hexadecimal, or transparent if the fourth value of rgba in the input string is 0.</li>
<li>(<em>array</em>) If the array flag is set, an array will be returned instead.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="string">'rgb(17, 34, 51)'</span>.rgbToHex(); <span class="comment">// returns '#112233'</span>
<span class="string">'rgb(17, 34, 51)'</span>.rgbToHex(<span class="literal">true</span>); <span class="comment">// returns ['11', '22', '33']</span>
<span class="string">'rgba(17, 34, 51, 0)'</span>.rgbToHex(); <span class="comment">// returns 'transparent'</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="/core/docs/1.5.1/Types/Array#Array:rgbToHex" alt="Array:rgbToHex">Array:rgbToHex</a></li>
</ul>
<div class="heading clearfix"><h2><a href="#String:substitute" name="String:substitute">String method: substitute </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Substitutes keywords in a string using an object/array.
Removes undefined keywords and ignores escaped keywords.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.substitute(object[, regexp]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>object - (<em>mixed</em>) The key/value pairs used to substitute a string.</li>
<li>regexp - (<em>regexp</em>, optional) The regexp pattern to be used in the string keywords, with global flag. Defaults to /\?{([^}]+)}/g .</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) - The substituted string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myString = <span class="string">'{subject} is {property_1} and {property_2}.'</span>;
<span class="keyword">var</span> myObject = {subject: <span class="string">'Jack Bauer'</span>, property_1: <span class="string">'our lord'</span>, property_2: <span class="string">'saviour'</span>};
myString.substitute(myObject); <span class="comment">// returns Jack Bauer is our lord and saviour</span></code></pre><div class="heading clearfix"><h2><a href="#String:stripScripts" name="String:stripScripts">String method: stripScripts </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Strips the String of its <em><script></em> tags and anything in between them.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript">myString.stripScripts([evaluate]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>evaluate - (<em>boolean</em>, optional) If true is passed, the scripts within the String will be evaluated.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) - The String without the stripped scripts.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myString = <span class="string">"&lt;script&gt;alert('Hello')&lt;/script&gt;Hello, World."</span>;
myString.stripScripts(); <span class="comment">// returns 'Hello, World.'</span>
myString.stripScripts(<span class="literal">true</span>); <span class="comment">// alerts 'Hello', then returns 'Hello, World.'</span></code></pre>+M-----+++++<div class="heading clearfix"><h1><a href="#Cookie" name="Cookie">Object: Cookie </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Reads and writes a cookie.</p>
<div class="heading clearfix"><h2><a href="#Cookie-options" name="Cookie-options">Options: </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<ul>
<li>domain   - (<em>string</em>: defaults to false) The domain the cookie belongs to.</li>
<li>path     - (<em>string</em>: defaults to &#39;/&#39;) The path the cookie belongs to.</li>
<li>duration - (<em>number</em>: defaults to false) The duration of the cookie (in days) before it expires. If set to false or 0, the cookie will be a session cookie that expires when the browser is closed.</li>
<li>secure   - (<em>boolean</em>: defaults to false) Stored cookie information can be accessed only from a secure environment.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Cookie:write" name="Cookie:write">Cookie Method: write </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Writes a cookie in the browser.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(key, value[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>key     - (<em>string</em>) The key (or name) of the cookie.</li>
<li>value   - (<em>string</em>) The value to set. Cannot contain semicolons.</li>
<li>options - (<em>mixed</em>, optional) See <a href="#Cookie" alt="Cookie">Cookie</a>.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) An object with the options, the key and the value. You can give it as first parameter to <a href="#Cookie:dispose" alt="Cookie.dispose">Cookie.dispose</a>.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div>
<p>Saves the cookie for the duration of the session:</p>
<pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(<span class="string">'username'</span>, <span class="string">'JackBauer'</span>);</code></pre>
<p>Saves the cookie for a day:</p>
<pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(<span class="string">'username'</span>, <span class="string">'JackBauer'</span>, {duration: <span class="number">1</span>});</code></pre><div class="heading clearfix"><h3>Note:</h3></div>
<p>In order to share the cookie with pages located in a different path, the <a href="#Cookie-options" alt="Cookie.options.domain">Cookie.options.domain</a> value must be set.</p>
<div class="heading clearfix"><h2><a href="#Cookie:read" name="Cookie:read">Cookie Method: read </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Reads the value of a cookie.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.read(name);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>name - (<em>string</em>) The name of the cookie to read.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>mixed</em>) The cookie string value, or null if not found.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Cookie.read(<span class="string">'username'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Cookie:dispose" name="Cookie:dispose">Cookie Method: dispose </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Removes a cookie from the browser.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> oldCookie = Cookie.dispose(name[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>name - (<em>string</em>) The name of the cookie to remove or a previously saved Cookie instance.</li>
<li>options - (<em>object</em>, optional) See <a href="#Cookie" alt="Cookie">Cookie</a>.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div>
<p>Remove a Cookie:</p>
<pre><code class="javascript">Cookie.dispose(<span class="string">'username'</span>); <span class="comment">// Bye-bye JackBauer!</span></code></pre>
<p>Creating a cookie and removing it right away:</p>
<pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(<span class="string">'username'</span>, <span class="string">'JackBauer'</span>, {domain: <span class="string">'mootools.net'</span>});
<span class="keyword">if</span> (Cookie.read(<span class="string">'username'</span>) == <span class="string">'JackBauer'</span>) { myCookie.dispose(); }</code></pre><div class="heading clearfix"><h3>Credits:</h3></div>
<ul>
<li>Based on the functions by Peter-Paul Koch of <a href="http://www.quirksmode.org" alt="QuirksMode">QuirksMode</a>.</li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#Cookie" name="Cookie">Object: Cookie </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Reads and writes a cookie.</p>
<div class="heading clearfix"><h2><a href="#Cookie-options" name="Cookie-options">Options: </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><ul>
<li>domain   - (<em>string</em>: defaults to false) The domain the cookie belongs to.</li>
<li>path     - (<em>string</em>: defaults to &#39;/&#39;) The path the cookie belongs to.</li>
<li>duration - (<em>number</em>: defaults to false) The duration of the cookie (in days) before it expires. If set to false or 0, the cookie will be a session cookie that expires when the browser is closed.</li>
<li>secure   - (<em>boolean</em>: defaults to false) Stored cookie information can be accessed only from a secure environment.</li>
</ul>
<div class="heading clearfix"><h2><a href="#Cookie:write" name="Cookie:write">Cookie Method: write </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Writes a cookie in the browser.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(key, value[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>key     - (<em>string</em>) The key (or name) of the cookie.</li>
<li>value   - (<em>string</em>) The value to set. Cannot contain semicolons.</li>
<li>options - (<em>mixed</em>, optional) See <a href="#Cookie" alt="Cookie">Cookie</a>.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) An object with the options, the key and the value. You can give it as first parameter to <a href="#Cookie:dispose" alt="Cookie.dispose">Cookie.dispose</a>.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><p>Saves the cookie for the duration of the session:</p>
<pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(<span class="string">'username'</span>, <span class="string">'JackBauer'</span>);</code></pre><p>Saves the cookie for a day:</p>
<pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(<span class="string">'username'</span>, <span class="string">'JackBauer'</span>, {duration: <span class="number">1</span>});</code></pre><div class="heading clearfix"><h3>Note:</h3></div><p>In order to share the cookie with pages located in a different path, the <a href="#Cookie-options" alt="Cookie.options.domain">Cookie.options.domain</a> value must be set.</p>
<div class="heading clearfix"><h2><a href="#Cookie:read" name="Cookie:read">Cookie Method: read </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Reads the value of a cookie.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.read(name);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>name - (<em>string</em>) The name of the cookie to read.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>mixed</em>) The cookie string value, or null if not found.</li>
</ul>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">Cookie.read(<span class="string">'username'</span>);</code></pre><div class="heading clearfix"><h2><a href="#Cookie:dispose" name="Cookie:dispose">Cookie Method: dispose </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Removes a cookie from the browser.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> oldCookie = Cookie.dispose(name[, options]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>name - (<em>string</em>) The name of the cookie to remove or a previously saved Cookie instance.</li>
<li>options - (<em>object</em>, optional) See <a href="#Cookie" alt="Cookie">Cookie</a>.</li>
</ol>
<div class="heading clearfix"><h3>Examples:</h3></div><p>Remove a Cookie:</p>
<pre><code class="javascript">Cookie.dispose(<span class="string">'username'</span>); <span class="comment">// Bye-bye JackBauer!</span></code></pre><p>Creating a cookie and removing it right away:</p>
<pre><code class="javascript"><span class="keyword">var</span> myCookie = Cookie.write(<span class="string">'username'</span>, <span class="string">'JackBauer'</span>, {domain: <span class="string">'mootools.net'</span>});
<span class="keyword">if</span> (Cookie.read(<span class="string">'username'</span>) == <span class="string">'JackBauer'</span>) { myCookie.dispose(); }</code></pre><div class="heading clearfix"><h3>Credits:</h3></div><ul>
<li>Based on the functions by Peter-Paul Koch of <a href="http://www.quirksmode.org" alt="QuirksMode">QuirksMode</a>.</li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Window-Event:-domready" name="Window-Event:-domready">Window Event: domready</a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Contains the window <a href="/core/docs/1.5.1/Element/Element.Event" alt="Event">Event</a> &#39;domready&#39;, which executes when the DOM is loaded.</p>

<p>To ensure that DOM elements exist when the code attempts to access them is executed, they need to be placed within the &#39;domready&#39; event.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">window.addEvent(<span class="string">'domready'</span>, <span class="keyword">function</span>() {
    alert(<span class="string">'The DOM is ready!'</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div>
<ul>
<li>This event is only available to the window element.</li>
<li>In some versions of Internet Explorer (ie. IE6) a script tag might be executed twice if the content-type meta-tag declaration is put after a script tag. The content-type should always be declared before any script tags.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div>
<p><a href="/core/docs/1.5.1/Element/Element.Event" alt="Element.Event">Element.Event</a></p>
+R*****<div class="heading clearfix"><h1><a href="#Window-Event:-domready" name="Window-Event:-domready">Window Event: domready</a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>Contains the window <a href="/core/docs/1.5.1/Element/Element.Event" alt="Event">Event</a> &#39;domready&#39;, which executes when the DOM is loaded.</p>
<p>To ensure that DOM elements exist when the code attempts to access them is executed, they need to be placed within the &#39;domready&#39; event.</p>
<div class="heading clearfix"><h3>Example:</h3></div><pre><code class="javascript">window.addEvent(<span class="string">'domready'</span>, <span class="keyword">function</span>() {
    alert(<span class="string">'The DOM is ready!'</span>);
});</code></pre><div class="heading clearfix"><h3>Notes:</h3></div><ul>
<li>This event is only available to the window element.</li>
<li>In some versions of Internet Explorer (ie. IE6) a script tag might be executed twice if the content-type meta-tag declaration is put after a script tag. The content-type should always be declared before any script tags.</li>
</ul>
<div class="heading clearfix"><h3>See Also:</h3></div><p><a href="/core/docs/1.5.1/Element/Element.Event" alt="Element.Event">Element.Event</a></p>
+M-----+++++<div class="heading clearfix"><h1><a href="#JSON" name="JSON">Object: JSON </a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p>JSON decoder and encoder.</p>
<div class="heading clearfix"><h2><a href="#JSON:encode" name="JSON:encode">JSON Method: encode </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts an object or array to a JSON string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myJSON = JSON.encode(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>obj - (<em>object</em>) The object to convert to string.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>string</em>) A JSON string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> fruitsJSON = JSON.encode({apple: <span class="string">'red'</span>, lemon: <span class="string">'yellow'</span>}); <span class="comment">// returns: '{"apple":"red","lemon":"yellow"}'</span></code></pre><div class="heading clearfix"><h2><a href="#JSON:decode" name="JSON:decode">JSON Method: decode </a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p>Converts a JSON string into a JavaScript object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> object = JSON.decode(string[, secure]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div>
<ol>
<li>string - (<em>string</em>) The string to evaluate.</li>
<li>secure - (<em>boolean</em>, optional: defaults to true) If set to true, checks for any hazardous syntax and returns null if any found.</li>
</ol>

<p>There is also a global option <code>JSON.secure</code> (<em>boolean</em>: defaults to true). If the optional <code>secure</code> argument is not defined, the value of <code>JSON.secure</code> will be used.</p>
<div class="heading clearfix"><h3>Returns:</h3></div>
<ul>
<li>(<em>object</em>) The object represented by the JSON string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = JSON.decode(<span class="string">'{"apple":"red","lemon":"yellow"}'</span>); <span class="comment">// returns: {apple: 'red', lemon: 'yellow'}</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div>
<ul>
<li><a href="http://www.json.org/" alt="JSON (JavaScript Object Notation)">JSON (JavaScript Object Notation)</a></li>
</ul>
<div class="heading clearfix"><h3>Credits:</h3></div>
<ul>
<li>JSON test regular expression by <a href="http://crockford.com/" alt="Douglas Crockford">Douglas Crockford</a> and <a href="http://tobielangel.com/" alt="Tobie Langel">Tobie Langel</a>.</li>
</ul>
+R*****<div class="heading clearfix"><h1><a href="#JSON" name="JSON">Object: JSON </a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p>JSON decoder and encoder.</p>
<div class="heading clearfix"><h2><a href="#JSON:encode" name="JSON:encode">JSON Method: encode </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts an object or array to a JSON string.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myJSON = JSON.encode(obj);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>obj - (<em>object</em>) The object to convert to string.</li>
</ol>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>string</em>) A JSON string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> fruitsJSON = JSON.encode({apple: <span class="string">'red'</span>, lemon: <span class="string">'yellow'</span>}); <span class="comment">// returns: '{"apple":"red","lemon":"yellow"}'</span></code></pre><div class="heading clearfix"><h2><a href="#JSON:decode" name="JSON:decode">JSON Method: decode </a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p>Converts a JSON string into a JavaScript object.</p>
<div class="heading clearfix"><h3>Syntax:</h3></div><pre><code class="javascript"><span class="keyword">var</span> object = JSON.decode(string[, secure]);</code></pre><div class="heading clearfix"><h3>Arguments:</h3></div><ol>
<li>string - (<em>string</em>) The string to evaluate.</li>
<li>secure - (<em>boolean</em>, optional: defaults to true) If set to true, checks for any hazardous syntax and returns null if any found.</li>
</ol>
<p>There is also a global option <code>JSON.secure</code> (<em>boolean</em>: defaults to true). If the optional <code>secure</code> argument is not defined, the value of <code>JSON.secure</code> will be used.</p>
<div class="heading clearfix"><h3>Returns:</h3></div><ul>
<li>(<em>object</em>) The object represented by the JSON string.</li>
</ul>
<div class="heading clearfix"><h3>Examples:</h3></div><pre><code class="javascript"><span class="keyword">var</span> myObject = JSON.decode(<span class="string">'{"apple":"red","lemon":"yellow"}'</span>); <span class="comment">// returns: {apple: 'red', lemon: 'yellow'}</span></code></pre><div class="heading clearfix"><h3>See Also:</h3></div><ul>
<li><a href="http://www.json.org/" alt="JSON (JavaScript Object Notation)">JSON (JavaScript Object Notation)</a></li>
</ul>
<div class="heading clearfix"><h3>Credits:</h3></div><ul>
<li>JSON test regular expression by <a href="http://crockford.com/" alt="Douglas Crockford">Douglas Crockford</a> and <a href="http://tobielangel.com/" alt="Tobie Langel">Tobie Langel</a>.</li>
</ul>
+M-----+++++<div class="heading clearfix"><h1><a href="#Attribution-NonCommercial-ShareAlike-3.0" name="Attribution-NonCommercial-ShareAlike-3.0">Attribution-NonCommercial-ShareAlike 3.0</a></h1><a href="#top" class="back-to-top">Back to Top</a></div>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p>
<div class="heading clearfix"><h2><a href="#See-Also" name="See-Also">See Also</a></h2><a href="#top" class="back-to-top">Back to Top</a></div>
<p><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode">http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode</a></p>
+R*****<div class="heading clearfix"><h1><a href="#Attribution-NonCommercial-ShareAlike-3.0" name="Attribution-NonCommercial-ShareAlike-3.0">Attribution-NonCommercial-ShareAlike 3.0</a></h1><a href="#top" class="back-to-top">Back to Top</a></div><p><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" alt="http://creativecommons.org/licenses/by-nc-sa/3.0/">http://creativecommons.org/licenses/by-nc-sa/3.0/</a></p>
<div class="heading clearfix"><h2><a href="#See-Also" name="See-Also">See Also</a></h2><a href="#top" class="back-to-top">Back to Top</a></div><p><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode" alt="http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode">http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode</a></p>
+M-----
